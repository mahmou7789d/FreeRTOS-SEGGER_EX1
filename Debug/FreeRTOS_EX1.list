
FreeRTOS_EX1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006670  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08006780  08006780  00016780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006914  08006914  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08006914  08006914  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006914  08006914  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006914  08006914  00016914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006918  08006918  00016918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800691c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041d0  20000064  08006980  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004234  08006980  00024234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012de0  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e38  00000000  00000000  00032eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001328  00000000  00000000  00035ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eb9  00000000  00000000  00037010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a422  00000000  00000000  00037ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000151b6  00000000  00000000  000522eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097041  00000000  00000000  000674a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005530  00000000  00000000  000fe4e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  00103a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08006768 	.word	0x08006768

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08006768 	.word	0x08006768

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	; 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	20002b14 	.word	0x20002b14

080001dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b088      	sub	sp, #32
 80001e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e2:	f000 fa21 	bl	8000628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e6:	f000 f851 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ea:	f000 f88b 	bl	8000304 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  /*Enable Cycle Counter Feature of The Processor */
  DWT_CTRL |=  1;
 80001ee:	4b20      	ldr	r3, [pc, #128]	; (8000270 <main+0x94>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a1f      	ldr	r2, [pc, #124]	; (8000270 <main+0x94>)
 80001f4:	f043 0301 	orr.w	r3, r3, #1
 80001f8:	6013      	str	r3, [r2, #0]

  /*Configure Sysview target source files and start recording*/
  SEGGER_SYSVIEW_Conf();
 80001fa:	f003 fd1f 	bl	8003c3c <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80001fe:	f005 f84b 	bl	8005298 <SEGGER_SYSVIEW_Start>

  TaskHandle_t Task1Handle,Task2Handle;
  BaseType_t Local_Status ;
  Local_Status = xTaskCreate(Task1Handler,"Task_1",200,"I'm Task1",2,&Task1Handle);
 8000202:	f107 0308 	add.w	r3, r7, #8
 8000206:	9301      	str	r3, [sp, #4]
 8000208:	2302      	movs	r3, #2
 800020a:	9300      	str	r3, [sp, #0]
 800020c:	4b19      	ldr	r3, [pc, #100]	; (8000274 <main+0x98>)
 800020e:	22c8      	movs	r2, #200	; 0xc8
 8000210:	4919      	ldr	r1, [pc, #100]	; (8000278 <main+0x9c>)
 8000212:	481a      	ldr	r0, [pc, #104]	; (800027c <main+0xa0>)
 8000214:	f001 fed0 	bl	8001fb8 <xTaskCreate>
 8000218:	6178      	str	r0, [r7, #20]

  configASSERT(Local_Status == pdPASS);
 800021a:	697b      	ldr	r3, [r7, #20]
 800021c:	2b01      	cmp	r3, #1
 800021e:	d00a      	beq.n	8000236 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000224:	f383 8811 	msr	BASEPRI, r3
 8000228:	f3bf 8f6f 	isb	sy
 800022c:	f3bf 8f4f 	dsb	sy
 8000230:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000232:	bf00      	nop
 8000234:	e7fe      	b.n	8000234 <main+0x58>
  Local_Status = xTaskCreate(Task2Handler,"Task_2",200,"I'm Task2",2,&Task2Handle);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	9301      	str	r3, [sp, #4]
 800023a:	2302      	movs	r3, #2
 800023c:	9300      	str	r3, [sp, #0]
 800023e:	4b10      	ldr	r3, [pc, #64]	; (8000280 <main+0xa4>)
 8000240:	22c8      	movs	r2, #200	; 0xc8
 8000242:	4910      	ldr	r1, [pc, #64]	; (8000284 <main+0xa8>)
 8000244:	4810      	ldr	r0, [pc, #64]	; (8000288 <main+0xac>)
 8000246:	f001 feb7 	bl	8001fb8 <xTaskCreate>
 800024a:	6178      	str	r0, [r7, #20]

  configASSERT(Local_Status == pdPASS);
 800024c:	697b      	ldr	r3, [r7, #20]
 800024e:	2b01      	cmp	r3, #1
 8000250:	d00a      	beq.n	8000268 <main+0x8c>
        __asm volatile
 8000252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000256:	f383 8811 	msr	BASEPRI, r3
 800025a:	f3bf 8f6f 	isb	sy
 800025e:	f3bf 8f4f 	dsb	sy
 8000262:	60fb      	str	r3, [r7, #12]
    }
 8000264:	bf00      	nop
 8000266:	e7fe      	b.n	8000266 <main+0x8a>

  vTaskStartScheduler();
 8000268:	f002 f820 	bl	80022ac <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800026c:	e7fe      	b.n	800026c <main+0x90>
 800026e:	bf00      	nop
 8000270:	e0001000 	.word	0xe0001000
 8000274:	08006780 	.word	0x08006780
 8000278:	0800678c 	.word	0x0800678c
 800027c:	0800039d 	.word	0x0800039d
 8000280:	08006794 	.word	0x08006794
 8000284:	080067a0 	.word	0x080067a0
 8000288:	080003d9 	.word	0x080003d9

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b090      	sub	sp, #64	; 0x40
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0318 	add.w	r3, r7, #24
 8000296:	2228      	movs	r2, #40	; 0x28
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f005 fdca 	bl	8005e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
 80002ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ae:	2302      	movs	r3, #2
 80002b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b2:	2301      	movs	r3, #1
 80002b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b6:	2310      	movs	r3, #16
 80002b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ba:	2300      	movs	r3, #0
 80002bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	f107 0318 	add.w	r3, r7, #24
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 fc5e 	bl	8000b84 <HAL_RCC_OscConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ce:	f000 f8b3 	bl	8000438 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	230f      	movs	r3, #15
 80002d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002d6:	2300      	movs	r3, #0
 80002d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 fecc 	bl	8001088 <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002f6:	f000 f89f 	bl	8000438 <Error_Handler>
  }
}
 80002fa:	bf00      	nop
 80002fc:	3740      	adds	r7, #64	; 0x40
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b088      	sub	sp, #32
 8000308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030a:	f107 0310 	add.w	r3, r7, #16
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000318:	4b1e      	ldr	r3, [pc, #120]	; (8000394 <MX_GPIO_Init+0x90>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a1d      	ldr	r2, [pc, #116]	; (8000394 <MX_GPIO_Init+0x90>)
 800031e:	f043 0310 	orr.w	r3, r3, #16
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <MX_GPIO_Init+0x90>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0310 	and.w	r3, r3, #16
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <MX_GPIO_Init+0x90>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a17      	ldr	r2, [pc, #92]	; (8000394 <MX_GPIO_Init+0x90>)
 8000336:	f043 0320 	orr.w	r3, r3, #32
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b15      	ldr	r3, [pc, #84]	; (8000394 <MX_GPIO_Init+0x90>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0320 	and.w	r3, r3, #32
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <MX_GPIO_Init+0x90>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a11      	ldr	r2, [pc, #68]	; (8000394 <MX_GPIO_Init+0x90>)
 800034e:	f043 0304 	orr.w	r3, r3, #4
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <MX_GPIO_Init+0x90>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0304 	and.w	r3, r3, #4
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000366:	480c      	ldr	r0, [pc, #48]	; (8000398 <MX_GPIO_Init+0x94>)
 8000368:	f000 fbf4 	bl	8000b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800036c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000372:	2301      	movs	r3, #1
 8000374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000376:	2300      	movs	r3, #0
 8000378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037a:	2302      	movs	r3, #2
 800037c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800037e:	f107 0310 	add.w	r3, r7, #16
 8000382:	4619      	mov	r1, r3
 8000384:	4804      	ldr	r0, [pc, #16]	; (8000398 <MX_GPIO_Init+0x94>)
 8000386:	f000 fa61 	bl	800084c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800038a:	bf00      	nop
 800038c:	3720      	adds	r7, #32
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000
 8000398:	40011000 	.word	0x40011000

0800039c <Task1Handler>:

/* USER CODE BEGIN 4 */
void Task1Handler(void* Parameters)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b09c      	sub	sp, #112	; 0x70
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
	char Fstring[100];
	while(1)
	{
//		HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
		snprintf(Fstring,100,"%s\n",(char*)Parameters);
 80003a4:	f107 000c 	add.w	r0, r7, #12
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a09      	ldr	r2, [pc, #36]	; (80003d0 <Task1Handler+0x34>)
 80003ac:	2164      	movs	r1, #100	; 0x64
 80003ae:	f005 fcfd 	bl	8005dac <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(Fstring);
 80003b2:	f107 030c 	add.w	r3, r7, #12
 80003b6:	4618      	mov	r0, r3
 80003b8:	f005 fc88 	bl	8005ccc <SEGGER_SYSVIEW_PrintfTarget>
//		for(int i=0;i<100000;i++)
			{

			}
		taskYIELD();
 80003bc:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <Task1Handler+0x38>)
 80003be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	f3bf 8f4f 	dsb	sy
 80003c8:	f3bf 8f6f 	isb	sy
		snprintf(Fstring,100,"%s\n",(char*)Parameters);
 80003cc:	e7ea      	b.n	80003a4 <Task1Handler+0x8>
 80003ce:	bf00      	nop
 80003d0:	080067a8 	.word	0x080067a8
 80003d4:	e000ed04 	.word	0xe000ed04

080003d8 <Task2Handler>:
	}
}
void Task2Handler(void* Parameters)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b09c      	sub	sp, #112	; 0x70
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	char Fstring[100];
	while(1)
	{
//		HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_14);
		snprintf(Fstring,100,"%s\n",(char*)Parameters);
 80003e0:	f107 000c 	add.w	r0, r7, #12
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a09      	ldr	r2, [pc, #36]	; (800040c <Task2Handler+0x34>)
 80003e8:	2164      	movs	r1, #100	; 0x64
 80003ea:	f005 fcdf 	bl	8005dac <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(Fstring);
 80003ee:	f107 030c 	add.w	r3, r7, #12
 80003f2:	4618      	mov	r0, r3
 80003f4:	f005 fc6a 	bl	8005ccc <SEGGER_SYSVIEW_PrintfTarget>
//		for(int i=0;i<100000;i++)
			{

			}
		taskYIELD();
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <Task2Handler+0x38>)
 80003fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	f3bf 8f4f 	dsb	sy
 8000404:	f3bf 8f6f 	isb	sy
		snprintf(Fstring,100,"%s\n",(char*)Parameters);
 8000408:	e7ea      	b.n	80003e0 <Task2Handler+0x8>
 800040a:	bf00      	nop
 800040c:	080067a8 	.word	0x080067a8
 8000410:	e000ed04 	.word	0xe000ed04

08000414 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a04      	ldr	r2, [pc, #16]	; (8000434 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d101      	bne.n	800042a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000426:	f000 f915 	bl	8000654 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800042a:	bf00      	nop
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40012c00 	.word	0x40012c00

08000438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800043c:	b672      	cpsid	i
}
 800043e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000440:	e7fe      	b.n	8000440 <Error_Handler+0x8>
	...

08000444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800044a:	4b16      	ldr	r3, [pc, #88]	; (80004a4 <HAL_MspInit+0x60>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	4a15      	ldr	r2, [pc, #84]	; (80004a4 <HAL_MspInit+0x60>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6193      	str	r3, [r2, #24]
 8000456:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <HAL_MspInit+0x60>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000462:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <HAL_MspInit+0x60>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	4a0f      	ldr	r2, [pc, #60]	; (80004a4 <HAL_MspInit+0x60>)
 8000468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800046c:	61d3      	str	r3, [r2, #28]
 800046e:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <HAL_MspInit+0x60>)
 8000470:	69db      	ldr	r3, [r3, #28]
 8000472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800047a:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <HAL_MspInit+0x64>)
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	4a05      	ldr	r2, [pc, #20]	; (80004a8 <HAL_MspInit+0x64>)
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000496:	f003 f873 	bl	8003580 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800049a:	bf00      	nop
 800049c:	3710      	adds	r7, #16
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40010000 	.word	0x40010000

080004ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b08c      	sub	sp, #48	; 0x30
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80004b4:	2300      	movs	r3, #0
 80004b6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80004b8:	2300      	movs	r3, #0
 80004ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80004bc:	2300      	movs	r3, #0
 80004be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80004c2:	4b2e      	ldr	r3, [pc, #184]	; (800057c <HAL_InitTick+0xd0>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	4a2d      	ldr	r2, [pc, #180]	; (800057c <HAL_InitTick+0xd0>)
 80004c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004cc:	6193      	str	r3, [r2, #24]
 80004ce:	4b2b      	ldr	r3, [pc, #172]	; (800057c <HAL_InitTick+0xd0>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004da:	f107 020c 	add.w	r2, r7, #12
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	4611      	mov	r1, r2
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 ff2b 	bl	8001340 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80004ea:	f000 ff15 	bl	8001318 <HAL_RCC_GetPCLK2Freq>
 80004ee:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004f2:	4a23      	ldr	r2, [pc, #140]	; (8000580 <HAL_InitTick+0xd4>)
 80004f4:	fba2 2303 	umull	r2, r3, r2, r3
 80004f8:	0c9b      	lsrs	r3, r3, #18
 80004fa:	3b01      	subs	r3, #1
 80004fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80004fe:	4b21      	ldr	r3, [pc, #132]	; (8000584 <HAL_InitTick+0xd8>)
 8000500:	4a21      	ldr	r2, [pc, #132]	; (8000588 <HAL_InitTick+0xdc>)
 8000502:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000504:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <HAL_InitTick+0xd8>)
 8000506:	f240 32e7 	movw	r2, #999	; 0x3e7
 800050a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800050c:	4a1d      	ldr	r2, [pc, #116]	; (8000584 <HAL_InitTick+0xd8>)
 800050e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000510:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000512:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <HAL_InitTick+0xd8>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000518:	4b1a      	ldr	r3, [pc, #104]	; (8000584 <HAL_InitTick+0xd8>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <HAL_InitTick+0xd8>)
 8000520:	2200      	movs	r2, #0
 8000522:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000524:	4817      	ldr	r0, [pc, #92]	; (8000584 <HAL_InitTick+0xd8>)
 8000526:	f000 ff59 	bl	80013dc <HAL_TIM_Base_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000530:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000534:	2b00      	cmp	r3, #0
 8000536:	d11b      	bne.n	8000570 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000538:	4812      	ldr	r0, [pc, #72]	; (8000584 <HAL_InitTick+0xd8>)
 800053a:	f000 ffa7 	bl	800148c <HAL_TIM_Base_Start_IT>
 800053e:	4603      	mov	r3, r0
 8000540:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000544:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000548:	2b00      	cmp	r3, #0
 800054a:	d111      	bne.n	8000570 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800054c:	2019      	movs	r0, #25
 800054e:	f000 f96e 	bl	800082e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b0f      	cmp	r3, #15
 8000556:	d808      	bhi.n	800056a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000558:	2200      	movs	r2, #0
 800055a:	6879      	ldr	r1, [r7, #4]
 800055c:	2019      	movs	r0, #25
 800055e:	f000 f94a 	bl	80007f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000562:	4a0a      	ldr	r2, [pc, #40]	; (800058c <HAL_InitTick+0xe0>)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	e002      	b.n	8000570 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000570:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000574:	4618      	mov	r0, r3
 8000576:	3730      	adds	r7, #48	; 0x30
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40021000 	.word	0x40021000
 8000580:	431bde83 	.word	0x431bde83
 8000584:	20000080 	.word	0x20000080
 8000588:	40012c00 	.word	0x40012c00
 800058c:	20000004 	.word	0x20000004

08000590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <NMI_Handler+0x4>

08000596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800059a:	e7fe      	b.n	800059a <HardFault_Handler+0x4>

0800059c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <MemManage_Handler+0x4>

080005a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <BusFault_Handler+0x4>

080005a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <UsageFault_Handler+0x4>

080005ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
	...

080005bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <TIM1_UP_IRQHandler+0x10>)
 80005c2:	f000 ffb5 	bl	8001530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000080 	.word	0x20000080

080005d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005dc:	f7ff fff8 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e0:	480b      	ldr	r0, [pc, #44]	; (8000610 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005e2:	490c      	ldr	r1, [pc, #48]	; (8000614 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005e4:	4a0c      	ldr	r2, [pc, #48]	; (8000618 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e8:	e002      	b.n	80005f0 <LoopCopyDataInit>

080005ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ee:	3304      	adds	r3, #4

080005f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f4:	d3f9      	bcc.n	80005ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f6:	4a09      	ldr	r2, [pc, #36]	; (800061c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005f8:	4c09      	ldr	r4, [pc, #36]	; (8000620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005fc:	e001      	b.n	8000602 <LoopFillZerobss>

080005fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000600:	3204      	adds	r2, #4

08000602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000604:	d3fb      	bcc.n	80005fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000606:	f005 fc1d 	bl	8005e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800060a:	f7ff fde7 	bl	80001dc <main>
  bx lr
 800060e:	4770      	bx	lr
  ldr r0, =_sdata
 8000610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000614:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000618:	0800691c 	.word	0x0800691c
  ldr r2, =_sbss
 800061c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000620:	20004234 	.word	0x20004234

08000624 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000624:	e7fe      	b.n	8000624 <ADC1_2_IRQHandler>
	...

08000628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <HAL_Init+0x28>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a07      	ldr	r2, [pc, #28]	; (8000650 <HAL_Init+0x28>)
 8000632:	f043 0310 	orr.w	r3, r3, #16
 8000636:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000638:	2003      	movs	r0, #3
 800063a:	f000 f8d1 	bl	80007e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800063e:	200f      	movs	r0, #15
 8000640:	f7ff ff34 	bl	80004ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000644:	f7ff fefe 	bl	8000444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000648:	2300      	movs	r3, #0
}
 800064a:	4618      	mov	r0, r3
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40022000 	.word	0x40022000

08000654 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <HAL_IncTick+0x1c>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4b05      	ldr	r3, [pc, #20]	; (8000674 <HAL_IncTick+0x20>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4413      	add	r3, r2
 8000664:	4a03      	ldr	r2, [pc, #12]	; (8000674 <HAL_IncTick+0x20>)
 8000666:	6013      	str	r3, [r2, #0]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	20000008 	.word	0x20000008
 8000674:	200000c8 	.word	0x200000c8

08000678 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return uwTick;
 800067c:	4b02      	ldr	r3, [pc, #8]	; (8000688 <HAL_GetTick+0x10>)
 800067e:	681b      	ldr	r3, [r3, #0]
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr
 8000688:	200000c8 	.word	0x200000c8

0800068c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f003 0307 	and.w	r3, r3, #7
 800069a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <__NVIC_SetPriorityGrouping+0x44>)
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006a8:	4013      	ands	r3, r2
 80006aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006be:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <__NVIC_SetPriorityGrouping+0x44>)
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	60d3      	str	r3, [r2, #12]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <__NVIC_GetPriorityGrouping+0x18>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	0a1b      	lsrs	r3, r3, #8
 80006de:	f003 0307 	and.w	r3, r3, #7
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	db0b      	blt.n	800071a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	f003 021f 	and.w	r2, r3, #31
 8000708:	4906      	ldr	r1, [pc, #24]	; (8000724 <__NVIC_EnableIRQ+0x34>)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	095b      	lsrs	r3, r3, #5
 8000710:	2001      	movs	r0, #1
 8000712:	fa00 f202 	lsl.w	r2, r0, r2
 8000716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	e000e100 	.word	0xe000e100

08000728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	6039      	str	r1, [r7, #0]
 8000732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000738:	2b00      	cmp	r3, #0
 800073a:	db0a      	blt.n	8000752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	490c      	ldr	r1, [pc, #48]	; (8000774 <__NVIC_SetPriority+0x4c>)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	0112      	lsls	r2, r2, #4
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	440b      	add	r3, r1
 800074c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000750:	e00a      	b.n	8000768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4908      	ldr	r1, [pc, #32]	; (8000778 <__NVIC_SetPriority+0x50>)
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	f003 030f 	and.w	r3, r3, #15
 800075e:	3b04      	subs	r3, #4
 8000760:	0112      	lsls	r2, r2, #4
 8000762:	b2d2      	uxtb	r2, r2
 8000764:	440b      	add	r3, r1
 8000766:	761a      	strb	r2, [r3, #24]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000e100 	.word	0xe000e100
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800077c:	b480      	push	{r7}
 800077e:	b089      	sub	sp, #36	; 0x24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	f1c3 0307 	rsb	r3, r3, #7
 8000796:	2b04      	cmp	r3, #4
 8000798:	bf28      	it	cs
 800079a:	2304      	movcs	r3, #4
 800079c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3304      	adds	r3, #4
 80007a2:	2b06      	cmp	r3, #6
 80007a4:	d902      	bls.n	80007ac <NVIC_EncodePriority+0x30>
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3b03      	subs	r3, #3
 80007aa:	e000      	b.n	80007ae <NVIC_EncodePriority+0x32>
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	f04f 32ff 	mov.w	r2, #4294967295
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	43da      	mvns	r2, r3
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	401a      	ands	r2, r3
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c4:	f04f 31ff 	mov.w	r1, #4294967295
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	fa01 f303 	lsl.w	r3, r1, r3
 80007ce:	43d9      	mvns	r1, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	4313      	orrs	r3, r2
         );
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3724      	adds	r7, #36	; 0x24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff ff4f 	bl	800068c <__NVIC_SetPriorityGrouping>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b086      	sub	sp, #24
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	4603      	mov	r3, r0
 80007fe:	60b9      	str	r1, [r7, #8]
 8000800:	607a      	str	r2, [r7, #4]
 8000802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000808:	f7ff ff64 	bl	80006d4 <__NVIC_GetPriorityGrouping>
 800080c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	68b9      	ldr	r1, [r7, #8]
 8000812:	6978      	ldr	r0, [r7, #20]
 8000814:	f7ff ffb2 	bl	800077c <NVIC_EncodePriority>
 8000818:	4602      	mov	r2, r0
 800081a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081e:	4611      	mov	r1, r2
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff81 	bl	8000728 <__NVIC_SetPriority>
}
 8000826:	bf00      	nop
 8000828:	3718      	adds	r7, #24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ff57 	bl	80006f0 <__NVIC_EnableIRQ>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800084c:	b480      	push	{r7}
 800084e:	b08b      	sub	sp, #44	; 0x2c
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800085e:	e169      	b.n	8000b34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000860:	2201      	movs	r2, #1
 8000862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	69fa      	ldr	r2, [r7, #28]
 8000870:	4013      	ands	r3, r2
 8000872:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000874:	69ba      	ldr	r2, [r7, #24]
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	429a      	cmp	r2, r3
 800087a:	f040 8158 	bne.w	8000b2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	4a9a      	ldr	r2, [pc, #616]	; (8000aec <HAL_GPIO_Init+0x2a0>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d05e      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
 8000888:	4a98      	ldr	r2, [pc, #608]	; (8000aec <HAL_GPIO_Init+0x2a0>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d875      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 800088e:	4a98      	ldr	r2, [pc, #608]	; (8000af0 <HAL_GPIO_Init+0x2a4>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d058      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
 8000894:	4a96      	ldr	r2, [pc, #600]	; (8000af0 <HAL_GPIO_Init+0x2a4>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d86f      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 800089a:	4a96      	ldr	r2, [pc, #600]	; (8000af4 <HAL_GPIO_Init+0x2a8>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d052      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
 80008a0:	4a94      	ldr	r2, [pc, #592]	; (8000af4 <HAL_GPIO_Init+0x2a8>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d869      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 80008a6:	4a94      	ldr	r2, [pc, #592]	; (8000af8 <HAL_GPIO_Init+0x2ac>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d04c      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
 80008ac:	4a92      	ldr	r2, [pc, #584]	; (8000af8 <HAL_GPIO_Init+0x2ac>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d863      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 80008b2:	4a92      	ldr	r2, [pc, #584]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d046      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
 80008b8:	4a90      	ldr	r2, [pc, #576]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d85d      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 80008be:	2b12      	cmp	r3, #18
 80008c0:	d82a      	bhi.n	8000918 <HAL_GPIO_Init+0xcc>
 80008c2:	2b12      	cmp	r3, #18
 80008c4:	d859      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 80008c6:	a201      	add	r2, pc, #4	; (adr r2, 80008cc <HAL_GPIO_Init+0x80>)
 80008c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008cc:	08000947 	.word	0x08000947
 80008d0:	08000921 	.word	0x08000921
 80008d4:	08000933 	.word	0x08000933
 80008d8:	08000975 	.word	0x08000975
 80008dc:	0800097b 	.word	0x0800097b
 80008e0:	0800097b 	.word	0x0800097b
 80008e4:	0800097b 	.word	0x0800097b
 80008e8:	0800097b 	.word	0x0800097b
 80008ec:	0800097b 	.word	0x0800097b
 80008f0:	0800097b 	.word	0x0800097b
 80008f4:	0800097b 	.word	0x0800097b
 80008f8:	0800097b 	.word	0x0800097b
 80008fc:	0800097b 	.word	0x0800097b
 8000900:	0800097b 	.word	0x0800097b
 8000904:	0800097b 	.word	0x0800097b
 8000908:	0800097b 	.word	0x0800097b
 800090c:	0800097b 	.word	0x0800097b
 8000910:	08000929 	.word	0x08000929
 8000914:	0800093d 	.word	0x0800093d
 8000918:	4a79      	ldr	r2, [pc, #484]	; (8000b00 <HAL_GPIO_Init+0x2b4>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d013      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800091e:	e02c      	b.n	800097a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	623b      	str	r3, [r7, #32]
          break;
 8000926:	e029      	b.n	800097c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	3304      	adds	r3, #4
 800092e:	623b      	str	r3, [r7, #32]
          break;
 8000930:	e024      	b.n	800097c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	3308      	adds	r3, #8
 8000938:	623b      	str	r3, [r7, #32]
          break;
 800093a:	e01f      	b.n	800097c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	330c      	adds	r3, #12
 8000942:	623b      	str	r3, [r7, #32]
          break;
 8000944:	e01a      	b.n	800097c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d102      	bne.n	8000954 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800094e:	2304      	movs	r3, #4
 8000950:	623b      	str	r3, [r7, #32]
          break;
 8000952:	e013      	b.n	800097c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d105      	bne.n	8000968 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800095c:	2308      	movs	r3, #8
 800095e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	69fa      	ldr	r2, [r7, #28]
 8000964:	611a      	str	r2, [r3, #16]
          break;
 8000966:	e009      	b.n	800097c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000968:	2308      	movs	r3, #8
 800096a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	69fa      	ldr	r2, [r7, #28]
 8000970:	615a      	str	r2, [r3, #20]
          break;
 8000972:	e003      	b.n	800097c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
          break;
 8000978:	e000      	b.n	800097c <HAL_GPIO_Init+0x130>
          break;
 800097a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	2bff      	cmp	r3, #255	; 0xff
 8000980:	d801      	bhi.n	8000986 <HAL_GPIO_Init+0x13a>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	e001      	b.n	800098a <HAL_GPIO_Init+0x13e>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	3304      	adds	r3, #4
 800098a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	2bff      	cmp	r3, #255	; 0xff
 8000990:	d802      	bhi.n	8000998 <HAL_GPIO_Init+0x14c>
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	e002      	b.n	800099e <HAL_GPIO_Init+0x152>
 8000998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099a:	3b08      	subs	r3, #8
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	210f      	movs	r1, #15
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ac:	43db      	mvns	r3, r3
 80009ae:	401a      	ands	r2, r3
 80009b0:	6a39      	ldr	r1, [r7, #32]
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	fa01 f303 	lsl.w	r3, r1, r3
 80009b8:	431a      	orrs	r2, r3
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	f000 80b1 	beq.w	8000b2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009cc:	4b4d      	ldr	r3, [pc, #308]	; (8000b04 <HAL_GPIO_Init+0x2b8>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a4c      	ldr	r2, [pc, #304]	; (8000b04 <HAL_GPIO_Init+0x2b8>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b4a      	ldr	r3, [pc, #296]	; (8000b04 <HAL_GPIO_Init+0x2b8>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009e4:	4a48      	ldr	r2, [pc, #288]	; (8000b08 <HAL_GPIO_Init+0x2bc>)
 80009e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e8:	089b      	lsrs	r3, r3, #2
 80009ea:	3302      	adds	r3, #2
 80009ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	f003 0303 	and.w	r3, r3, #3
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	220f      	movs	r2, #15
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	4013      	ands	r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a40      	ldr	r2, [pc, #256]	; (8000b0c <HAL_GPIO_Init+0x2c0>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d013      	beq.n	8000a38 <HAL_GPIO_Init+0x1ec>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a3f      	ldr	r2, [pc, #252]	; (8000b10 <HAL_GPIO_Init+0x2c4>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d00d      	beq.n	8000a34 <HAL_GPIO_Init+0x1e8>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a3e      	ldr	r2, [pc, #248]	; (8000b14 <HAL_GPIO_Init+0x2c8>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d007      	beq.n	8000a30 <HAL_GPIO_Init+0x1e4>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a3d      	ldr	r2, [pc, #244]	; (8000b18 <HAL_GPIO_Init+0x2cc>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d101      	bne.n	8000a2c <HAL_GPIO_Init+0x1e0>
 8000a28:	2303      	movs	r3, #3
 8000a2a:	e006      	b.n	8000a3a <HAL_GPIO_Init+0x1ee>
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	e004      	b.n	8000a3a <HAL_GPIO_Init+0x1ee>
 8000a30:	2302      	movs	r3, #2
 8000a32:	e002      	b.n	8000a3a <HAL_GPIO_Init+0x1ee>
 8000a34:	2301      	movs	r3, #1
 8000a36:	e000      	b.n	8000a3a <HAL_GPIO_Init+0x1ee>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a3c:	f002 0203 	and.w	r2, r2, #3
 8000a40:	0092      	lsls	r2, r2, #2
 8000a42:	4093      	lsls	r3, r2
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a4a:	492f      	ldr	r1, [pc, #188]	; (8000b08 <HAL_GPIO_Init+0x2bc>)
 8000a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4e:	089b      	lsrs	r3, r3, #2
 8000a50:	3302      	adds	r3, #2
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d006      	beq.n	8000a72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a64:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a66:	689a      	ldr	r2, [r3, #8]
 8000a68:	492c      	ldr	r1, [pc, #176]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	608b      	str	r3, [r1, #8]
 8000a70:	e006      	b.n	8000a80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a72:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a74:	689a      	ldr	r2, [r3, #8]
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	4928      	ldr	r1, [pc, #160]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d006      	beq.n	8000a9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a8c:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a8e:	68da      	ldr	r2, [r3, #12]
 8000a90:	4922      	ldr	r1, [pc, #136]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	60cb      	str	r3, [r1, #12]
 8000a98:	e006      	b.n	8000aa8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a9a:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a9c:	68da      	ldr	r2, [r3, #12]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	491e      	ldr	r1, [pc, #120]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d006      	beq.n	8000ac2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ab4:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	4918      	ldr	r1, [pc, #96]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	604b      	str	r3, [r1, #4]
 8000ac0:	e006      	b.n	8000ad0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000ac4:	685a      	ldr	r2, [r3, #4]
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	4914      	ldr	r1, [pc, #80]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000acc:	4013      	ands	r3, r2
 8000ace:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d021      	beq.n	8000b20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	490e      	ldr	r1, [pc, #56]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	600b      	str	r3, [r1, #0]
 8000ae8:	e021      	b.n	8000b2e <HAL_GPIO_Init+0x2e2>
 8000aea:	bf00      	nop
 8000aec:	10320000 	.word	0x10320000
 8000af0:	10310000 	.word	0x10310000
 8000af4:	10220000 	.word	0x10220000
 8000af8:	10210000 	.word	0x10210000
 8000afc:	10120000 	.word	0x10120000
 8000b00:	10110000 	.word	0x10110000
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40010000 	.word	0x40010000
 8000b0c:	40010800 	.word	0x40010800
 8000b10:	40010c00 	.word	0x40010c00
 8000b14:	40011000 	.word	0x40011000
 8000b18:	40011400 	.word	0x40011400
 8000b1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <HAL_GPIO_Init+0x304>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	4909      	ldr	r1, [pc, #36]	; (8000b50 <HAL_GPIO_Init+0x304>)
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	3301      	adds	r3, #1
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f47f ae8e 	bne.w	8000860 <HAL_GPIO_Init+0x14>
  }
}
 8000b44:	bf00      	nop
 8000b46:	bf00      	nop
 8000b48:	372c      	adds	r7, #44	; 0x2c
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	40010400 	.word	0x40010400

08000b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	807b      	strh	r3, [r7, #2]
 8000b60:	4613      	mov	r3, r2
 8000b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b64:	787b      	ldrb	r3, [r7, #1]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d003      	beq.n	8000b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b6a:	887a      	ldrh	r2, [r7, #2]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b70:	e003      	b.n	8000b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b72:	887b      	ldrh	r3, [r7, #2]
 8000b74:	041a      	lsls	r2, r3, #16
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	611a      	str	r2, [r3, #16]
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d101      	bne.n	8000b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e272      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f000 8087 	beq.w	8000cb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ba4:	4b92      	ldr	r3, [pc, #584]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 030c 	and.w	r3, r3, #12
 8000bac:	2b04      	cmp	r3, #4
 8000bae:	d00c      	beq.n	8000bca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bb0:	4b8f      	ldr	r3, [pc, #572]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 030c 	and.w	r3, r3, #12
 8000bb8:	2b08      	cmp	r3, #8
 8000bba:	d112      	bne.n	8000be2 <HAL_RCC_OscConfig+0x5e>
 8000bbc:	4b8c      	ldr	r3, [pc, #560]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc8:	d10b      	bne.n	8000be2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bca:	4b89      	ldr	r3, [pc, #548]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d06c      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x12c>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d168      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e24c      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bea:	d106      	bne.n	8000bfa <HAL_RCC_OscConfig+0x76>
 8000bec:	4b80      	ldr	r3, [pc, #512]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a7f      	ldr	r2, [pc, #508]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	e02e      	b.n	8000c58 <HAL_RCC_OscConfig+0xd4>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d10c      	bne.n	8000c1c <HAL_RCC_OscConfig+0x98>
 8000c02:	4b7b      	ldr	r3, [pc, #492]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a7a      	ldr	r2, [pc, #488]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	4b78      	ldr	r3, [pc, #480]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a77      	ldr	r2, [pc, #476]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c18:	6013      	str	r3, [r2, #0]
 8000c1a:	e01d      	b.n	8000c58 <HAL_RCC_OscConfig+0xd4>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c24:	d10c      	bne.n	8000c40 <HAL_RCC_OscConfig+0xbc>
 8000c26:	4b72      	ldr	r3, [pc, #456]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a71      	ldr	r2, [pc, #452]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	4b6f      	ldr	r3, [pc, #444]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a6e      	ldr	r2, [pc, #440]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	e00b      	b.n	8000c58 <HAL_RCC_OscConfig+0xd4>
 8000c40:	4b6b      	ldr	r3, [pc, #428]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a6a      	ldr	r2, [pc, #424]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	4b68      	ldr	r3, [pc, #416]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a67      	ldr	r2, [pc, #412]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d013      	beq.n	8000c88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c60:	f7ff fd0a 	bl	8000678 <HAL_GetTick>
 8000c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c66:	e008      	b.n	8000c7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c68:	f7ff fd06 	bl	8000678 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b64      	cmp	r3, #100	; 0x64
 8000c74:	d901      	bls.n	8000c7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c76:	2303      	movs	r3, #3
 8000c78:	e200      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c7a:	4b5d      	ldr	r3, [pc, #372]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d0f0      	beq.n	8000c68 <HAL_RCC_OscConfig+0xe4>
 8000c86:	e014      	b.n	8000cb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c88:	f7ff fcf6 	bl	8000678 <HAL_GetTick>
 8000c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c8e:	e008      	b.n	8000ca2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c90:	f7ff fcf2 	bl	8000678 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b64      	cmp	r3, #100	; 0x64
 8000c9c:	d901      	bls.n	8000ca2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e1ec      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ca2:	4b53      	ldr	r3, [pc, #332]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1f0      	bne.n	8000c90 <HAL_RCC_OscConfig+0x10c>
 8000cae:	e000      	b.n	8000cb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d063      	beq.n	8000d86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cbe:	4b4c      	ldr	r3, [pc, #304]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 030c 	and.w	r3, r3, #12
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d00b      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cca:	4b49      	ldr	r3, [pc, #292]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f003 030c 	and.w	r3, r3, #12
 8000cd2:	2b08      	cmp	r3, #8
 8000cd4:	d11c      	bne.n	8000d10 <HAL_RCC_OscConfig+0x18c>
 8000cd6:	4b46      	ldr	r3, [pc, #280]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d116      	bne.n	8000d10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ce2:	4b43      	ldr	r3, [pc, #268]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d005      	beq.n	8000cfa <HAL_RCC_OscConfig+0x176>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	691b      	ldr	r3, [r3, #16]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d001      	beq.n	8000cfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e1c0      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cfa:	4b3d      	ldr	r3, [pc, #244]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	4939      	ldr	r1, [pc, #228]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d0e:	e03a      	b.n	8000d86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	691b      	ldr	r3, [r3, #16]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d020      	beq.n	8000d5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d18:	4b36      	ldr	r3, [pc, #216]	; (8000df4 <HAL_RCC_OscConfig+0x270>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d1e:	f7ff fcab 	bl	8000678 <HAL_GetTick>
 8000d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d24:	e008      	b.n	8000d38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d26:	f7ff fca7 	bl	8000678 <HAL_GetTick>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d901      	bls.n	8000d38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d34:	2303      	movs	r3, #3
 8000d36:	e1a1      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d38:	4b2d      	ldr	r3, [pc, #180]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0f0      	beq.n	8000d26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d44:	4b2a      	ldr	r3, [pc, #168]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	4927      	ldr	r1, [pc, #156]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	4313      	orrs	r3, r2
 8000d56:	600b      	str	r3, [r1, #0]
 8000d58:	e015      	b.n	8000d86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d5a:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <HAL_RCC_OscConfig+0x270>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d60:	f7ff fc8a 	bl	8000678 <HAL_GetTick>
 8000d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d66:	e008      	b.n	8000d7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d68:	f7ff fc86 	bl	8000678 <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d901      	bls.n	8000d7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d76:	2303      	movs	r3, #3
 8000d78:	e180      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1f0      	bne.n	8000d68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0308 	and.w	r3, r3, #8
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d03a      	beq.n	8000e08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d019      	beq.n	8000dce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <HAL_RCC_OscConfig+0x274>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da0:	f7ff fc6a 	bl	8000678 <HAL_GetTick>
 8000da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000da6:	e008      	b.n	8000dba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000da8:	f7ff fc66 	bl	8000678 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d901      	bls.n	8000dba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e160      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0f0      	beq.n	8000da8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f000 faea 	bl	80013a0 <RCC_Delay>
 8000dcc:	e01c      	b.n	8000e08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_RCC_OscConfig+0x274>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd4:	f7ff fc50 	bl	8000678 <HAL_GetTick>
 8000dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dda:	e00f      	b.n	8000dfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ddc:	f7ff fc4c 	bl	8000678 <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d908      	bls.n	8000dfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e146      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
 8000dee:	bf00      	nop
 8000df0:	40021000 	.word	0x40021000
 8000df4:	42420000 	.word	0x42420000
 8000df8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dfc:	4b92      	ldr	r3, [pc, #584]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1e9      	bne.n	8000ddc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f000 80a6 	beq.w	8000f62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e1a:	4b8b      	ldr	r3, [pc, #556]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d10d      	bne.n	8000e42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	4b88      	ldr	r3, [pc, #544]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	4a87      	ldr	r2, [pc, #540]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e30:	61d3      	str	r3, [r2, #28]
 8000e32:	4b85      	ldr	r3, [pc, #532]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e42:	4b82      	ldr	r3, [pc, #520]	; (800104c <HAL_RCC_OscConfig+0x4c8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d118      	bne.n	8000e80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e4e:	4b7f      	ldr	r3, [pc, #508]	; (800104c <HAL_RCC_OscConfig+0x4c8>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a7e      	ldr	r2, [pc, #504]	; (800104c <HAL_RCC_OscConfig+0x4c8>)
 8000e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e5a:	f7ff fc0d 	bl	8000678 <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e60:	e008      	b.n	8000e74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e62:	f7ff fc09 	bl	8000678 <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b64      	cmp	r3, #100	; 0x64
 8000e6e:	d901      	bls.n	8000e74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e103      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e74:	4b75      	ldr	r3, [pc, #468]	; (800104c <HAL_RCC_OscConfig+0x4c8>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0f0      	beq.n	8000e62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d106      	bne.n	8000e96 <HAL_RCC_OscConfig+0x312>
 8000e88:	4b6f      	ldr	r3, [pc, #444]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000e8a:	6a1b      	ldr	r3, [r3, #32]
 8000e8c:	4a6e      	ldr	r2, [pc, #440]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6213      	str	r3, [r2, #32]
 8000e94:	e02d      	b.n	8000ef2 <HAL_RCC_OscConfig+0x36e>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d10c      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x334>
 8000e9e:	4b6a      	ldr	r3, [pc, #424]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000ea0:	6a1b      	ldr	r3, [r3, #32]
 8000ea2:	4a69      	ldr	r2, [pc, #420]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000ea4:	f023 0301 	bic.w	r3, r3, #1
 8000ea8:	6213      	str	r3, [r2, #32]
 8000eaa:	4b67      	ldr	r3, [pc, #412]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000eac:	6a1b      	ldr	r3, [r3, #32]
 8000eae:	4a66      	ldr	r2, [pc, #408]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000eb0:	f023 0304 	bic.w	r3, r3, #4
 8000eb4:	6213      	str	r3, [r2, #32]
 8000eb6:	e01c      	b.n	8000ef2 <HAL_RCC_OscConfig+0x36e>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	2b05      	cmp	r3, #5
 8000ebe:	d10c      	bne.n	8000eda <HAL_RCC_OscConfig+0x356>
 8000ec0:	4b61      	ldr	r3, [pc, #388]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	4a60      	ldr	r2, [pc, #384]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000ec6:	f043 0304 	orr.w	r3, r3, #4
 8000eca:	6213      	str	r3, [r2, #32]
 8000ecc:	4b5e      	ldr	r3, [pc, #376]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	4a5d      	ldr	r2, [pc, #372]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6213      	str	r3, [r2, #32]
 8000ed8:	e00b      	b.n	8000ef2 <HAL_RCC_OscConfig+0x36e>
 8000eda:	4b5b      	ldr	r3, [pc, #364]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000edc:	6a1b      	ldr	r3, [r3, #32]
 8000ede:	4a5a      	ldr	r2, [pc, #360]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	f023 0301 	bic.w	r3, r3, #1
 8000ee4:	6213      	str	r3, [r2, #32]
 8000ee6:	4b58      	ldr	r3, [pc, #352]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000ee8:	6a1b      	ldr	r3, [r3, #32]
 8000eea:	4a57      	ldr	r2, [pc, #348]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	f023 0304 	bic.w	r3, r3, #4
 8000ef0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d015      	beq.n	8000f26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efa:	f7ff fbbd 	bl	8000678 <HAL_GetTick>
 8000efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f00:	e00a      	b.n	8000f18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f02:	f7ff fbb9 	bl	8000678 <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d901      	bls.n	8000f18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e0b1      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f18:	4b4b      	ldr	r3, [pc, #300]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0ee      	beq.n	8000f02 <HAL_RCC_OscConfig+0x37e>
 8000f24:	e014      	b.n	8000f50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f26:	f7ff fba7 	bl	8000678 <HAL_GetTick>
 8000f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f2c:	e00a      	b.n	8000f44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f2e:	f7ff fba3 	bl	8000678 <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e09b      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f44:	4b40      	ldr	r3, [pc, #256]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1ee      	bne.n	8000f2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d105      	bne.n	8000f62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f56:	4b3c      	ldr	r3, [pc, #240]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	4a3b      	ldr	r2, [pc, #236]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 8087 	beq.w	800107a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f6c:	4b36      	ldr	r3, [pc, #216]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 030c 	and.w	r3, r3, #12
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	d061      	beq.n	800103c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	69db      	ldr	r3, [r3, #28]
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d146      	bne.n	800100e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f80:	4b33      	ldr	r3, [pc, #204]	; (8001050 <HAL_RCC_OscConfig+0x4cc>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f86:	f7ff fb77 	bl	8000678 <HAL_GetTick>
 8000f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f8c:	e008      	b.n	8000fa0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f8e:	f7ff fb73 	bl	8000678 <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e06d      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa0:	4b29      	ldr	r3, [pc, #164]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1f0      	bne.n	8000f8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a1b      	ldr	r3, [r3, #32]
 8000fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb4:	d108      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fb6:	4b24      	ldr	r3, [pc, #144]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	4921      	ldr	r1, [pc, #132]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a19      	ldr	r1, [r3, #32]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	430b      	orrs	r3, r1
 8000fda:	491b      	ldr	r1, [pc, #108]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <HAL_RCC_OscConfig+0x4cc>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe6:	f7ff fb47 	bl	8000678 <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fee:	f7ff fb43 	bl	8000678 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e03d      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0f0      	beq.n	8000fee <HAL_RCC_OscConfig+0x46a>
 800100c:	e035      	b.n	800107a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <HAL_RCC_OscConfig+0x4cc>)
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001014:	f7ff fb30 	bl	8000678 <HAL_GetTick>
 8001018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800101c:	f7ff fb2c 	bl	8000678 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e026      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_RCC_OscConfig+0x4c4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f0      	bne.n	800101c <HAL_RCC_OscConfig+0x498>
 800103a:	e01e      	b.n	800107a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d107      	bne.n	8001054 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e019      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
 8001048:	40021000 	.word	0x40021000
 800104c:	40007000 	.word	0x40007000
 8001050:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <HAL_RCC_OscConfig+0x500>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	429a      	cmp	r2, r3
 8001066:	d106      	bne.n	8001076 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001072:	429a      	cmp	r2, r3
 8001074:	d001      	beq.n	800107a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800107a:	2300      	movs	r3, #0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40021000 	.word	0x40021000

08001088 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e0d0      	b.n	800123e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800109c:	4b6a      	ldr	r3, [pc, #424]	; (8001248 <HAL_RCC_ClockConfig+0x1c0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0307 	and.w	r3, r3, #7
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d910      	bls.n	80010cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010aa:	4b67      	ldr	r3, [pc, #412]	; (8001248 <HAL_RCC_ClockConfig+0x1c0>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f023 0207 	bic.w	r2, r3, #7
 80010b2:	4965      	ldr	r1, [pc, #404]	; (8001248 <HAL_RCC_ClockConfig+0x1c0>)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ba:	4b63      	ldr	r3, [pc, #396]	; (8001248 <HAL_RCC_ClockConfig+0x1c0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d001      	beq.n	80010cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e0b8      	b.n	800123e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d020      	beq.n	800111a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010e4:	4b59      	ldr	r3, [pc, #356]	; (800124c <HAL_RCC_ClockConfig+0x1c4>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	4a58      	ldr	r2, [pc, #352]	; (800124c <HAL_RCC_ClockConfig+0x1c4>)
 80010ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0308 	and.w	r3, r3, #8
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d005      	beq.n	8001108 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010fc:	4b53      	ldr	r3, [pc, #332]	; (800124c <HAL_RCC_ClockConfig+0x1c4>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	4a52      	ldr	r2, [pc, #328]	; (800124c <HAL_RCC_ClockConfig+0x1c4>)
 8001102:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001106:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001108:	4b50      	ldr	r3, [pc, #320]	; (800124c <HAL_RCC_ClockConfig+0x1c4>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	494d      	ldr	r1, [pc, #308]	; (800124c <HAL_RCC_ClockConfig+0x1c4>)
 8001116:	4313      	orrs	r3, r2
 8001118:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d040      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d107      	bne.n	800113e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	4b47      	ldr	r3, [pc, #284]	; (800124c <HAL_RCC_ClockConfig+0x1c4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d115      	bne.n	8001166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e07f      	b.n	800123e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d107      	bne.n	8001156 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001146:	4b41      	ldr	r3, [pc, #260]	; (800124c <HAL_RCC_ClockConfig+0x1c4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d109      	bne.n	8001166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e073      	b.n	800123e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001156:	4b3d      	ldr	r3, [pc, #244]	; (800124c <HAL_RCC_ClockConfig+0x1c4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e06b      	b.n	800123e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001166:	4b39      	ldr	r3, [pc, #228]	; (800124c <HAL_RCC_ClockConfig+0x1c4>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f023 0203 	bic.w	r2, r3, #3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4936      	ldr	r1, [pc, #216]	; (800124c <HAL_RCC_ClockConfig+0x1c4>)
 8001174:	4313      	orrs	r3, r2
 8001176:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001178:	f7ff fa7e 	bl	8000678 <HAL_GetTick>
 800117c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800117e:	e00a      	b.n	8001196 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001180:	f7ff fa7a 	bl	8000678 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	f241 3288 	movw	r2, #5000	; 0x1388
 800118e:	4293      	cmp	r3, r2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e053      	b.n	800123e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001196:	4b2d      	ldr	r3, [pc, #180]	; (800124c <HAL_RCC_ClockConfig+0x1c4>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 020c 	and.w	r2, r3, #12
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d1eb      	bne.n	8001180 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011a8:	4b27      	ldr	r3, [pc, #156]	; (8001248 <HAL_RCC_ClockConfig+0x1c0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d210      	bcs.n	80011d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b6:	4b24      	ldr	r3, [pc, #144]	; (8001248 <HAL_RCC_ClockConfig+0x1c0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f023 0207 	bic.w	r2, r3, #7
 80011be:	4922      	ldr	r1, [pc, #136]	; (8001248 <HAL_RCC_ClockConfig+0x1c0>)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c6:	4b20      	ldr	r3, [pc, #128]	; (8001248 <HAL_RCC_ClockConfig+0x1c0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d001      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e032      	b.n	800123e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d008      	beq.n	80011f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <HAL_RCC_ClockConfig+0x1c4>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	4916      	ldr	r1, [pc, #88]	; (800124c <HAL_RCC_ClockConfig+0x1c4>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d009      	beq.n	8001216 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_RCC_ClockConfig+0x1c4>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	490e      	ldr	r1, [pc, #56]	; (800124c <HAL_RCC_ClockConfig+0x1c4>)
 8001212:	4313      	orrs	r3, r2
 8001214:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001216:	f000 f821 	bl	800125c <HAL_RCC_GetSysClockFreq>
 800121a:	4602      	mov	r2, r0
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_RCC_ClockConfig+0x1c4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	091b      	lsrs	r3, r3, #4
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	490a      	ldr	r1, [pc, #40]	; (8001250 <HAL_RCC_ClockConfig+0x1c8>)
 8001228:	5ccb      	ldrb	r3, [r1, r3]
 800122a:	fa22 f303 	lsr.w	r3, r2, r3
 800122e:	4a09      	ldr	r2, [pc, #36]	; (8001254 <HAL_RCC_ClockConfig+0x1cc>)
 8001230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_RCC_ClockConfig+0x1d0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f938 	bl	80004ac <HAL_InitTick>

  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40022000 	.word	0x40022000
 800124c:	40021000 	.word	0x40021000
 8001250:	0800687c 	.word	0x0800687c
 8001254:	20000000 	.word	0x20000000
 8001258:	20000004 	.word	0x20000004

0800125c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	2b04      	cmp	r3, #4
 8001284:	d002      	beq.n	800128c <HAL_RCC_GetSysClockFreq+0x30>
 8001286:	2b08      	cmp	r3, #8
 8001288:	d003      	beq.n	8001292 <HAL_RCC_GetSysClockFreq+0x36>
 800128a:	e027      	b.n	80012dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800128e:	613b      	str	r3, [r7, #16]
      break;
 8001290:	e027      	b.n	80012e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	0c9b      	lsrs	r3, r3, #18
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800129c:	5cd3      	ldrb	r3, [r2, r3]
 800129e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d010      	beq.n	80012cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	0c5b      	lsrs	r3, r3, #17
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	4a11      	ldr	r2, [pc, #68]	; (80012fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80012b6:	5cd3      	ldrb	r3, [r2, r3]
 80012b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80012be:	fb03 f202 	mul.w	r2, r3, r2
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	e004      	b.n	80012d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a0c      	ldr	r2, [pc, #48]	; (8001300 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012d0:	fb02 f303 	mul.w	r3, r2, r3
 80012d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	613b      	str	r3, [r7, #16]
      break;
 80012da:	e002      	b.n	80012e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80012de:	613b      	str	r3, [r7, #16]
      break;
 80012e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012e2:	693b      	ldr	r3, [r7, #16]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000
 80012f4:	007a1200 	.word	0x007a1200
 80012f8:	08006894 	.word	0x08006894
 80012fc:	080068a4 	.word	0x080068a4
 8001300:	003d0900 	.word	0x003d0900

08001304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001308:	4b02      	ldr	r3, [pc, #8]	; (8001314 <HAL_RCC_GetHCLKFreq+0x10>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	20000000 	.word	0x20000000

08001318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800131c:	f7ff fff2 	bl	8001304 <HAL_RCC_GetHCLKFreq>
 8001320:	4602      	mov	r2, r0
 8001322:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	0adb      	lsrs	r3, r3, #11
 8001328:	f003 0307 	and.w	r3, r3, #7
 800132c:	4903      	ldr	r1, [pc, #12]	; (800133c <HAL_RCC_GetPCLK2Freq+0x24>)
 800132e:	5ccb      	ldrb	r3, [r1, r3]
 8001330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001334:	4618      	mov	r0, r3
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40021000 	.word	0x40021000
 800133c:	0800688c 	.word	0x0800688c

08001340 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	220f      	movs	r2, #15
 800134e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_RCC_GetClockConfig+0x58>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0203 	and.w	r2, r3, #3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800135c:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_RCC_GetClockConfig+0x58>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_RCC_GetClockConfig+0x58>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_RCC_GetClockConfig+0x58>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	08db      	lsrs	r3, r3, #3
 800137a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_RCC_GetClockConfig+0x5c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0207 	and.w	r2, r3, #7
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	40021000 	.word	0x40021000
 800139c:	40022000 	.word	0x40022000

080013a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <RCC_Delay+0x34>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <RCC_Delay+0x38>)
 80013ae:	fba2 2303 	umull	r2, r3, r2, r3
 80013b2:	0a5b      	lsrs	r3, r3, #9
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
 80013ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013bc:	bf00      	nop
  }
  while (Delay --);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	1e5a      	subs	r2, r3, #1
 80013c2:	60fa      	str	r2, [r7, #12]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f9      	bne.n	80013bc <RCC_Delay+0x1c>
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	20000000 	.word	0x20000000
 80013d8:	10624dd3 	.word	0x10624dd3

080013dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e041      	b.n	8001472 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d106      	bne.n	8001408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f839 	bl	800147a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2202      	movs	r2, #2
 800140c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3304      	adds	r3, #4
 8001418:	4619      	mov	r1, r3
 800141a:	4610      	mov	r0, r2
 800141c:	f000 f9b4 	bl	8001788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b01      	cmp	r3, #1
 800149e:	d001      	beq.n	80014a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e03a      	b.n	800151a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2202      	movs	r2, #2
 80014a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0201 	orr.w	r2, r2, #1
 80014ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a18      	ldr	r2, [pc, #96]	; (8001524 <HAL_TIM_Base_Start_IT+0x98>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d00e      	beq.n	80014e4 <HAL_TIM_Base_Start_IT+0x58>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ce:	d009      	beq.n	80014e4 <HAL_TIM_Base_Start_IT+0x58>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a14      	ldr	r2, [pc, #80]	; (8001528 <HAL_TIM_Base_Start_IT+0x9c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d004      	beq.n	80014e4 <HAL_TIM_Base_Start_IT+0x58>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a13      	ldr	r2, [pc, #76]	; (800152c <HAL_TIM_Base_Start_IT+0xa0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d111      	bne.n	8001508 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b06      	cmp	r3, #6
 80014f4:	d010      	beq.n	8001518 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f042 0201 	orr.w	r2, r2, #1
 8001504:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001506:	e007      	b.n	8001518 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0201 	orr.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	40012c00 	.word	0x40012c00
 8001528:	40000400 	.word	0x40000400
 800152c:	40000800 	.word	0x40000800

08001530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b02      	cmp	r3, #2
 8001544:	d122      	bne.n	800158c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b02      	cmp	r3, #2
 8001552:	d11b      	bne.n	800158c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f06f 0202 	mvn.w	r2, #2
 800155c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 f8ed 	bl	8001752 <HAL_TIM_IC_CaptureCallback>
 8001578:	e005      	b.n	8001586 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f8e0 	bl	8001740 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 f8ef 	bl	8001764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	2b04      	cmp	r3, #4
 8001598:	d122      	bne.n	80015e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d11b      	bne.n	80015e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f06f 0204 	mvn.w	r2, #4
 80015b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2202      	movs	r2, #2
 80015b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f8c3 	bl	8001752 <HAL_TIM_IC_CaptureCallback>
 80015cc:	e005      	b.n	80015da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f8b6 	bl	8001740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f8c5 	bl	8001764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d122      	bne.n	8001634 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d11b      	bne.n	8001634 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f06f 0208 	mvn.w	r2, #8
 8001604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2204      	movs	r2, #4
 800160a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f899 	bl	8001752 <HAL_TIM_IC_CaptureCallback>
 8001620:	e005      	b.n	800162e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 f88c 	bl	8001740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 f89b 	bl	8001764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	2b10      	cmp	r3, #16
 8001640:	d122      	bne.n	8001688 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	2b10      	cmp	r3, #16
 800164e:	d11b      	bne.n	8001688 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f06f 0210 	mvn.w	r2, #16
 8001658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2208      	movs	r2, #8
 800165e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f86f 	bl	8001752 <HAL_TIM_IC_CaptureCallback>
 8001674:	e005      	b.n	8001682 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f862 	bl	8001740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f871 	bl	8001764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b01      	cmp	r3, #1
 8001694:	d10e      	bne.n	80016b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d107      	bne.n	80016b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f06f 0201 	mvn.w	r2, #1
 80016ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7fe feb0 	bl	8000414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016be:	2b80      	cmp	r3, #128	; 0x80
 80016c0:	d10e      	bne.n	80016e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016cc:	2b80      	cmp	r3, #128	; 0x80
 80016ce:	d107      	bne.n	80016e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f8bf 	bl	800185e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ea:	2b40      	cmp	r3, #64	; 0x40
 80016ec:	d10e      	bne.n	800170c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f8:	2b40      	cmp	r3, #64	; 0x40
 80016fa:	d107      	bne.n	800170c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f835 	bl	8001776 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	f003 0320 	and.w	r3, r3, #32
 8001716:	2b20      	cmp	r3, #32
 8001718:	d10e      	bne.n	8001738 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f003 0320 	and.w	r3, r3, #32
 8001724:	2b20      	cmp	r3, #32
 8001726:	d107      	bne.n	8001738 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f06f 0220 	mvn.w	r2, #32
 8001730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f88a 	bl	800184c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr

08001752 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a29      	ldr	r2, [pc, #164]	; (8001840 <TIM_Base_SetConfig+0xb8>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d00b      	beq.n	80017b8 <TIM_Base_SetConfig+0x30>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a6:	d007      	beq.n	80017b8 <TIM_Base_SetConfig+0x30>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a26      	ldr	r2, [pc, #152]	; (8001844 <TIM_Base_SetConfig+0xbc>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d003      	beq.n	80017b8 <TIM_Base_SetConfig+0x30>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a25      	ldr	r2, [pc, #148]	; (8001848 <TIM_Base_SetConfig+0xc0>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d108      	bne.n	80017ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <TIM_Base_SetConfig+0xb8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d00b      	beq.n	80017ea <TIM_Base_SetConfig+0x62>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d8:	d007      	beq.n	80017ea <TIM_Base_SetConfig+0x62>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a19      	ldr	r2, [pc, #100]	; (8001844 <TIM_Base_SetConfig+0xbc>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d003      	beq.n	80017ea <TIM_Base_SetConfig+0x62>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a18      	ldr	r2, [pc, #96]	; (8001848 <TIM_Base_SetConfig+0xc0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d108      	bne.n	80017fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	4313      	orrs	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a07      	ldr	r2, [pc, #28]	; (8001840 <TIM_Base_SetConfig+0xb8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d103      	bne.n	8001830 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	691a      	ldr	r2, [r3, #16]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	615a      	str	r2, [r3, #20]
}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	40012c00 	.word	0x40012c00
 8001844:	40000400 	.word	0x40000400
 8001848:	40000800 	.word	0x40000800

0800184c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f103 0208 	add.w	r2, r3, #8
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f103 0208 	add.w	r2, r3, #8
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f103 0208 	add.w	r2, r3, #8
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80018c6:	b480      	push	{r7}
 80018c8:	b085      	sub	sp, #20
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018dc:	d103      	bne.n	80018e6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	e00c      	b.n	8001900 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3308      	adds	r3, #8
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	e002      	b.n	80018f4 <vListInsert+0x2e>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d2f6      	bcs.n	80018ee <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	601a      	str	r2, [r3, #0]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr

08001936 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001936:	b480      	push	{r7}
 8001938:	b085      	sub	sp, #20
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6892      	ldr	r2, [r2, #8]
 800194c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6852      	ldr	r2, [r2, #4]
 8001956:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	429a      	cmp	r2, r3
 8001960:	d103      	bne.n	800196a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	1e5a      	subs	r2, r3, #1
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001992:	2301      	movs	r3, #1
 8001994:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10a      	bne.n	80019b6 <xQueueGenericReset+0x2e>
        __asm volatile
 80019a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019a4:	f383 8811 	msr	BASEPRI, r3
 80019a8:	f3bf 8f6f 	isb	sy
 80019ac:	f3bf 8f4f 	dsb	sy
 80019b0:	60fb      	str	r3, [r7, #12]
    }
 80019b2:	bf00      	nop
 80019b4:	e7fe      	b.n	80019b4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d052      	beq.n	8001a62 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d04e      	beq.n	8001a62 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019cc:	2100      	movs	r1, #0
 80019ce:	fba3 2302 	umull	r2, r3, r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d000      	beq.n	80019d8 <xQueueGenericReset+0x50>
 80019d6:	2101      	movs	r1, #1
 80019d8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d141      	bne.n	8001a62 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 80019de:	f001 fe4b 	bl	8003678 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ea:	6939      	ldr	r1, [r7, #16]
 80019ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	441a      	add	r2, r3
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	2200      	movs	r2, #0
 80019fc:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	6939      	ldr	r1, [r7, #16]
 8001a12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a14:	fb01 f303 	mul.w	r3, r1, r3
 8001a18:	441a      	add	r2, r3
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	22ff      	movs	r2, #255	; 0xff
 8001a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	22ff      	movs	r2, #255	; 0xff
 8001a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d109      	bne.n	8001a48 <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00f      	beq.n	8001a5c <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	3310      	adds	r3, #16
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 ff83 	bl	800294c <xTaskRemoveFromEventList>
 8001a46:	e009      	b.n	8001a5c <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	3310      	adds	r3, #16
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff0f 	bl	8001870 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	3324      	adds	r3, #36	; 0x24
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff ff0a 	bl	8001870 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001a5c:	f001 fe3c 	bl	80036d8 <vPortExitCritical>
 8001a60:	e001      	b.n	8001a66 <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10a      	bne.n	8001a82 <xQueueGenericReset+0xfa>
        __asm volatile
 8001a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a70:	f383 8811 	msr	BASEPRI, r3
 8001a74:	f3bf 8f6f 	isb	sy
 8001a78:	f3bf 8f4f 	dsb	sy
 8001a7c:	60bb      	str	r3, [r7, #8]
    }
 8001a7e:	bf00      	nop
 8001a80:	e7fe      	b.n	8001a80 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001a82:	697b      	ldr	r3, [r7, #20]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af02      	add	r7, sp, #8
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	4613      	mov	r3, r2
 8001a98:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d02e      	beq.n	8001b02 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d000      	beq.n	8001ab4 <xQueueGenericCreate+0x28>
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d123      	bne.n	8001b02 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001ac2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001ac6:	d81c      	bhi.n	8001b02 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	fb02 f303 	mul.w	r3, r2, r3
 8001ad0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	3350      	adds	r3, #80	; 0x50
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f001 fed8 	bl	800388c <pvPortMalloc>
 8001adc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d01c      	beq.n	8001b1e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	3350      	adds	r3, #80	; 0x50
 8001aec:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001aee:	79fa      	ldrb	r2, [r7, #7]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	4613      	mov	r3, r2
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 f814 	bl	8001b28 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001b00:	e00d      	b.n	8001b1e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10a      	bne.n	8001b1e <xQueueGenericCreate+0x92>
        __asm volatile
 8001b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b0c:	f383 8811 	msr	BASEPRI, r3
 8001b10:	f3bf 8f6f 	isb	sy
 8001b14:	f3bf 8f4f 	dsb	sy
 8001b18:	613b      	str	r3, [r7, #16]
    }
 8001b1a:	bf00      	nop
 8001b1c:	e7fe      	b.n	8001b1c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001b1e:	69fb      	ldr	r3, [r7, #28]
    }
 8001b20:	4618      	mov	r0, r3
 8001b22:	3720      	adds	r7, #32
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d103      	bne.n	8001b44 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	e002      	b.n	8001b4a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001b56:	2101      	movs	r1, #1
 8001b58:	69b8      	ldr	r0, [r7, #24]
 8001b5a:	f7ff ff15 	bl	8001988 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	78fa      	ldrb	r2, [r7, #3]
 8001b62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	68f9      	ldr	r1, [r7, #12]
 8001b6c:	2073      	movs	r0, #115	; 0x73
 8001b6e:	f003 fa8b 	bl	8005088 <SEGGER_SYSVIEW_RecordU32x3>
}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b08f      	sub	sp, #60	; 0x3c
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10a      	bne.n	8001bac <xQueueReceive+0x30>
        __asm volatile
 8001b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b9a:	f383 8811 	msr	BASEPRI, r3
 8001b9e:	f3bf 8f6f 	isb	sy
 8001ba2:	f3bf 8f4f 	dsb	sy
 8001ba6:	623b      	str	r3, [r7, #32]
    }
 8001ba8:	bf00      	nop
 8001baa:	e7fe      	b.n	8001baa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d103      	bne.n	8001bba <xQueueReceive+0x3e>
 8001bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <xQueueReceive+0x42>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <xQueueReceive+0x44>
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10a      	bne.n	8001bda <xQueueReceive+0x5e>
        __asm volatile
 8001bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc8:	f383 8811 	msr	BASEPRI, r3
 8001bcc:	f3bf 8f6f 	isb	sy
 8001bd0:	f3bf 8f4f 	dsb	sy
 8001bd4:	61fb      	str	r3, [r7, #28]
    }
 8001bd6:	bf00      	nop
 8001bd8:	e7fe      	b.n	8001bd8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001bda:	f001 f8c1 	bl	8002d60 <xTaskGetSchedulerState>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <xQueueReceive+0x6e>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <xQueueReceive+0x72>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <xQueueReceive+0x74>
 8001bee:	2300      	movs	r3, #0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10a      	bne.n	8001c0a <xQueueReceive+0x8e>
        __asm volatile
 8001bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf8:	f383 8811 	msr	BASEPRI, r3
 8001bfc:	f3bf 8f6f 	isb	sy
 8001c00:	f3bf 8f4f 	dsb	sy
 8001c04:	61bb      	str	r3, [r7, #24]
    }
 8001c06:	bf00      	nop
 8001c08:	e7fe      	b.n	8001c08 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001c0a:	f001 fd35 	bl	8003678 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d024      	beq.n	8001c64 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001c1a:	68b9      	ldr	r1, [r7, #8]
 8001c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c1e:	f000 f8b3 	bl	8001d88 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8001c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c24:	4618      	mov	r0, r3
 8001c26:	f003 ff5b 	bl	8005ae0 <SEGGER_SYSVIEW_ShrinkId>
 8001c2a:	4604      	mov	r4, r0
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f003 ff57 	bl	8005ae0 <SEGGER_SYSVIEW_ShrinkId>
 8001c32:	4602      	mov	r2, r0
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2101      	movs	r1, #1
 8001c38:	9100      	str	r1, [sp, #0]
 8001c3a:	4621      	mov	r1, r4
 8001c3c:	205c      	movs	r0, #92	; 0x5c
 8001c3e:	f003 fa99 	bl	8005174 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	1e5a      	subs	r2, r3, #1
 8001c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c48:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d004      	beq.n	8001c5c <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c54:	3310      	adds	r3, #16
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 fe78 	bl	800294c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001c5c:	f001 fd3c 	bl	80036d8 <vPortExitCritical>
                return pdPASS;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e08a      	b.n	8001d7a <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d113      	bne.n	8001c92 <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001c6a:	f001 fd35 	bl	80036d8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c70:	4618      	mov	r0, r3
 8001c72:	f003 ff35 	bl	8005ae0 <SEGGER_SYSVIEW_ShrinkId>
 8001c76:	4604      	mov	r4, r0
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f003 ff31 	bl	8005ae0 <SEGGER_SYSVIEW_ShrinkId>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2101      	movs	r1, #1
 8001c84:	9100      	str	r1, [sp, #0]
 8001c86:	4621      	mov	r1, r4
 8001c88:	205c      	movs	r0, #92	; 0x5c
 8001c8a:	f003 fa73 	bl	8005174 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e073      	b.n	8001d7a <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d106      	bne.n	8001ca6 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 ff2d 	bl	8002afc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001ca6:	f001 fd17 	bl	80036d8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001caa:	f000 fb61 	bl	8002370 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001cae:	f001 fce3 	bl	8003678 <vPortEnterCritical>
 8001cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cb8:	b25b      	sxtb	r3, r3
 8001cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbe:	d103      	bne.n	8001cc8 <xQueueReceive+0x14c>
 8001cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cce:	b25b      	sxtb	r3, r3
 8001cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd4:	d103      	bne.n	8001cde <xQueueReceive+0x162>
 8001cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001cde:	f001 fcfb 	bl	80036d8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001ce2:	1d3a      	adds	r2, r7, #4
 8001ce4:	f107 0310 	add.w	r3, r7, #16
 8001ce8:	4611      	mov	r1, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 ff1c 	bl	8002b28 <xTaskCheckForTimeOut>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d124      	bne.n	8001d40 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001cf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001cf8:	f000 f8be 	bl	8001e78 <prvIsQueueEmpty>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d018      	beq.n	8001d34 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d04:	3324      	adds	r3, #36	; 0x24
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	4611      	mov	r1, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 fdb2 	bl	8002874 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d12:	f000 f85f 	bl	8001dd4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001d16:	f000 fb39 	bl	800238c <xTaskResumeAll>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f47f af74 	bne.w	8001c0a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001d22:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <xQueueReceive+0x208>)
 8001d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	f3bf 8f4f 	dsb	sy
 8001d2e:	f3bf 8f6f 	isb	sy
 8001d32:	e76a      	b.n	8001c0a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d36:	f000 f84d 	bl	8001dd4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001d3a:	f000 fb27 	bl	800238c <xTaskResumeAll>
 8001d3e:	e764      	b.n	8001c0a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d42:	f000 f847 	bl	8001dd4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001d46:	f000 fb21 	bl	800238c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d4c:	f000 f894 	bl	8001e78 <prvIsQueueEmpty>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f43f af59 	beq.w	8001c0a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f003 fec0 	bl	8005ae0 <SEGGER_SYSVIEW_ShrinkId>
 8001d60:	4604      	mov	r4, r0
 8001d62:	2000      	movs	r0, #0
 8001d64:	f003 febc 	bl	8005ae0 <SEGGER_SYSVIEW_ShrinkId>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	9100      	str	r1, [sp, #0]
 8001d70:	4621      	mov	r1, r4
 8001d72:	205c      	movs	r0, #92	; 0x5c
 8001d74:	f003 f9fe 	bl	8005174 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8001d78:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3734      	adds	r7, #52	; 0x34
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd90      	pop	{r4, r7, pc}
 8001d82:	bf00      	nop
 8001d84:	e000ed04 	.word	0xe000ed04

08001d88 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d018      	beq.n	8001dcc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	441a      	add	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d303      	bcc.n	8001dbc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68d9      	ldr	r1, [r3, #12]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	6838      	ldr	r0, [r7, #0]
 8001dc8:	f004 f862 	bl	8005e90 <memcpy>
    }
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001ddc:	f001 fc4c 	bl	8003678 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001de6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001de8:	e011      	b.n	8001e0e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d012      	beq.n	8001e18 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3324      	adds	r3, #36	; 0x24
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 fda8 	bl	800294c <xTaskRemoveFromEventList>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001e02:	f000 fef7 	bl	8002bf4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	dce9      	bgt.n	8001dea <prvUnlockQueue+0x16>
 8001e16:	e000      	b.n	8001e1a <prvUnlockQueue+0x46>
                    break;
 8001e18:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	22ff      	movs	r2, #255	; 0xff
 8001e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001e22:	f001 fc59 	bl	80036d8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001e26:	f001 fc27 	bl	8003678 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e30:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e32:	e011      	b.n	8001e58 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d012      	beq.n	8001e62 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3310      	adds	r3, #16
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 fd83 	bl	800294c <xTaskRemoveFromEventList>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001e4c:	f000 fed2 	bl	8002bf4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001e50:	7bbb      	ldrb	r3, [r7, #14]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	dce9      	bgt.n	8001e34 <prvUnlockQueue+0x60>
 8001e60:	e000      	b.n	8001e64 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001e62:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	22ff      	movs	r2, #255	; 0xff
 8001e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001e6c:	f001 fc34 	bl	80036d8 <vPortExitCritical>
}
 8001e70:	bf00      	nop
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001e80:	f001 fbfa 	bl	8003678 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d102      	bne.n	8001e92 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	e001      	b.n	8001e96 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001e96:	f001 fc1f 	bl	80036d8 <vPortExitCritical>

    return xReturn;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10a      	bne.n	8001ece <vQueueAddToRegistry+0x2a>
        __asm volatile
 8001eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ebc:	f383 8811 	msr	BASEPRI, r3
 8001ec0:	f3bf 8f6f 	isb	sy
 8001ec4:	f3bf 8f4f 	dsb	sy
 8001ec8:	60fb      	str	r3, [r7, #12]
    }
 8001eca:	bf00      	nop
 8001ecc:	e7fe      	b.n	8001ecc <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d024      	beq.n	8001f1e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	e01e      	b.n	8001f18 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001eda:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <vQueueAddToRegistry+0xa8>)
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d105      	bne.n	8001ef6 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4a17      	ldr	r2, [pc, #92]	; (8001f4c <vQueueAddToRegistry+0xa8>)
 8001ef0:	4413      	add	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
                    break;
 8001ef4:	e013      	b.n	8001f1e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10a      	bne.n	8001f12 <vQueueAddToRegistry+0x6e>
 8001efc:	4a13      	ldr	r2, [pc, #76]	; (8001f4c <vQueueAddToRegistry+0xa8>)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d104      	bne.n	8001f12 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4a0f      	ldr	r2, [pc, #60]	; (8001f4c <vQueueAddToRegistry+0xa8>)
 8001f0e:	4413      	add	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	3301      	adds	r3, #1
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2b07      	cmp	r3, #7
 8001f1c:	d9dd      	bls.n	8001eda <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00f      	beq.n	8001f44 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f003 fdd4 	bl	8005ae0 <SEGGER_SYSVIEW_ShrinkId>
 8001f38:	4601      	mov	r1, r0
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2071      	movs	r0, #113	; 0x71
 8001f40:	f003 f848 	bl	8004fd4 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8001f44:	bf00      	nop
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	200000cc 	.word	0x200000cc

08001f50 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001f60:	f001 fb8a 	bl	8003678 <vPortEnterCritical>
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f6a:	b25b      	sxtb	r3, r3
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f70:	d103      	bne.n	8001f7a <vQueueWaitForMessageRestricted+0x2a>
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f80:	b25b      	sxtb	r3, r3
 8001f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f86:	d103      	bne.n	8001f90 <vQueueWaitForMessageRestricted+0x40>
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f90:	f001 fba2 	bl	80036d8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d106      	bne.n	8001faa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	3324      	adds	r3, #36	; 0x24
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	68b9      	ldr	r1, [r7, #8]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 fc89 	bl	80028bc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001faa:	6978      	ldr	r0, [r7, #20]
 8001fac:	f7ff ff12 	bl	8001dd4 <prvUnlockQueue>
    }
 8001fb0:	bf00      	nop
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08c      	sub	sp, #48	; 0x30
 8001fbc:	af04      	add	r7, sp, #16
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001fc8:	88fb      	ldrh	r3, [r7, #6]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f001 fc5d 	bl	800388c <pvPortMalloc>
 8001fd2:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d013      	beq.n	8002002 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001fda:	2058      	movs	r0, #88	; 0x58
 8001fdc:	f001 fc56 	bl	800388c <pvPortMalloc>
 8001fe0:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001fe8:	2258      	movs	r2, #88	; 0x58
 8001fea:	2100      	movs	r1, #0
 8001fec:	69f8      	ldr	r0, [r7, #28]
 8001fee:	f003 ff21 	bl	8005e34 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ff8:	e005      	b.n	8002006 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001ffa:	6978      	ldr	r0, [r7, #20]
 8001ffc:	f001 fd00 	bl	8003a00 <vPortFree>
 8002000:	e001      	b.n	8002006 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d013      	beq.n	8002034 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800200c:	88fa      	ldrh	r2, [r7, #6]
 800200e:	2300      	movs	r3, #0
 8002010:	9303      	str	r3, [sp, #12]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	9302      	str	r3, [sp, #8]
 8002016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	68b9      	ldr	r1, [r7, #8]
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 f80e 	bl	8002044 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002028:	69f8      	ldr	r0, [r7, #28]
 800202a:	f000 f899 	bl	8002160 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800202e:	2301      	movs	r3, #1
 8002030:	61bb      	str	r3, [r7, #24]
 8002032:	e002      	b.n	800203a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002034:	f04f 33ff 	mov.w	r3, #4294967295
 8002038:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800203a:	69bb      	ldr	r3, [r7, #24]
    }
 800203c:	4618      	mov	r0, r3
 800203e:	3720      	adds	r7, #32
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
 8002050:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002054:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	461a      	mov	r2, r3
 800205c:	21a5      	movs	r1, #165	; 0xa5
 800205e:	f003 fee9 	bl	8005e34 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800206c:	3b01      	subs	r3, #1
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	f023 0307 	bic.w	r3, r3, #7
 800207a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00a      	beq.n	800209c <prvInitialiseNewTask+0x58>
        __asm volatile
 8002086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800208a:	f383 8811 	msr	BASEPRI, r3
 800208e:	f3bf 8f6f 	isb	sy
 8002092:	f3bf 8f4f 	dsb	sy
 8002096:	617b      	str	r3, [r7, #20]
    }
 8002098:	bf00      	nop
 800209a:	e7fe      	b.n	800209a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d01e      	beq.n	80020e0 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
 80020a6:	e012      	b.n	80020ce <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	4413      	add	r3, r2
 80020ae:	7819      	ldrb	r1, [r3, #0]
 80020b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	4413      	add	r3, r2
 80020b6:	3334      	adds	r3, #52	; 0x34
 80020b8:	460a      	mov	r2, r1
 80020ba:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	4413      	add	r3, r2
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d006      	beq.n	80020d6 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	3301      	adds	r3, #1
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	2b09      	cmp	r3, #9
 80020d2:	d9e9      	bls.n	80020a8 <prvInitialiseNewTask+0x64>
 80020d4:	e000      	b.n	80020d8 <prvInitialiseNewTask+0x94>
            {
                break;
 80020d6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80020d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80020e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d90a      	bls.n	80020fc <prvInitialiseNewTask+0xb8>
        __asm volatile
 80020e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ea:	f383 8811 	msr	BASEPRI, r3
 80020ee:	f3bf 8f6f 	isb	sy
 80020f2:	f3bf 8f4f 	dsb	sy
 80020f6:	613b      	str	r3, [r7, #16]
    }
 80020f8:	bf00      	nop
 80020fa:	e7fe      	b.n	80020fa <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80020fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d901      	bls.n	8002106 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002102:	2304      	movs	r3, #4
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800210a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800210c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002110:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002114:	3304      	adds	r3, #4
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fbc9 	bl	80018ae <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800211c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211e:	3318      	adds	r3, #24
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fbc4 	bl	80018ae <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800212a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	f1c3 0205 	rsb	r2, r3, #5
 8002132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002134:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800213a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	68f9      	ldr	r1, [r7, #12]
 8002140:	69b8      	ldr	r0, [r7, #24]
 8002142:	f001 f92d 	bl	80033a0 <pxPortInitialiseStack>
 8002146:	4602      	mov	r2, r0
 8002148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800214c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214e:	2b00      	cmp	r3, #0
 8002150:	d002      	beq.n	8002158 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002156:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002158:	bf00      	nop
 800215a:	3720      	adds	r7, #32
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002160:	b5b0      	push	{r4, r5, r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af02      	add	r7, sp, #8
 8002166:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002168:	f001 fa86 	bl	8003678 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800216c:	4b49      	ldr	r3, [pc, #292]	; (8002294 <prvAddNewTaskToReadyList+0x134>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	3301      	adds	r3, #1
 8002172:	4a48      	ldr	r2, [pc, #288]	; (8002294 <prvAddNewTaskToReadyList+0x134>)
 8002174:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002176:	4b48      	ldr	r3, [pc, #288]	; (8002298 <prvAddNewTaskToReadyList+0x138>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800217e:	4a46      	ldr	r2, [pc, #280]	; (8002298 <prvAddNewTaskToReadyList+0x138>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002184:	4b43      	ldr	r3, [pc, #268]	; (8002294 <prvAddNewTaskToReadyList+0x134>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d110      	bne.n	80021ae <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800218c:	f000 fd50 	bl	8002c30 <prvInitialiseTaskLists>
 8002190:	e00d      	b.n	80021ae <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002192:	4b42      	ldr	r3, [pc, #264]	; (800229c <prvAddNewTaskToReadyList+0x13c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d109      	bne.n	80021ae <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800219a:	4b3f      	ldr	r3, [pc, #252]	; (8002298 <prvAddNewTaskToReadyList+0x138>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d802      	bhi.n	80021ae <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80021a8:	4a3b      	ldr	r2, [pc, #236]	; (8002298 <prvAddNewTaskToReadyList+0x138>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80021ae:	4b3c      	ldr	r3, [pc, #240]	; (80022a0 <prvAddNewTaskToReadyList+0x140>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3301      	adds	r3, #1
 80021b4:	4a3a      	ldr	r2, [pc, #232]	; (80022a0 <prvAddNewTaskToReadyList+0x140>)
 80021b6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80021b8:	4b39      	ldr	r3, [pc, #228]	; (80022a0 <prvAddNewTaskToReadyList+0x140>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d016      	beq.n	80021f4 <prvAddNewTaskToReadyList+0x94>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f003 fbc3 	bl	8005954 <SEGGER_SYSVIEW_OnTaskCreate>
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	461d      	mov	r5, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	461c      	mov	r4, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	1ae3      	subs	r3, r4, r3
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	462b      	mov	r3, r5
 80021f0:	f001 fdc6 	bl	8003d80 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f003 fc30 	bl	8005a5c <SEGGER_SYSVIEW_OnTaskStartReady>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	2201      	movs	r2, #1
 8002202:	409a      	lsls	r2, r3
 8002204:	4b27      	ldr	r3, [pc, #156]	; (80022a4 <prvAddNewTaskToReadyList+0x144>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4313      	orrs	r3, r2
 800220a:	4a26      	ldr	r2, [pc, #152]	; (80022a4 <prvAddNewTaskToReadyList+0x144>)
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002212:	4925      	ldr	r1, [pc, #148]	; (80022a8 <prvAddNewTaskToReadyList+0x148>)
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	3304      	adds	r3, #4
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	609a      	str	r2, [r3, #8]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	3204      	adds	r2, #4
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	1d1a      	adds	r2, r3, #4
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <prvAddNewTaskToReadyList+0x148>)
 8002252:	441a      	add	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	615a      	str	r2, [r3, #20]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800225c:	4912      	ldr	r1, [pc, #72]	; (80022a8 <prvAddNewTaskToReadyList+0x148>)
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	1c59      	adds	r1, r3, #1
 800226c:	480e      	ldr	r0, [pc, #56]	; (80022a8 <prvAddNewTaskToReadyList+0x148>)
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4403      	add	r3, r0
 8002278:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800227a:	f001 fa2d 	bl	80036d8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <prvAddNewTaskToReadyList+0x13c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002286:	4b04      	ldr	r3, [pc, #16]	; (8002298 <prvAddNewTaskToReadyList+0x138>)
 8002288:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bdb0      	pop	{r4, r5, r7, pc}
 8002292:	bf00      	nop
 8002294:	200001e4 	.word	0x200001e4
 8002298:	2000010c 	.word	0x2000010c
 800229c:	200001f0 	.word	0x200001f0
 80022a0:	20000200 	.word	0x20000200
 80022a4:	200001ec 	.word	0x200001ec
 80022a8:	20000110 	.word	0x20000110

080022ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80022b2:	4b27      	ldr	r3, [pc, #156]	; (8002350 <vTaskStartScheduler+0xa4>)
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	2300      	movs	r3, #0
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	2300      	movs	r3, #0
 80022bc:	2282      	movs	r2, #130	; 0x82
 80022be:	4925      	ldr	r1, [pc, #148]	; (8002354 <vTaskStartScheduler+0xa8>)
 80022c0:	4825      	ldr	r0, [pc, #148]	; (8002358 <vTaskStartScheduler+0xac>)
 80022c2:	f7ff fe79 	bl	8001fb8 <xTaskCreate>
 80022c6:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d102      	bne.n	80022d4 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80022ce:	f000 fde5 	bl	8002e9c <xTimerCreateTimerTask>
 80022d2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d124      	bne.n	8002324 <vTaskStartScheduler+0x78>
        __asm volatile
 80022da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022de:	f383 8811 	msr	BASEPRI, r3
 80022e2:	f3bf 8f6f 	isb	sy
 80022e6:	f3bf 8f4f 	dsb	sy
 80022ea:	60bb      	str	r3, [r7, #8]
    }
 80022ec:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80022ee:	4b1b      	ldr	r3, [pc, #108]	; (800235c <vTaskStartScheduler+0xb0>)
 80022f0:	f04f 32ff 	mov.w	r2, #4294967295
 80022f4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80022f6:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <vTaskStartScheduler+0xb4>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80022fc:	4b19      	ldr	r3, [pc, #100]	; (8002364 <vTaskStartScheduler+0xb8>)
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002302:	4b19      	ldr	r3, [pc, #100]	; (8002368 <vTaskStartScheduler+0xbc>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	4b12      	ldr	r3, [pc, #72]	; (8002350 <vTaskStartScheduler+0xa4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d102      	bne.n	8002314 <vTaskStartScheduler+0x68>
 800230e:	f003 fb05 	bl	800591c <SEGGER_SYSVIEW_OnIdle>
 8002312:	e004      	b.n	800231e <vTaskStartScheduler+0x72>
 8002314:	4b14      	ldr	r3, [pc, #80]	; (8002368 <vTaskStartScheduler+0xbc>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f003 fb5d 	bl	80059d8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800231e:	f001 f8bd 	bl	800349c <xPortStartScheduler>
 8002322:	e00e      	b.n	8002342 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232a:	d10a      	bne.n	8002342 <vTaskStartScheduler+0x96>
        __asm volatile
 800232c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002330:	f383 8811 	msr	BASEPRI, r3
 8002334:	f3bf 8f6f 	isb	sy
 8002338:	f3bf 8f4f 	dsb	sy
 800233c:	607b      	str	r3, [r7, #4]
    }
 800233e:	bf00      	nop
 8002340:	e7fe      	b.n	8002340 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <vTaskStartScheduler+0xc0>)
 8002344:	681b      	ldr	r3, [r3, #0]
}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000208 	.word	0x20000208
 8002354:	080067ac 	.word	0x080067ac
 8002358:	08002c0d 	.word	0x08002c0d
 800235c:	20000204 	.word	0x20000204
 8002360:	200001f0 	.word	0x200001f0
 8002364:	200001e8 	.word	0x200001e8
 8002368:	2000010c 	.word	0x2000010c
 800236c:	2000000c 	.word	0x2000000c

08002370 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002374:	4b04      	ldr	r3, [pc, #16]	; (8002388 <vTaskSuspendAll+0x18>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	3301      	adds	r3, #1
 800237a:	4a03      	ldr	r2, [pc, #12]	; (8002388 <vTaskSuspendAll+0x18>)
 800237c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800237e:	bf00      	nop
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	2000020c 	.word	0x2000020c

0800238c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800239a:	4b6d      	ldr	r3, [pc, #436]	; (8002550 <xTaskResumeAll+0x1c4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10a      	bne.n	80023b8 <xTaskResumeAll+0x2c>
        __asm volatile
 80023a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a6:	f383 8811 	msr	BASEPRI, r3
 80023aa:	f3bf 8f6f 	isb	sy
 80023ae:	f3bf 8f4f 	dsb	sy
 80023b2:	607b      	str	r3, [r7, #4]
    }
 80023b4:	bf00      	nop
 80023b6:	e7fe      	b.n	80023b6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80023b8:	f001 f95e 	bl	8003678 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80023bc:	4b64      	ldr	r3, [pc, #400]	; (8002550 <xTaskResumeAll+0x1c4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	4a63      	ldr	r2, [pc, #396]	; (8002550 <xTaskResumeAll+0x1c4>)
 80023c4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023c6:	4b62      	ldr	r3, [pc, #392]	; (8002550 <xTaskResumeAll+0x1c4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f040 80b8 	bne.w	8002540 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80023d0:	4b60      	ldr	r3, [pc, #384]	; (8002554 <xTaskResumeAll+0x1c8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80b3 	beq.w	8002540 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80023da:	e08e      	b.n	80024fa <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023dc:	4b5e      	ldr	r3, [pc, #376]	; (8002558 <xTaskResumeAll+0x1cc>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	6a12      	ldr	r2, [r2, #32]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	69d2      	ldr	r2, [r2, #28]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3318      	adds	r3, #24
 8002406:	429a      	cmp	r2, r3
 8002408:	d103      	bne.n	8002412 <xTaskResumeAll+0x86>
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	6a1a      	ldr	r2, [r3, #32]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	2200      	movs	r2, #0
 8002416:	629a      	str	r2, [r3, #40]	; 0x28
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	1e5a      	subs	r2, r3, #1
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	68d2      	ldr	r2, [r2, #12]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	6892      	ldr	r2, [r2, #8]
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	3304      	adds	r3, #4
 8002444:	429a      	cmp	r2, r3
 8002446:	d103      	bne.n	8002450 <xTaskResumeAll+0xc4>
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	2200      	movs	r2, #0
 8002454:	615a      	str	r2, [r3, #20]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	1e5a      	subs	r2, r3, #1
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	4618      	mov	r0, r3
 8002464:	f003 fafa 	bl	8005a5c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	2201      	movs	r2, #1
 800246e:	409a      	lsls	r2, r3
 8002470:	4b3a      	ldr	r3, [pc, #232]	; (800255c <xTaskResumeAll+0x1d0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4313      	orrs	r3, r2
 8002476:	4a39      	ldr	r2, [pc, #228]	; (800255c <xTaskResumeAll+0x1d0>)
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247e:	4938      	ldr	r1, [pc, #224]	; (8002560 <xTaskResumeAll+0x1d4>)
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	3304      	adds	r3, #4
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	609a      	str	r2, [r3, #8]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	3204      	adds	r2, #4
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	1d1a      	adds	r2, r3, #4
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4a28      	ldr	r2, [pc, #160]	; (8002560 <xTaskResumeAll+0x1d4>)
 80024be:	441a      	add	r2, r3
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	615a      	str	r2, [r3, #20]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c8:	4925      	ldr	r1, [pc, #148]	; (8002560 <xTaskResumeAll+0x1d4>)
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	440b      	add	r3, r1
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	1c59      	adds	r1, r3, #1
 80024d8:	4821      	ldr	r0, [pc, #132]	; (8002560 <xTaskResumeAll+0x1d4>)
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4403      	add	r3, r0
 80024e4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ea:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <xTaskResumeAll+0x1d8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d302      	bcc.n	80024fa <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80024f4:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <xTaskResumeAll+0x1dc>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024fa:	4b17      	ldr	r3, [pc, #92]	; (8002558 <xTaskResumeAll+0x1cc>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f47f af6c 	bne.w	80023dc <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800250a:	f000 fc0f 	bl	8002d2c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800250e:	4b17      	ldr	r3, [pc, #92]	; (800256c <xTaskResumeAll+0x1e0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d010      	beq.n	800253c <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800251a:	f000 f849 	bl	80025b0 <xTaskIncrementTick>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002524:	4b10      	ldr	r3, [pc, #64]	; (8002568 <xTaskResumeAll+0x1dc>)
 8002526:	2201      	movs	r2, #1
 8002528:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	3b01      	subs	r3, #1
 800252e:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f1      	bne.n	800251a <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002536:	4b0d      	ldr	r3, [pc, #52]	; (800256c <xTaskResumeAll+0x1e0>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <xTaskResumeAll+0x1dc>)
 800253e:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002540:	f001 f8ca 	bl	80036d8 <vPortExitCritical>

    return xAlreadyYielded;
 8002544:	697b      	ldr	r3, [r7, #20]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3720      	adds	r7, #32
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	2000020c 	.word	0x2000020c
 8002554:	200001e4 	.word	0x200001e4
 8002558:	200001a4 	.word	0x200001a4
 800255c:	200001ec 	.word	0x200001ec
 8002560:	20000110 	.word	0x20000110
 8002564:	2000010c 	.word	0x2000010c
 8002568:	200001f8 	.word	0x200001f8
 800256c:	200001f4 	.word	0x200001f4

08002570 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002576:	4b04      	ldr	r3, [pc, #16]	; (8002588 <xTaskGetTickCount+0x18>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800257c:	687b      	ldr	r3, [r7, #4]
}
 800257e:	4618      	mov	r0, r3
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	200001e8 	.word	0x200001e8

0800258c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002592:	f001 f93d 	bl	8003810 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800259a:	4b04      	ldr	r3, [pc, #16]	; (80025ac <xTaskGetTickCountFromISR+0x20>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80025a0:	683b      	ldr	r3, [r7, #0]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200001e8 	.word	0x200001e8

080025b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80025b6:	2300      	movs	r3, #0
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025ba:	4b70      	ldr	r3, [pc, #448]	; (800277c <xTaskIncrementTick+0x1cc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f040 80d1 	bne.w	8002766 <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80025c4:	4b6e      	ldr	r3, [pc, #440]	; (8002780 <xTaskIncrementTick+0x1d0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80025cc:	4a6c      	ldr	r2, [pc, #432]	; (8002780 <xTaskIncrementTick+0x1d0>)
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d120      	bne.n	800261a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80025d8:	4b6a      	ldr	r3, [pc, #424]	; (8002784 <xTaskIncrementTick+0x1d4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <xTaskIncrementTick+0x48>
        __asm volatile
 80025e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e6:	f383 8811 	msr	BASEPRI, r3
 80025ea:	f3bf 8f6f 	isb	sy
 80025ee:	f3bf 8f4f 	dsb	sy
 80025f2:	607b      	str	r3, [r7, #4]
    }
 80025f4:	bf00      	nop
 80025f6:	e7fe      	b.n	80025f6 <xTaskIncrementTick+0x46>
 80025f8:	4b62      	ldr	r3, [pc, #392]	; (8002784 <xTaskIncrementTick+0x1d4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	4b62      	ldr	r3, [pc, #392]	; (8002788 <xTaskIncrementTick+0x1d8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a60      	ldr	r2, [pc, #384]	; (8002784 <xTaskIncrementTick+0x1d4>)
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	4a60      	ldr	r2, [pc, #384]	; (8002788 <xTaskIncrementTick+0x1d8>)
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	4b5f      	ldr	r3, [pc, #380]	; (800278c <xTaskIncrementTick+0x1dc>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3301      	adds	r3, #1
 8002612:	4a5e      	ldr	r2, [pc, #376]	; (800278c <xTaskIncrementTick+0x1dc>)
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	f000 fb89 	bl	8002d2c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800261a:	4b5d      	ldr	r3, [pc, #372]	; (8002790 <xTaskIncrementTick+0x1e0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6a3a      	ldr	r2, [r7, #32]
 8002620:	429a      	cmp	r2, r3
 8002622:	f0c0 80a5 	bcc.w	8002770 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002626:	4b57      	ldr	r3, [pc, #348]	; (8002784 <xTaskIncrementTick+0x1d4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d104      	bne.n	800263a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002630:	4b57      	ldr	r3, [pc, #348]	; (8002790 <xTaskIncrementTick+0x1e0>)
 8002632:	f04f 32ff 	mov.w	r2, #4294967295
 8002636:	601a      	str	r2, [r3, #0]
                    break;
 8002638:	e09a      	b.n	8002770 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800263a:	4b52      	ldr	r3, [pc, #328]	; (8002784 <xTaskIncrementTick+0x1d4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800264a:	6a3a      	ldr	r2, [r7, #32]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	429a      	cmp	r2, r3
 8002650:	d203      	bcs.n	800265a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002652:	4a4f      	ldr	r2, [pc, #316]	; (8002790 <xTaskIncrementTick+0x1e0>)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002658:	e08a      	b.n	8002770 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	68d2      	ldr	r2, [r2, #12]
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	6892      	ldr	r2, [r2, #8]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	3304      	adds	r3, #4
 800267c:	429a      	cmp	r2, r3
 800267e:	d103      	bne.n	8002688 <xTaskIncrementTick+0xd8>
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	2200      	movs	r2, #0
 800268c:	615a      	str	r2, [r3, #20]
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	1e5a      	subs	r2, r3, #1
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01e      	beq.n	80026de <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	6a12      	ldr	r2, [r2, #32]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	69d2      	ldr	r2, [r2, #28]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	3318      	adds	r3, #24
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d103      	bne.n	80026ce <xTaskIncrementTick+0x11e>
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	6a1a      	ldr	r2, [r3, #32]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	2200      	movs	r2, #0
 80026d2:	629a      	str	r2, [r3, #40]	; 0x28
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	1e5a      	subs	r2, r3, #1
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f003 f9bb 	bl	8005a5c <SEGGER_SYSVIEW_OnTaskStartReady>
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ea:	2201      	movs	r2, #1
 80026ec:	409a      	lsls	r2, r3
 80026ee:	4b29      	ldr	r3, [pc, #164]	; (8002794 <xTaskIncrementTick+0x1e4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	4a27      	ldr	r2, [pc, #156]	; (8002794 <xTaskIncrementTick+0x1e4>)
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fc:	4926      	ldr	r1, [pc, #152]	; (8002798 <xTaskIncrementTick+0x1e8>)
 80026fe:	4613      	mov	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	3304      	adds	r3, #4
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	60da      	str	r2, [r3, #12]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	3204      	adds	r2, #4
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	1d1a      	adds	r2, r3, #4
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4a17      	ldr	r2, [pc, #92]	; (8002798 <xTaskIncrementTick+0x1e8>)
 800273c:	441a      	add	r2, r3
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	615a      	str	r2, [r3, #20]
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002746:	4914      	ldr	r1, [pc, #80]	; (8002798 <xTaskIncrementTick+0x1e8>)
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	1c59      	adds	r1, r3, #1
 8002756:	4810      	ldr	r0, [pc, #64]	; (8002798 <xTaskIncrementTick+0x1e8>)
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4403      	add	r3, r0
 8002762:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002764:	e75f      	b.n	8002626 <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002766:	4b0d      	ldr	r3, [pc, #52]	; (800279c <xTaskIncrementTick+0x1ec>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	3301      	adds	r3, #1
 800276c:	4a0b      	ldr	r2, [pc, #44]	; (800279c <xTaskIncrementTick+0x1ec>)
 800276e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002772:	4618      	mov	r0, r3
 8002774:	3728      	adds	r7, #40	; 0x28
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	2000020c 	.word	0x2000020c
 8002780:	200001e8 	.word	0x200001e8
 8002784:	2000019c 	.word	0x2000019c
 8002788:	200001a0 	.word	0x200001a0
 800278c:	200001fc 	.word	0x200001fc
 8002790:	20000204 	.word	0x20000204
 8002794:	200001ec 	.word	0x200001ec
 8002798:	20000110 	.word	0x20000110
 800279c:	200001f4 	.word	0x200001f4

080027a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80027a6:	4b2d      	ldr	r3, [pc, #180]	; (800285c <vTaskSwitchContext+0xbc>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80027ae:	4b2c      	ldr	r3, [pc, #176]	; (8002860 <vTaskSwitchContext+0xc0>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80027b4:	e04d      	b.n	8002852 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80027b6:	4b2a      	ldr	r3, [pc, #168]	; (8002860 <vTaskSwitchContext+0xc0>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027bc:	4b29      	ldr	r3, [pc, #164]	; (8002864 <vTaskSwitchContext+0xc4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	fab3 f383 	clz	r3, r3
 80027c8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80027ca:	7afb      	ldrb	r3, [r7, #11]
 80027cc:	f1c3 031f 	rsb	r3, r3, #31
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	4925      	ldr	r1, [pc, #148]	; (8002868 <vTaskSwitchContext+0xc8>)
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10a      	bne.n	80027fc <vTaskSwitchContext+0x5c>
        __asm volatile
 80027e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ea:	f383 8811 	msr	BASEPRI, r3
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	607b      	str	r3, [r7, #4]
    }
 80027f8:	bf00      	nop
 80027fa:	e7fe      	b.n	80027fa <vTaskSwitchContext+0x5a>
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4a18      	ldr	r2, [pc, #96]	; (8002868 <vTaskSwitchContext+0xc8>)
 8002808:	4413      	add	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	3308      	adds	r3, #8
 800281e:	429a      	cmp	r2, r3
 8002820:	d104      	bne.n	800282c <vTaskSwitchContext+0x8c>
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	4a0e      	ldr	r2, [pc, #56]	; (800286c <vTaskSwitchContext+0xcc>)
 8002834:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002836:	4b0d      	ldr	r3, [pc, #52]	; (800286c <vTaskSwitchContext+0xcc>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <vTaskSwitchContext+0xd0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d102      	bne.n	8002848 <vTaskSwitchContext+0xa8>
 8002842:	f003 f86b 	bl	800591c <SEGGER_SYSVIEW_OnIdle>
}
 8002846:	e004      	b.n	8002852 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <vTaskSwitchContext+0xcc>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f003 f8c3 	bl	80059d8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002852:	bf00      	nop
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	2000020c 	.word	0x2000020c
 8002860:	200001f8 	.word	0x200001f8
 8002864:	200001ec 	.word	0x200001ec
 8002868:	20000110 	.word	0x20000110
 800286c:	2000010c 	.word	0x2000010c
 8002870:	20000208 	.word	0x20000208

08002874 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10a      	bne.n	800289a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002888:	f383 8811 	msr	BASEPRI, r3
 800288c:	f3bf 8f6f 	isb	sy
 8002890:	f3bf 8f4f 	dsb	sy
 8002894:	60fb      	str	r3, [r7, #12]
    }
 8002896:	bf00      	nop
 8002898:	e7fe      	b.n	8002898 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800289a:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <vTaskPlaceOnEventList+0x44>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	3318      	adds	r3, #24
 80028a0:	4619      	mov	r1, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff f80f 	bl	80018c6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80028a8:	2101      	movs	r1, #1
 80028aa:	6838      	ldr	r0, [r7, #0]
 80028ac:	f000 fa76 	bl	8002d9c <prvAddCurrentTaskToDelayedList>
}
 80028b0:	bf00      	nop
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	2000010c 	.word	0x2000010c

080028bc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10a      	bne.n	80028e4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80028ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d2:	f383 8811 	msr	BASEPRI, r3
 80028d6:	f3bf 8f6f 	isb	sy
 80028da:	f3bf 8f4f 	dsb	sy
 80028de:	613b      	str	r3, [r7, #16]
    }
 80028e0:	bf00      	nop
 80028e2:	e7fe      	b.n	80028e2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	4b17      	ldr	r3, [pc, #92]	; (8002948 <vTaskPlaceOnEventListRestricted+0x8c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	61da      	str	r2, [r3, #28]
 80028f2:	4b15      	ldr	r3, [pc, #84]	; (8002948 <vTaskPlaceOnEventListRestricted+0x8c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	6892      	ldr	r2, [r2, #8]
 80028fa:	621a      	str	r2, [r3, #32]
 80028fc:	4b12      	ldr	r3, [pc, #72]	; (8002948 <vTaskPlaceOnEventListRestricted+0x8c>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	3218      	adds	r2, #24
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	4b0f      	ldr	r3, [pc, #60]	; (8002948 <vTaskPlaceOnEventListRestricted+0x8c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f103 0218 	add.w	r2, r3, #24
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	629a      	str	r2, [r3, #40]	; 0x28
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800292c:	f04f 33ff 	mov.w	r3, #4294967295
 8002930:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002932:	2024      	movs	r0, #36	; 0x24
 8002934:	f002 faf4 	bl	8004f20 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	68b8      	ldr	r0, [r7, #8]
 800293c:	f000 fa2e 	bl	8002d9c <prvAddCurrentTaskToDelayedList>
    }
 8002940:	bf00      	nop
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	2000010c 	.word	0x2000010c

0800294c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	; 0x28
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10a      	bne.n	8002978 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002966:	f383 8811 	msr	BASEPRI, r3
 800296a:	f3bf 8f6f 	isb	sy
 800296e:	f3bf 8f4f 	dsb	sy
 8002972:	60fb      	str	r3, [r7, #12]
    }
 8002974:	bf00      	nop
 8002976:	e7fe      	b.n	8002976 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	6a3a      	ldr	r2, [r7, #32]
 8002984:	6a12      	ldr	r2, [r2, #32]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	6a3a      	ldr	r2, [r7, #32]
 800298e:	69d2      	ldr	r2, [r2, #28]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	3318      	adds	r3, #24
 800299a:	429a      	cmp	r2, r3
 800299c:	d103      	bne.n	80029a6 <xTaskRemoveFromEventList+0x5a>
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	6a1a      	ldr	r2, [r3, #32]
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	2200      	movs	r2, #0
 80029aa:	629a      	str	r2, [r3, #40]	; 0x28
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	1e5a      	subs	r2, r3, #1
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029b6:	4b4b      	ldr	r3, [pc, #300]	; (8002ae4 <xTaskRemoveFromEventList+0x198>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d162      	bne.n	8002a84 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	6a3a      	ldr	r2, [r7, #32]
 80029ca:	68d2      	ldr	r2, [r2, #12]
 80029cc:	609a      	str	r2, [r3, #8]
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	6a3a      	ldr	r2, [r7, #32]
 80029d4:	6892      	ldr	r2, [r2, #8]
 80029d6:	605a      	str	r2, [r3, #4]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	3304      	adds	r3, #4
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d103      	bne.n	80029ec <xTaskRemoveFromEventList+0xa0>
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	605a      	str	r2, [r3, #4]
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	2200      	movs	r2, #0
 80029f0:	615a      	str	r2, [r3, #20]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	1e5a      	subs	r2, r3, #1
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f003 f82c 	bl	8005a5c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	2201      	movs	r2, #1
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	4b36      	ldr	r3, [pc, #216]	; (8002ae8 <xTaskRemoveFromEventList+0x19c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	4a35      	ldr	r2, [pc, #212]	; (8002ae8 <xTaskRemoveFromEventList+0x19c>)
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1a:	4934      	ldr	r1, [pc, #208]	; (8002aec <xTaskRemoveFromEventList+0x1a0>)
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	3304      	adds	r3, #4
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	609a      	str	r2, [r3, #8]
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	6a3a      	ldr	r2, [r7, #32]
 8002a40:	3204      	adds	r2, #4
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	1d1a      	adds	r2, r3, #4
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4a24      	ldr	r2, [pc, #144]	; (8002aec <xTaskRemoveFromEventList+0x1a0>)
 8002a5a:	441a      	add	r2, r3
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	615a      	str	r2, [r3, #20]
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a64:	4921      	ldr	r1, [pc, #132]	; (8002aec <xTaskRemoveFromEventList+0x1a0>)
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	1c59      	adds	r1, r3, #1
 8002a74:	481d      	ldr	r0, [pc, #116]	; (8002aec <xTaskRemoveFromEventList+0x1a0>)
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4403      	add	r3, r0
 8002a80:	6019      	str	r1, [r3, #0]
 8002a82:	e01b      	b.n	8002abc <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002a84:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <xTaskRemoveFromEventList+0x1a4>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	61bb      	str	r3, [r7, #24]
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	61da      	str	r2, [r3, #28]
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	621a      	str	r2, [r3, #32]
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	6a3a      	ldr	r2, [r7, #32]
 8002a9e:	3218      	adds	r2, #24
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	f103 0218 	add.w	r2, r3, #24
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	4a10      	ldr	r2, [pc, #64]	; (8002af0 <xTaskRemoveFromEventList+0x1a4>)
 8002ab0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ab2:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <xTaskRemoveFromEventList+0x1a4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <xTaskRemoveFromEventList+0x1a4>)
 8002aba:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <xTaskRemoveFromEventList+0x1a8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d905      	bls.n	8002ad6 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002aca:	2301      	movs	r3, #1
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <xTaskRemoveFromEventList+0x1ac>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	e001      	b.n	8002ada <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3728      	adds	r7, #40	; 0x28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	2000020c 	.word	0x2000020c
 8002ae8:	200001ec 	.word	0x200001ec
 8002aec:	20000110 	.word	0x20000110
 8002af0:	200001a4 	.word	0x200001a4
 8002af4:	2000010c 	.word	0x2000010c
 8002af8:	200001f8 	.word	0x200001f8

08002afc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002b04:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <vTaskInternalSetTimeOutState+0x24>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <vTaskInternalSetTimeOutState+0x28>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	605a      	str	r2, [r3, #4]
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	200001fc 	.word	0x200001fc
 8002b24:	200001e8 	.word	0x200001e8

08002b28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10a      	bne.n	8002b4e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	613b      	str	r3, [r7, #16]
    }
 8002b4a:	bf00      	nop
 8002b4c:	e7fe      	b.n	8002b4c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10a      	bne.n	8002b6a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b58:	f383 8811 	msr	BASEPRI, r3
 8002b5c:	f3bf 8f6f 	isb	sy
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	60fb      	str	r3, [r7, #12]
    }
 8002b66:	bf00      	nop
 8002b68:	e7fe      	b.n	8002b68 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002b6a:	f000 fd85 	bl	8003678 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002b6e:	4b1f      	ldr	r3, [pc, #124]	; (8002bec <xTaskCheckForTimeOut+0xc4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b86:	d102      	bne.n	8002b8e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	e026      	b.n	8002bdc <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <xTaskCheckForTimeOut+0xc8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d00a      	beq.n	8002bb0 <xTaskCheckForTimeOut+0x88>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d305      	bcc.n	8002bb0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	e015      	b.n	8002bdc <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d20b      	bcs.n	8002bd2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	1ad2      	subs	r2, r2, r3
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff ff98 	bl	8002afc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61fb      	str	r3, [r7, #28]
 8002bd0:	e004      	b.n	8002bdc <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002bdc:	f000 fd7c 	bl	80036d8 <vPortExitCritical>

    return xReturn;
 8002be0:	69fb      	ldr	r3, [r7, #28]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3720      	adds	r7, #32
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	200001e8 	.word	0x200001e8
 8002bf0:	200001fc 	.word	0x200001fc

08002bf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002bf8:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <vTaskMissedYield+0x14>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
}
 8002bfe:	bf00      	nop
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	200001f8 	.word	0x200001f8

08002c0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002c14:	f000 f84c 	bl	8002cb0 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8002c18:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <prvIdleTask+0x20>)
 8002c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002c28:	e7f4      	b.n	8002c14 <prvIdleTask+0x8>
 8002c2a:	bf00      	nop
 8002c2c:	e000ed04 	.word	0xe000ed04

08002c30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c36:	2300      	movs	r3, #0
 8002c38:	607b      	str	r3, [r7, #4]
 8002c3a:	e00c      	b.n	8002c56 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4a12      	ldr	r2, [pc, #72]	; (8002c90 <prvInitialiseTaskLists+0x60>)
 8002c48:	4413      	add	r3, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe fe10 	bl	8001870 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3301      	adds	r3, #1
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d9ef      	bls.n	8002c3c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002c5c:	480d      	ldr	r0, [pc, #52]	; (8002c94 <prvInitialiseTaskLists+0x64>)
 8002c5e:	f7fe fe07 	bl	8001870 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002c62:	480d      	ldr	r0, [pc, #52]	; (8002c98 <prvInitialiseTaskLists+0x68>)
 8002c64:	f7fe fe04 	bl	8001870 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002c68:	480c      	ldr	r0, [pc, #48]	; (8002c9c <prvInitialiseTaskLists+0x6c>)
 8002c6a:	f7fe fe01 	bl	8001870 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002c6e:	480c      	ldr	r0, [pc, #48]	; (8002ca0 <prvInitialiseTaskLists+0x70>)
 8002c70:	f7fe fdfe 	bl	8001870 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002c74:	480b      	ldr	r0, [pc, #44]	; (8002ca4 <prvInitialiseTaskLists+0x74>)
 8002c76:	f7fe fdfb 	bl	8001870 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <prvInitialiseTaskLists+0x78>)
 8002c7c:	4a05      	ldr	r2, [pc, #20]	; (8002c94 <prvInitialiseTaskLists+0x64>)
 8002c7e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c80:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <prvInitialiseTaskLists+0x7c>)
 8002c82:	4a05      	ldr	r2, [pc, #20]	; (8002c98 <prvInitialiseTaskLists+0x68>)
 8002c84:	601a      	str	r2, [r3, #0]
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000110 	.word	0x20000110
 8002c94:	20000174 	.word	0x20000174
 8002c98:	20000188 	.word	0x20000188
 8002c9c:	200001a4 	.word	0x200001a4
 8002ca0:	200001b8 	.word	0x200001b8
 8002ca4:	200001d0 	.word	0x200001d0
 8002ca8:	2000019c 	.word	0x2000019c
 8002cac:	200001a0 	.word	0x200001a0

08002cb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cb6:	e019      	b.n	8002cec <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002cb8:	f000 fcde 	bl	8003678 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cbc:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <prvCheckTasksWaitingTermination+0x50>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fe fe34 	bl	8001936 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002cce:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <prvCheckTasksWaitingTermination+0x54>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	4a0b      	ldr	r2, [pc, #44]	; (8002d04 <prvCheckTasksWaitingTermination+0x54>)
 8002cd6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <prvCheckTasksWaitingTermination+0x58>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	4a0a      	ldr	r2, [pc, #40]	; (8002d08 <prvCheckTasksWaitingTermination+0x58>)
 8002ce0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002ce2:	f000 fcf9 	bl	80036d8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f810 	bl	8002d0c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <prvCheckTasksWaitingTermination+0x58>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e1      	bne.n	8002cb8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	200001b8 	.word	0x200001b8
 8002d04:	200001e4 	.word	0x200001e4
 8002d08:	200001cc 	.word	0x200001cc

08002d0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 fe71 	bl	8003a00 <vPortFree>
            vPortFree( pxTCB );
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fe6e 	bl	8003a00 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002d24:	bf00      	nop
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <prvResetNextTaskUnblockTime+0x2c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d104      	bne.n	8002d44 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002d3a:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <prvResetNextTaskUnblockTime+0x30>)
 8002d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d40:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002d42:	e005      	b.n	8002d50 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d44:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <prvResetNextTaskUnblockTime+0x2c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a03      	ldr	r2, [pc, #12]	; (8002d5c <prvResetNextTaskUnblockTime+0x30>)
 8002d4e:	6013      	str	r3, [r2, #0]
}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr
 8002d58:	2000019c 	.word	0x2000019c
 8002d5c:	20000204 	.word	0x20000204

08002d60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002d66:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <xTaskGetSchedulerState+0x34>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d102      	bne.n	8002d74 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	607b      	str	r3, [r7, #4]
 8002d72:	e008      	b.n	8002d86 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d74:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <xTaskGetSchedulerState+0x38>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d102      	bne.n	8002d82 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	e001      	b.n	8002d86 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002d82:	2300      	movs	r3, #0
 8002d84:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002d86:	687b      	ldr	r3, [r7, #4]
    }
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	200001f0 	.word	0x200001f0
 8002d98:	2000020c 	.word	0x2000020c

08002d9c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002da6:	4b36      	ldr	r3, [pc, #216]	; (8002e80 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002dac:	4b35      	ldr	r3, [pc, #212]	; (8002e84 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	3304      	adds	r3, #4
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe fdbf 	bl	8001936 <uxListRemove>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10b      	bne.n	8002dd6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002dbe:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43da      	mvns	r2, r3
 8002dcc:	4b2e      	ldr	r3, [pc, #184]	; (8002e88 <prvAddCurrentTaskToDelayedList+0xec>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	4a2d      	ldr	r2, [pc, #180]	; (8002e88 <prvAddCurrentTaskToDelayedList+0xec>)
 8002dd4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ddc:	d124      	bne.n	8002e28 <prvAddCurrentTaskToDelayedList+0x8c>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d021      	beq.n	8002e28 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002de4:	4b29      	ldr	r3, [pc, #164]	; (8002e8c <prvAddCurrentTaskToDelayedList+0xf0>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	4b26      	ldr	r3, [pc, #152]	; (8002e84 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	609a      	str	r2, [r3, #8]
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	6892      	ldr	r2, [r2, #8]
 8002dfa:	60da      	str	r2, [r3, #12]
 8002dfc:	4b21      	ldr	r3, [pc, #132]	; (8002e84 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	3204      	adds	r2, #4
 8002e06:	605a      	str	r2, [r3, #4]
 8002e08:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	1d1a      	adds	r2, r3, #4
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	609a      	str	r2, [r3, #8]
 8002e12:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a1d      	ldr	r2, [pc, #116]	; (8002e8c <prvAddCurrentTaskToDelayedList+0xf0>)
 8002e18:	615a      	str	r2, [r3, #20]
 8002e1a:	4b1c      	ldr	r3, [pc, #112]	; (8002e8c <prvAddCurrentTaskToDelayedList+0xf0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	4a1a      	ldr	r2, [pc, #104]	; (8002e8c <prvAddCurrentTaskToDelayedList+0xf0>)
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002e26:	e026      	b.n	8002e76 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e30:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d209      	bcs.n	8002e54 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e40:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	f7fe fd3a 	bl	80018c6 <vListInsert>
}
 8002e52:	e010      	b.n	8002e76 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4610      	mov	r0, r2
 8002e62:	f7fe fd30 	bl	80018c6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002e66:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d202      	bcs.n	8002e76 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8002e70:	4a09      	ldr	r2, [pc, #36]	; (8002e98 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6013      	str	r3, [r2, #0]
}
 8002e76:	bf00      	nop
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	200001e8 	.word	0x200001e8
 8002e84:	2000010c 	.word	0x2000010c
 8002e88:	200001ec 	.word	0x200001ec
 8002e8c:	200001d0 	.word	0x200001d0
 8002e90:	200001a0 	.word	0x200001a0
 8002e94:	2000019c 	.word	0x2000019c
 8002e98:	20000204 	.word	0x20000204

08002e9c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002ea6:	f000 fa45 	bl	8003334 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002eaa:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <xTimerCreateTimerTask+0x54>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00b      	beq.n	8002eca <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8002eb2:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <xTimerCreateTimerTask+0x58>)
 8002eb4:	9301      	str	r3, [sp, #4]
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ec0:	490d      	ldr	r1, [pc, #52]	; (8002ef8 <xTimerCreateTimerTask+0x5c>)
 8002ec2:	480e      	ldr	r0, [pc, #56]	; (8002efc <xTimerCreateTimerTask+0x60>)
 8002ec4:	f7ff f878 	bl	8001fb8 <xTaskCreate>
 8002ec8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10a      	bne.n	8002ee6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	603b      	str	r3, [r7, #0]
    }
 8002ee2:	bf00      	nop
 8002ee4:	e7fe      	b.n	8002ee4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8002ee6:	687b      	ldr	r3, [r7, #4]
    }
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20000240 	.word	0x20000240
 8002ef4:	20000244 	.word	0x20000244
 8002ef8:	080067b4 	.word	0x080067b4
 8002efc:	08002fa5 	.word	0x08002fa5

08002f00 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002f0c:	e008      	b.n	8002f20 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	4413      	add	r3, r2
 8002f16:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	699a      	ldr	r2, [r3, #24]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	18d1      	adds	r1, r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 f8db 	bl	80030e8 <prvInsertTimerInActiveList>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1ea      	bne.n	8002f0e <prvReloadTimer+0xe>
        }
    }
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f4e:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <prvProcessExpiredTimer+0x5c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fe fcea 	bl	8001936 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f7ff ffc3 	bl	8002f00 <prvReloadTimer>
 8002f7a:	e008      	b.n	8002f8e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f82:	f023 0301 	bic.w	r3, r3, #1
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	4798      	blx	r3
    }
 8002f96:	bf00      	nop
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000238 	.word	0x20000238

08002fa4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002fac:	f107 0308 	add.w	r3, r7, #8
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 f857 	bl	8003064 <prvGetNextExpireTime>
 8002fb6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 f803 	bl	8002fc8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002fc2:	f000 f8d3 	bl	800316c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002fc6:	e7f1      	b.n	8002fac <prvTimerTask+0x8>

08002fc8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002fd2:	f7ff f9cd 	bl	8002370 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002fd6:	f107 0308 	add.w	r3, r7, #8
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 f864 	bl	80030a8 <prvSampleTimeNow>
 8002fe0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d130      	bne.n	800304a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10a      	bne.n	8003004 <prvProcessTimerOrBlockTask+0x3c>
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d806      	bhi.n	8003004 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002ff6:	f7ff f9c9 	bl	800238c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002ffa:	68f9      	ldr	r1, [r7, #12]
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff ffa1 	bl	8002f44 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003002:	e024      	b.n	800304e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d008      	beq.n	800301c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800300a:	4b13      	ldr	r3, [pc, #76]	; (8003058 <prvProcessTimerOrBlockTask+0x90>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <prvProcessTimerOrBlockTask+0x50>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <prvProcessTimerOrBlockTask+0x52>
 8003018:	2300      	movs	r3, #0
 800301a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800301c:	4b0f      	ldr	r3, [pc, #60]	; (800305c <prvProcessTimerOrBlockTask+0x94>)
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	4619      	mov	r1, r3
 800302a:	f7fe ff91 	bl	8001f50 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800302e:	f7ff f9ad 	bl	800238c <xTaskResumeAll>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10a      	bne.n	800304e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003038:	4b09      	ldr	r3, [pc, #36]	; (8003060 <prvProcessTimerOrBlockTask+0x98>)
 800303a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	f3bf 8f6f 	isb	sy
    }
 8003048:	e001      	b.n	800304e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800304a:	f7ff f99f 	bl	800238c <xTaskResumeAll>
    }
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	2000023c 	.word	0x2000023c
 800305c:	20000240 	.word	0x20000240
 8003060:	e000ed04 	.word	0xe000ed04

08003064 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800306c:	4b0d      	ldr	r3, [pc, #52]	; (80030a4 <prvGetNextExpireTime+0x40>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <prvGetNextExpireTime+0x16>
 8003076:	2201      	movs	r2, #1
 8003078:	e000      	b.n	800307c <prvGetNextExpireTime+0x18>
 800307a:	2200      	movs	r2, #0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d105      	bne.n	8003094 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003088:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <prvGetNextExpireTime+0x40>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	e001      	b.n	8003098 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003098:	68fb      	ldr	r3, [r7, #12]
    }
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr
 80030a4:	20000238 	.word	0x20000238

080030a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80030b0:	f7ff fa5e 	bl	8002570 <xTaskGetTickCount>
 80030b4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80030b6:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <prvSampleTimeNow+0x3c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d205      	bcs.n	80030cc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80030c0:	f000 f912 	bl	80032e8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	e002      	b.n	80030d2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80030d2:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <prvSampleTimeNow+0x3c>)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80030d8:	68fb      	ldr	r3, [r7, #12]
    }
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000248 	.word	0x20000248

080030e8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	429a      	cmp	r2, r3
 800310c:	d812      	bhi.n	8003134 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	1ad2      	subs	r2, r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	429a      	cmp	r2, r3
 800311a:	d302      	bcc.n	8003122 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800311c:	2301      	movs	r3, #1
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	e01b      	b.n	800315a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003122:	4b10      	ldr	r3, [pc, #64]	; (8003164 <prvInsertTimerInActiveList+0x7c>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	3304      	adds	r3, #4
 800312a:	4619      	mov	r1, r3
 800312c:	4610      	mov	r0, r2
 800312e:	f7fe fbca 	bl	80018c6 <vListInsert>
 8003132:	e012      	b.n	800315a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d206      	bcs.n	800314a <prvInsertTimerInActiveList+0x62>
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d302      	bcc.n	800314a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003144:	2301      	movs	r3, #1
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	e007      	b.n	800315a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800314a:	4b07      	ldr	r3, [pc, #28]	; (8003168 <prvInsertTimerInActiveList+0x80>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	3304      	adds	r3, #4
 8003152:	4619      	mov	r1, r3
 8003154:	4610      	mov	r0, r2
 8003156:	f7fe fbb6 	bl	80018c6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800315a:	697b      	ldr	r3, [r7, #20]
    }
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	2000023c 	.word	0x2000023c
 8003168:	20000238 	.word	0x20000238

0800316c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003172:	e0a6      	b.n	80032c2 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	f2c0 80a3 	blt.w	80032c2 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d004      	beq.n	8003192 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	3304      	adds	r3, #4
 800318c:	4618      	mov	r0, r3
 800318e:	f7fe fbd2 	bl	8001936 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003192:	1d3b      	adds	r3, r7, #4
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff ff87 	bl	80030a8 <prvSampleTimeNow>
 800319a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	3b01      	subs	r3, #1
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	f200 808d 	bhi.w	80032c0 <prvProcessReceivedCommands+0x154>
 80031a6:	a201      	add	r2, pc, #4	; (adr r2, 80031ac <prvProcessReceivedCommands+0x40>)
 80031a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ac:	080031d1 	.word	0x080031d1
 80031b0:	080031d1 	.word	0x080031d1
 80031b4:	08003239 	.word	0x08003239
 80031b8:	0800324d 	.word	0x0800324d
 80031bc:	08003297 	.word	0x08003297
 80031c0:	080031d1 	.word	0x080031d1
 80031c4:	080031d1 	.word	0x080031d1
 80031c8:	08003239 	.word	0x08003239
 80031cc:	0800324d 	.word	0x0800324d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	18d1      	adds	r1, r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	69f8      	ldr	r0, [r7, #28]
 80031f0:	f7ff ff7a 	bl	80030e8 <prvInsertTimerInActiveList>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d063      	beq.n	80032c2 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d009      	beq.n	800321c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	4413      	add	r3, r2
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4619      	mov	r1, r3
 8003214:	69f8      	ldr	r0, [r7, #28]
 8003216:	f7ff fe73 	bl	8002f00 <prvReloadTimer>
 800321a:	e008      	b.n	800322e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003222:	f023 0301 	bic.w	r3, r3, #1
 8003226:	b2da      	uxtb	r2, r3
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	69f8      	ldr	r0, [r7, #28]
 8003234:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003236:	e044      	b.n	80032c2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	b2da      	uxtb	r2, r3
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800324a:	e03a      	b.n	80032c2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	b2da      	uxtb	r2, r3
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <prvProcessReceivedCommands+0x116>
        __asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	617b      	str	r3, [r7, #20]
    }
 800327e:	bf00      	nop
 8003280:	e7fe      	b.n	8003280 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	699a      	ldr	r2, [r3, #24]
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	18d1      	adds	r1, r2, r3
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	69f8      	ldr	r0, [r7, #28]
 8003290:	f7ff ff2a 	bl	80030e8 <prvInsertTimerInActiveList>
                        break;
 8003294:	e015      	b.n	80032c2 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d103      	bne.n	80032ac <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80032a4:	69f8      	ldr	r0, [r7, #28]
 80032a6:	f000 fbab 	bl	8003a00 <vPortFree>
 80032aa:	e00a      	b.n	80032c2 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032b2:	f023 0301 	bic.w	r3, r3, #1
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80032be:	e000      	b.n	80032c2 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 80032c0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80032c2:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <prvProcessReceivedCommands+0x178>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f107 0108 	add.w	r1, r7, #8
 80032ca:	2200      	movs	r2, #0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fe fc55 	bl	8001b7c <xQueueReceive>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f47f af4d 	bne.w	8003174 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80032da:	bf00      	nop
 80032dc:	bf00      	nop
 80032de:	3720      	adds	r7, #32
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20000240 	.word	0x20000240

080032e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80032ee:	e009      	b.n	8003304 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80032f0:	4b0e      	ldr	r3, [pc, #56]	; (800332c <prvSwitchTimerLists+0x44>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80032fa:	f04f 31ff 	mov.w	r1, #4294967295
 80032fe:	6838      	ldr	r0, [r7, #0]
 8003300:	f7ff fe20 	bl	8002f44 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003304:	4b09      	ldr	r3, [pc, #36]	; (800332c <prvSwitchTimerLists+0x44>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800330e:	4b07      	ldr	r3, [pc, #28]	; (800332c <prvSwitchTimerLists+0x44>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <prvSwitchTimerLists+0x48>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a04      	ldr	r2, [pc, #16]	; (800332c <prvSwitchTimerLists+0x44>)
 800331a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800331c:	4a04      	ldr	r2, [pc, #16]	; (8003330 <prvSwitchTimerLists+0x48>)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6013      	str	r3, [r2, #0]
    }
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20000238 	.word	0x20000238
 8003330:	2000023c 	.word	0x2000023c

08003334 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003338:	f000 f99e 	bl	8003678 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800333c:	4b12      	ldr	r3, [pc, #72]	; (8003388 <prvCheckForValidListAndQueue+0x54>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d11d      	bne.n	8003380 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003344:	4811      	ldr	r0, [pc, #68]	; (800338c <prvCheckForValidListAndQueue+0x58>)
 8003346:	f7fe fa93 	bl	8001870 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800334a:	4811      	ldr	r0, [pc, #68]	; (8003390 <prvCheckForValidListAndQueue+0x5c>)
 800334c:	f7fe fa90 	bl	8001870 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003350:	4b10      	ldr	r3, [pc, #64]	; (8003394 <prvCheckForValidListAndQueue+0x60>)
 8003352:	4a0e      	ldr	r2, [pc, #56]	; (800338c <prvCheckForValidListAndQueue+0x58>)
 8003354:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003356:	4b10      	ldr	r3, [pc, #64]	; (8003398 <prvCheckForValidListAndQueue+0x64>)
 8003358:	4a0d      	ldr	r2, [pc, #52]	; (8003390 <prvCheckForValidListAndQueue+0x5c>)
 800335a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800335c:	2200      	movs	r2, #0
 800335e:	210c      	movs	r1, #12
 8003360:	200a      	movs	r0, #10
 8003362:	f7fe fb93 	bl	8001a8c <xQueueGenericCreate>
 8003366:	4603      	mov	r3, r0
 8003368:	4a07      	ldr	r2, [pc, #28]	; (8003388 <prvCheckForValidListAndQueue+0x54>)
 800336a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800336c:	4b06      	ldr	r3, [pc, #24]	; (8003388 <prvCheckForValidListAndQueue+0x54>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d005      	beq.n	8003380 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003374:	4b04      	ldr	r3, [pc, #16]	; (8003388 <prvCheckForValidListAndQueue+0x54>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4908      	ldr	r1, [pc, #32]	; (800339c <prvCheckForValidListAndQueue+0x68>)
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe fd92 	bl	8001ea4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003380:	f000 f9aa 	bl	80036d8 <vPortExitCritical>
    }
 8003384:	bf00      	nop
 8003386:	bd80      	pop	{r7, pc}
 8003388:	20000240 	.word	0x20000240
 800338c:	20000210 	.word	0x20000210
 8003390:	20000224 	.word	0x20000224
 8003394:	20000238 	.word	0x20000238
 8003398:	2000023c 	.word	0x2000023c
 800339c:	080067bc 	.word	0x080067bc

080033a0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	3b04      	subs	r3, #4
 80033b0:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	3b04      	subs	r3, #4
 80033be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f023 0201 	bic.w	r2, r3, #1
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	3b04      	subs	r3, #4
 80033ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80033d0:	4a08      	ldr	r2, [pc, #32]	; (80033f4 <pxPortInitialiseStack+0x54>)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3b14      	subs	r3, #20
 80033da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	3b20      	subs	r3, #32
 80033e6:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80033e8:	68fb      	ldr	r3, [r7, #12]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr
 80033f4:	080033f9 	.word	0x080033f9

080033f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80033fe:	2300      	movs	r3, #0
 8003400:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003402:	4b12      	ldr	r3, [pc, #72]	; (800344c <prvTaskExitError+0x54>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340a:	d00a      	beq.n	8003422 <prvTaskExitError+0x2a>
        __asm volatile
 800340c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	60fb      	str	r3, [r7, #12]
    }
 800341e:	bf00      	nop
 8003420:	e7fe      	b.n	8003420 <prvTaskExitError+0x28>
        __asm volatile
 8003422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003426:	f383 8811 	msr	BASEPRI, r3
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	60bb      	str	r3, [r7, #8]
    }
 8003434:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003436:	bf00      	nop
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0fc      	beq.n	8003438 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800343e:	bf00      	nop
 8003440:	bf00      	nop
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	20000010 	.word	0x20000010

08003450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003450:	4b07      	ldr	r3, [pc, #28]	; (8003470 <pxCurrentTCBConst2>)
 8003452:	6819      	ldr	r1, [r3, #0]
 8003454:	6808      	ldr	r0, [r1, #0]
 8003456:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800345a:	f380 8809 	msr	PSP, r0
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f04f 0000 	mov.w	r0, #0
 8003466:	f380 8811 	msr	BASEPRI, r0
 800346a:	f04e 0e0d 	orr.w	lr, lr, #13
 800346e:	4770      	bx	lr

08003470 <pxCurrentTCBConst2>:
 8003470:	2000010c 	.word	0x2000010c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop

08003478 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8003478:	4806      	ldr	r0, [pc, #24]	; (8003494 <prvPortStartFirstTask+0x1c>)
 800347a:	6800      	ldr	r0, [r0, #0]
 800347c:	6800      	ldr	r0, [r0, #0]
 800347e:	f380 8808 	msr	MSP, r0
 8003482:	b662      	cpsie	i
 8003484:	b661      	cpsie	f
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	df00      	svc	0
 8003490:	bf00      	nop
 8003492:	0000      	.short	0x0000
 8003494:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003498:	bf00      	nop
 800349a:	bf00      	nop

0800349c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80034a2:	4b32      	ldr	r3, [pc, #200]	; (800356c <xPortStartScheduler+0xd0>)
 80034a4:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	22ff      	movs	r2, #255	; 0xff
 80034b2:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	4b2a      	ldr	r3, [pc, #168]	; (8003570 <xPortStartScheduler+0xd4>)
 80034c8:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80034ca:	4b2a      	ldr	r3, [pc, #168]	; (8003574 <xPortStartScheduler+0xd8>)
 80034cc:	2207      	movs	r2, #7
 80034ce:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034d0:	e009      	b.n	80034e6 <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 80034d2:	4b28      	ldr	r3, [pc, #160]	; (8003574 <xPortStartScheduler+0xd8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	4a26      	ldr	r2, [pc, #152]	; (8003574 <xPortStartScheduler+0xd8>)
 80034da:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034e6:	78fb      	ldrb	r3, [r7, #3]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ee:	2b80      	cmp	r3, #128	; 0x80
 80034f0:	d0ef      	beq.n	80034d2 <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80034f2:	4b20      	ldr	r3, [pc, #128]	; (8003574 <xPortStartScheduler+0xd8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f1c3 0307 	rsb	r3, r3, #7
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d00a      	beq.n	8003514 <xPortStartScheduler+0x78>
        __asm volatile
 80034fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	60bb      	str	r3, [r7, #8]
    }
 8003510:	bf00      	nop
 8003512:	e7fe      	b.n	8003512 <xPortStartScheduler+0x76>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003514:	4b17      	ldr	r3, [pc, #92]	; (8003574 <xPortStartScheduler+0xd8>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	4a16      	ldr	r2, [pc, #88]	; (8003574 <xPortStartScheduler+0xd8>)
 800351c:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800351e:	4b15      	ldr	r3, [pc, #84]	; (8003574 <xPortStartScheduler+0xd8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003526:	4a13      	ldr	r2, [pc, #76]	; (8003574 <xPortStartScheduler+0xd8>)
 8003528:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	b2da      	uxtb	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003532:	4b11      	ldr	r3, [pc, #68]	; (8003578 <xPortStartScheduler+0xdc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a10      	ldr	r2, [pc, #64]	; (8003578 <xPortStartScheduler+0xdc>)
 8003538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800353c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800353e:	4b0e      	ldr	r3, [pc, #56]	; (8003578 <xPortStartScheduler+0xdc>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a0d      	ldr	r2, [pc, #52]	; (8003578 <xPortStartScheduler+0xdc>)
 8003544:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003548:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800354a:	f000 f93f 	bl	80037cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800354e:	4b0b      	ldr	r3, [pc, #44]	; (800357c <xPortStartScheduler+0xe0>)
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003554:	f7ff ff90 	bl	8003478 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003558:	f7ff f922 	bl	80027a0 <vTaskSwitchContext>
    prvTaskExitError();
 800355c:	f7ff ff4c 	bl	80033f8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	e000e400 	.word	0xe000e400
 8003570:	2000024c 	.word	0x2000024c
 8003574:	20000250 	.word	0x20000250
 8003578:	e000ed20 	.word	0xe000ed20
 800357c:	20000010 	.word	0x20000010

08003580 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003586:	4b36      	ldr	r3, [pc, #216]	; (8003660 <vInitPrioGroupValue+0xe0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a36      	ldr	r2, [pc, #216]	; (8003664 <vInitPrioGroupValue+0xe4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d10a      	bne.n	80035a6 <vInitPrioGroupValue+0x26>
        __asm volatile
 8003590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	613b      	str	r3, [r7, #16]
    }
 80035a2:	bf00      	nop
 80035a4:	e7fe      	b.n	80035a4 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80035a6:	4b2e      	ldr	r3, [pc, #184]	; (8003660 <vInitPrioGroupValue+0xe0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a2f      	ldr	r2, [pc, #188]	; (8003668 <vInitPrioGroupValue+0xe8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d10a      	bne.n	80035c6 <vInitPrioGroupValue+0x46>
        __asm volatile
 80035b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	60fb      	str	r3, [r7, #12]
    }
 80035c2:	bf00      	nop
 80035c4:	e7fe      	b.n	80035c4 <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035c6:	4b29      	ldr	r3, [pc, #164]	; (800366c <vInitPrioGroupValue+0xec>)
 80035c8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	22ff      	movs	r2, #255	; 0xff
 80035d6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	4b21      	ldr	r3, [pc, #132]	; (8003670 <vInitPrioGroupValue+0xf0>)
 80035ec:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80035ee:	4b21      	ldr	r3, [pc, #132]	; (8003674 <vInitPrioGroupValue+0xf4>)
 80035f0:	2207      	movs	r2, #7
 80035f2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035f4:	e009      	b.n	800360a <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80035f6:	4b1f      	ldr	r3, [pc, #124]	; (8003674 <vInitPrioGroupValue+0xf4>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	4a1d      	ldr	r2, [pc, #116]	; (8003674 <vInitPrioGroupValue+0xf4>)
 80035fe:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	b2db      	uxtb	r3, r3
 8003608:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800360a:	78fb      	ldrb	r3, [r7, #3]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003612:	2b80      	cmp	r3, #128	; 0x80
 8003614:	d0ef      	beq.n	80035f6 <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003616:	4b17      	ldr	r3, [pc, #92]	; (8003674 <vInitPrioGroupValue+0xf4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f1c3 0307 	rsb	r3, r3, #7
 800361e:	2b04      	cmp	r3, #4
 8003620:	d00a      	beq.n	8003638 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8003622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003626:	f383 8811 	msr	BASEPRI, r3
 800362a:	f3bf 8f6f 	isb	sy
 800362e:	f3bf 8f4f 	dsb	sy
 8003632:	60bb      	str	r3, [r7, #8]
    }
 8003634:	bf00      	nop
 8003636:	e7fe      	b.n	8003636 <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003638:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <vInitPrioGroupValue+0xf4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	021b      	lsls	r3, r3, #8
 800363e:	4a0d      	ldr	r2, [pc, #52]	; (8003674 <vInitPrioGroupValue+0xf4>)
 8003640:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003642:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <vInitPrioGroupValue+0xf4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800364a:	4a0a      	ldr	r2, [pc, #40]	; (8003674 <vInitPrioGroupValue+0xf4>)
 800364c:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	b2da      	uxtb	r2, r3
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003656:	bf00      	nop
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr
 8003660:	e000ed00 	.word	0xe000ed00
 8003664:	410fc271 	.word	0x410fc271
 8003668:	410fc270 	.word	0x410fc270
 800366c:	e000e400 	.word	0xe000e400
 8003670:	2000024c 	.word	0x2000024c
 8003674:	20000250 	.word	0x20000250

08003678 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
        __asm volatile
 800367e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	607b      	str	r3, [r7, #4]
    }
 8003690:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003692:	4b0f      	ldr	r3, [pc, #60]	; (80036d0 <vPortEnterCritical+0x58>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3301      	adds	r3, #1
 8003698:	4a0d      	ldr	r2, [pc, #52]	; (80036d0 <vPortEnterCritical+0x58>)
 800369a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800369c:	4b0c      	ldr	r3, [pc, #48]	; (80036d0 <vPortEnterCritical+0x58>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d10f      	bne.n	80036c4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <vPortEnterCritical+0x5c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <vPortEnterCritical+0x4c>
        __asm volatile
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	603b      	str	r3, [r7, #0]
    }
 80036c0:	bf00      	nop
 80036c2:	e7fe      	b.n	80036c2 <vPortEnterCritical+0x4a>
    }
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	20000010 	.word	0x20000010
 80036d4:	e000ed04 	.word	0xe000ed04

080036d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80036de:	4b11      	ldr	r3, [pc, #68]	; (8003724 <vPortExitCritical+0x4c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10a      	bne.n	80036fc <vPortExitCritical+0x24>
        __asm volatile
 80036e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ea:	f383 8811 	msr	BASEPRI, r3
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f3bf 8f4f 	dsb	sy
 80036f6:	607b      	str	r3, [r7, #4]
    }
 80036f8:	bf00      	nop
 80036fa:	e7fe      	b.n	80036fa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80036fc:	4b09      	ldr	r3, [pc, #36]	; (8003724 <vPortExitCritical+0x4c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	3b01      	subs	r3, #1
 8003702:	4a08      	ldr	r2, [pc, #32]	; (8003724 <vPortExitCritical+0x4c>)
 8003704:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003706:	4b07      	ldr	r3, [pc, #28]	; (8003724 <vPortExitCritical+0x4c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d105      	bne.n	800371a <vPortExitCritical+0x42>
 800370e:	2300      	movs	r3, #0
 8003710:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003718:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr
 8003724:	20000010 	.word	0x20000010
	...

08003730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003730:	f3ef 8009 	mrs	r0, PSP
 8003734:	f3bf 8f6f 	isb	sy
 8003738:	4b0d      	ldr	r3, [pc, #52]	; (8003770 <pxCurrentTCBConst>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003740:	6010      	str	r0, [r2, #0]
 8003742:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003746:	f04f 0050 	mov.w	r0, #80	; 0x50
 800374a:	f380 8811 	msr	BASEPRI, r0
 800374e:	f7ff f827 	bl	80027a0 <vTaskSwitchContext>
 8003752:	f04f 0000 	mov.w	r0, #0
 8003756:	f380 8811 	msr	BASEPRI, r0
 800375a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800375e:	6819      	ldr	r1, [r3, #0]
 8003760:	6808      	ldr	r0, [r1, #0]
 8003762:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003766:	f380 8809 	msr	PSP, r0
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	4770      	bx	lr

08003770 <pxCurrentTCBConst>:
 8003770:	2000010c 	.word	0x2000010c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003774:	bf00      	nop
 8003776:	bf00      	nop

08003778 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
        __asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	607b      	str	r3, [r7, #4]
    }
 8003790:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003792:	f002 f849 	bl	8005828 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003796:	f7fe ff0b 	bl	80025b0 <xTaskIncrementTick>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d006      	beq.n	80037ae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80037a0:	f002 f8a0 	bl	80058e4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80037a4:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <SysTick_Handler+0x50>)
 80037a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	e001      	b.n	80037b2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80037ae:	f002 f87d 	bl	80058ac <SEGGER_SYSVIEW_RecordExitISR>
 80037b2:	2300      	movs	r3, #0
 80037b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	f383 8811 	msr	BASEPRI, r3
    }
 80037bc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	e000ed04 	.word	0xe000ed04

080037cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80037d0:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <vPortSetupTimerInterrupt+0x30>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80037d6:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <vPortSetupTimerInterrupt+0x34>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80037dc:	4b09      	ldr	r3, [pc, #36]	; (8003804 <vPortSetupTimerInterrupt+0x38>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a09      	ldr	r2, [pc, #36]	; (8003808 <vPortSetupTimerInterrupt+0x3c>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	099b      	lsrs	r3, r3, #6
 80037e8:	4a08      	ldr	r2, [pc, #32]	; (800380c <vPortSetupTimerInterrupt+0x40>)
 80037ea:	3b01      	subs	r3, #1
 80037ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80037ee:	4b03      	ldr	r3, [pc, #12]	; (80037fc <vPortSetupTimerInterrupt+0x30>)
 80037f0:	2207      	movs	r2, #7
 80037f2:	601a      	str	r2, [r3, #0]
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr
 80037fc:	e000e010 	.word	0xe000e010
 8003800:	e000e018 	.word	0xe000e018
 8003804:	20000000 	.word	0x20000000
 8003808:	10624dd3 	.word	0x10624dd3
 800380c:	e000e014 	.word	0xe000e014

08003810 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003816:	f3ef 8305 	mrs	r3, IPSR
 800381a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b0f      	cmp	r3, #15
 8003820:	d914      	bls.n	800384c <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003822:	4a16      	ldr	r2, [pc, #88]	; (800387c <vPortValidateInterruptPriority+0x6c>)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4413      	add	r3, r2
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800382c:	4b14      	ldr	r3, [pc, #80]	; (8003880 <vPortValidateInterruptPriority+0x70>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	7afa      	ldrb	r2, [r7, #11]
 8003832:	429a      	cmp	r2, r3
 8003834:	d20a      	bcs.n	800384c <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	607b      	str	r3, [r7, #4]
    }
 8003848:	bf00      	nop
 800384a:	e7fe      	b.n	800384a <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800384c:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <vPortValidateInterruptPriority+0x74>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <vPortValidateInterruptPriority+0x78>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d90a      	bls.n	8003872 <vPortValidateInterruptPriority+0x62>
        __asm volatile
 800385c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003860:	f383 8811 	msr	BASEPRI, r3
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	603b      	str	r3, [r7, #0]
    }
 800386e:	bf00      	nop
 8003870:	e7fe      	b.n	8003870 <vPortValidateInterruptPriority+0x60>
    }
 8003872:	bf00      	nop
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	e000e3f0 	.word	0xe000e3f0
 8003880:	2000024c 	.word	0x2000024c
 8003884:	e000ed0c 	.word	0xe000ed0c
 8003888:	20000250 	.word	0x20000250

0800388c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08a      	sub	sp, #40	; 0x28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003894:	2300      	movs	r3, #0
 8003896:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003898:	f7fe fd6a 	bl	8002370 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800389c:	4b53      	ldr	r3, [pc, #332]	; (80039ec <pvPortMalloc+0x160>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80038a4:	f000 f908 	bl	8003ab8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d012      	beq.n	80038d4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80038ae:	2208      	movs	r2, #8
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	3308      	adds	r3, #8
 80038ba:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	43db      	mvns	r3, r3
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d804      	bhi.n	80038d0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	4413      	add	r3, r2
 80038cc:	607b      	str	r3, [r7, #4]
 80038ce:	e001      	b.n	80038d4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80038d0:	2300      	movs	r3, #0
 80038d2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	db70      	blt.n	80039bc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d06d      	beq.n	80039bc <pvPortMalloc+0x130>
 80038e0:	4b43      	ldr	r3, [pc, #268]	; (80039f0 <pvPortMalloc+0x164>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d868      	bhi.n	80039bc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80038ea:	4b42      	ldr	r3, [pc, #264]	; (80039f4 <pvPortMalloc+0x168>)
 80038ec:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80038ee:	4b41      	ldr	r3, [pc, #260]	; (80039f4 <pvPortMalloc+0x168>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038f4:	e004      	b.n	8003900 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	429a      	cmp	r2, r3
 8003908:	d903      	bls.n	8003912 <pvPortMalloc+0x86>
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f1      	bne.n	80038f6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003912:	4b36      	ldr	r3, [pc, #216]	; (80039ec <pvPortMalloc+0x160>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003918:	429a      	cmp	r2, r3
 800391a:	d04f      	beq.n	80039bc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2208      	movs	r2, #8
 8003922:	4413      	add	r3, r2
 8003924:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	1ad2      	subs	r2, r2, r3
 8003936:	2308      	movs	r3, #8
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	429a      	cmp	r2, r3
 800393c:	d91f      	bls.n	800397e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800393e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4413      	add	r3, r2
 8003944:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <pvPortMalloc+0xda>
        __asm volatile
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	613b      	str	r3, [r7, #16]
    }
 8003962:	bf00      	nop
 8003964:	e7fe      	b.n	8003964 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	1ad2      	subs	r2, r2, r3
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003978:	6978      	ldr	r0, [r7, #20]
 800397a:	f000 f8f9 	bl	8003b70 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800397e:	4b1c      	ldr	r3, [pc, #112]	; (80039f0 <pvPortMalloc+0x164>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	4a19      	ldr	r2, [pc, #100]	; (80039f0 <pvPortMalloc+0x164>)
 800398a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800398c:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <pvPortMalloc+0x164>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <pvPortMalloc+0x16c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d203      	bcs.n	80039a0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003998:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <pvPortMalloc+0x164>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a16      	ldr	r2, [pc, #88]	; (80039f8 <pvPortMalloc+0x16c>)
 800399e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80039b2:	4b12      	ldr	r3, [pc, #72]	; (80039fc <pvPortMalloc+0x170>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3301      	adds	r3, #1
 80039b8:	4a10      	ldr	r2, [pc, #64]	; (80039fc <pvPortMalloc+0x170>)
 80039ba:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80039bc:	f7fe fce6 	bl	800238c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <pvPortMalloc+0x154>
        __asm volatile
 80039ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ce:	f383 8811 	msr	BASEPRI, r3
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	f3bf 8f4f 	dsb	sy
 80039da:	60fb      	str	r3, [r7, #12]
    }
 80039dc:	bf00      	nop
 80039de:	e7fe      	b.n	80039de <pvPortMalloc+0x152>
    return pvReturn;
 80039e0:	69fb      	ldr	r3, [r7, #28]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3728      	adds	r7, #40	; 0x28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	20002a5c 	.word	0x20002a5c
 80039f0:	20002a60 	.word	0x20002a60
 80039f4:	20002a54 	.word	0x20002a54
 80039f8:	20002a64 	.word	0x20002a64
 80039fc:	20002a68 	.word	0x20002a68

08003a00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d049      	beq.n	8003aa6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003a12:	2308      	movs	r3, #8
 8003a14:	425b      	negs	r3, r3
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4413      	add	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	db0a      	blt.n	8003a3e <vPortFree+0x3e>
        __asm volatile
 8003a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	60fb      	str	r3, [r7, #12]
    }
 8003a3a:	bf00      	nop
 8003a3c:	e7fe      	b.n	8003a3c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <vPortFree+0x5c>
        __asm volatile
 8003a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4a:	f383 8811 	msr	BASEPRI, r3
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	60bb      	str	r3, [r7, #8]
    }
 8003a58:	bf00      	nop
 8003a5a:	e7fe      	b.n	8003a5a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	0fdb      	lsrs	r3, r3, #31
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d01c      	beq.n	8003aa6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d118      	bne.n	8003aa6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003a80:	f7fe fc76 	bl	8002370 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <vPortFree+0xb0>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	4a08      	ldr	r2, [pc, #32]	; (8003ab0 <vPortFree+0xb0>)
 8003a90:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a92:	6938      	ldr	r0, [r7, #16]
 8003a94:	f000 f86c 	bl	8003b70 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <vPortFree+0xb4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	4a05      	ldr	r2, [pc, #20]	; (8003ab4 <vPortFree+0xb4>)
 8003aa0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003aa2:	f7fe fc73 	bl	800238c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003aa6:	bf00      	nop
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20002a60 	.word	0x20002a60
 8003ab4:	20002a6c 	.word	0x20002a6c

08003ab8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003abe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003ac2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003ac4:	4b25      	ldr	r3, [pc, #148]	; (8003b5c <prvHeapInit+0xa4>)
 8003ac6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00c      	beq.n	8003aec <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	3307      	adds	r3, #7
 8003ad6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0307 	bic.w	r3, r3, #7
 8003ade:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	4a1d      	ldr	r2, [pc, #116]	; (8003b5c <prvHeapInit+0xa4>)
 8003ae8:	4413      	add	r3, r2
 8003aea:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003af0:	4a1b      	ldr	r2, [pc, #108]	; (8003b60 <prvHeapInit+0xa8>)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003af6:	4b1a      	ldr	r3, [pc, #104]	; (8003b60 <prvHeapInit+0xa8>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	4413      	add	r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003b04:	2208      	movs	r2, #8
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1a9b      	subs	r3, r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0307 	bic.w	r3, r3, #7
 8003b12:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4a13      	ldr	r2, [pc, #76]	; (8003b64 <prvHeapInit+0xac>)
 8003b18:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003b1a:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <prvHeapInit+0xac>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003b22:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <prvHeapInit+0xac>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	1ad2      	subs	r2, r2, r3
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b38:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <prvHeapInit+0xac>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	4a08      	ldr	r2, [pc, #32]	; (8003b68 <prvHeapInit+0xb0>)
 8003b46:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	4a07      	ldr	r2, [pc, #28]	; (8003b6c <prvHeapInit+0xb4>)
 8003b4e:	6013      	str	r3, [r2, #0]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	20000254 	.word	0x20000254
 8003b60:	20002a54 	.word	0x20002a54
 8003b64:	20002a5c 	.word	0x20002a5c
 8003b68:	20002a64 	.word	0x20002a64
 8003b6c:	20002a60 	.word	0x20002a60

08003b70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b78:	4b27      	ldr	r3, [pc, #156]	; (8003c18 <prvInsertBlockIntoFreeList+0xa8>)
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	e002      	b.n	8003b84 <prvInsertBlockIntoFreeList+0x14>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d8f7      	bhi.n	8003b7e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	4413      	add	r3, r2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d108      	bne.n	8003bb2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	441a      	add	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	441a      	add	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d118      	bne.n	8003bf8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	4b14      	ldr	r3, [pc, #80]	; (8003c1c <prvInsertBlockIntoFreeList+0xac>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d00d      	beq.n	8003bee <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	441a      	add	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	e008      	b.n	8003c00 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003bee:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <prvInsertBlockIntoFreeList+0xac>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	e003      	b.n	8003c00 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d002      	beq.n	8003c0e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003c0e:	bf00      	nop
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr
 8003c18:	20002a54 	.word	0x20002a54
 8003c1c:	20002a5c 	.word	0x20002a5c

08003c20 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003c24:	4803      	ldr	r0, [pc, #12]	; (8003c34 <_cbSendSystemDesc+0x14>)
 8003c26:	f001 fda9 	bl	800577c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003c2a:	4803      	ldr	r0, [pc, #12]	; (8003c38 <_cbSendSystemDesc+0x18>)
 8003c2c:	f001 fda6 	bl	800577c <SEGGER_SYSVIEW_SendSysDesc>
}
 8003c30:	bf00      	nop
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	080067c4 	.word	0x080067c4
 8003c38:	080067f8 	.word	0x080067f8

08003c3c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003c40:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <SEGGER_SYSVIEW_Conf+0x20>)
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <SEGGER_SYSVIEW_Conf+0x20>)
 8003c46:	6819      	ldr	r1, [r3, #0]
 8003c48:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <SEGGER_SYSVIEW_Conf+0x24>)
 8003c4a:	4a06      	ldr	r2, [pc, #24]	; (8003c64 <SEGGER_SYSVIEW_Conf+0x28>)
 8003c4c:	f001 f916 	bl	8004e7c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003c50:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003c54:	f001 f956 	bl	8004f04 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003c58:	bf00      	nop
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20000000 	.word	0x20000000
 8003c60:	08003c21 	.word	0x08003c21
 8003c64:	080068a8 	.word	0x080068a8

08003c68 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003c6e:	2300      	movs	r3, #0
 8003c70:	607b      	str	r3, [r7, #4]
 8003c72:	e033      	b.n	8003cdc <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003c74:	491e      	ldr	r1, [pc, #120]	; (8003cf0 <_cbSendTaskList+0x88>)
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	491a      	ldr	r1, [pc, #104]	; (8003cf0 <_cbSendTaskList+0x88>)
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	3304      	adds	r3, #4
 8003c94:	6819      	ldr	r1, [r3, #0]
 8003c96:	4c16      	ldr	r4, [pc, #88]	; (8003cf0 <_cbSendTaskList+0x88>)
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4423      	add	r3, r4
 8003ca4:	3308      	adds	r3, #8
 8003ca6:	681c      	ldr	r4, [r3, #0]
 8003ca8:	4d11      	ldr	r5, [pc, #68]	; (8003cf0 <_cbSendTaskList+0x88>)
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	442b      	add	r3, r5
 8003cb6:	330c      	adds	r3, #12
 8003cb8:	681d      	ldr	r5, [r3, #0]
 8003cba:	4e0d      	ldr	r6, [pc, #52]	; (8003cf0 <_cbSendTaskList+0x88>)
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4433      	add	r3, r6
 8003cc8:	3310      	adds	r3, #16
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	462b      	mov	r3, r5
 8003cd0:	4622      	mov	r2, r4
 8003cd2:	f000 f8bd 	bl	8003e50 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	607b      	str	r3, [r7, #4]
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <_cbSendTaskList+0x8c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d3c6      	bcc.n	8003c74 <_cbSendTaskList+0xc>
  }
}
 8003ce6:	bf00      	nop
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cf0:	20002a70 	.word	0x20002a70
 8003cf4:	20002b10 	.word	0x20002b10

08003cf8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003d00:	f7fe fc44 	bl	800258c <xTaskGetTickCountFromISR>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2200      	movs	r2, #0
 8003d08:	469a      	mov	sl, r3
 8003d0a:	4693      	mov	fp, r2
 8003d0c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003d10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	f04f 0a00 	mov.w	sl, #0
 8003d1c:	f04f 0b00 	mov.w	fp, #0
 8003d20:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003d24:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003d28:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003d2c:	4652      	mov	r2, sl
 8003d2e:	465b      	mov	r3, fp
 8003d30:	1a14      	subs	r4, r2, r0
 8003d32:	eb63 0501 	sbc.w	r5, r3, r1
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	00ab      	lsls	r3, r5, #2
 8003d40:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003d44:	00a2      	lsls	r2, r4, #2
 8003d46:	4614      	mov	r4, r2
 8003d48:	461d      	mov	r5, r3
 8003d4a:	eb14 0800 	adds.w	r8, r4, r0
 8003d4e:	eb45 0901 	adc.w	r9, r5, r1
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d66:	4690      	mov	r8, r2
 8003d68:	4699      	mov	r9, r3
 8003d6a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003d6e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003d72:	4610      	mov	r0, r2
 8003d74:	4619      	mov	r1, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003d80 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003d8e:	2205      	movs	r2, #5
 8003d90:	492b      	ldr	r1, [pc, #172]	; (8003e40 <SYSVIEW_AddTask+0xc0>)
 8003d92:	68b8      	ldr	r0, [r7, #8]
 8003d94:	f002 f83e 	bl	8005e14 <memcmp>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d04b      	beq.n	8003e36 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003d9e:	4b29      	ldr	r3, [pc, #164]	; (8003e44 <SYSVIEW_AddTask+0xc4>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b07      	cmp	r3, #7
 8003da4:	d903      	bls.n	8003dae <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003da6:	4828      	ldr	r0, [pc, #160]	; (8003e48 <SYSVIEW_AddTask+0xc8>)
 8003da8:	f001 ffa4 	bl	8005cf4 <SEGGER_SYSVIEW_Warn>
    return;
 8003dac:	e044      	b.n	8003e38 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003dae:	4b25      	ldr	r3, [pc, #148]	; (8003e44 <SYSVIEW_AddTask+0xc4>)
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	4926      	ldr	r1, [pc, #152]	; (8003e4c <SYSVIEW_AddTask+0xcc>)
 8003db4:	4613      	mov	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003dc2:	4b20      	ldr	r3, [pc, #128]	; (8003e44 <SYSVIEW_AddTask+0xc4>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	4921      	ldr	r1, [pc, #132]	; (8003e4c <SYSVIEW_AddTask+0xcc>)
 8003dc8:	4613      	mov	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003dd8:	4b1a      	ldr	r3, [pc, #104]	; (8003e44 <SYSVIEW_AddTask+0xc4>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	491b      	ldr	r1, [pc, #108]	; (8003e4c <SYSVIEW_AddTask+0xcc>)
 8003dde:	4613      	mov	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	3308      	adds	r3, #8
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003dee:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <SYSVIEW_AddTask+0xc4>)
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	4916      	ldr	r1, [pc, #88]	; (8003e4c <SYSVIEW_AddTask+0xcc>)
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	330c      	adds	r3, #12
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003e04:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <SYSVIEW_AddTask+0xc4>)
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	4910      	ldr	r1, [pc, #64]	; (8003e4c <SYSVIEW_AddTask+0xcc>)
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	440b      	add	r3, r1
 8003e14:	3310      	adds	r3, #16
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <SYSVIEW_AddTask+0xc4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	4a08      	ldr	r2, [pc, #32]	; (8003e44 <SYSVIEW_AddTask+0xc4>)
 8003e22:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	68b9      	ldr	r1, [r7, #8]
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f80e 	bl	8003e50 <SYSVIEW_SendTaskInfo>
 8003e34:	e000      	b.n	8003e38 <SYSVIEW_AddTask+0xb8>
    return;
 8003e36:	bf00      	nop

}
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	08006808 	.word	0x08006808
 8003e44:	20002b10 	.word	0x20002b10
 8003e48:	08006810 	.word	0x08006810
 8003e4c:	20002a70 	.word	0x20002a70

08003e50 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08a      	sub	sp, #40	; 0x28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003e5e:	f107 0314 	add.w	r3, r7, #20
 8003e62:	2214      	movs	r2, #20
 8003e64:	2100      	movs	r1, #0
 8003e66:	4618      	mov	r0, r3
 8003e68:	f001 ffe4 	bl	8005e34 <memset>
  TaskInfo.TaskID     = TaskID;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003e80:	f107 0314 	add.w	r3, r7, #20
 8003e84:	4618      	mov	r0, r3
 8003e86:	f001 fb81 	bl	800558c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003e8a:	bf00      	nop
 8003e8c:	3728      	adds	r7, #40	; 0x28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003e9a:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <_DoInit+0x9c>)
 8003e9c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003e9e:	22a8      	movs	r2, #168	; 0xa8
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	6838      	ldr	r0, [r7, #0]
 8003ea4:	f001 ffc6 	bl	8005e34 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	2203      	movs	r2, #3
 8003eac:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	4a1f      	ldr	r2, [pc, #124]	; (8003f34 <_DoInit+0xa0>)
 8003eb8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	4a1e      	ldr	r2, [pc, #120]	; (8003f38 <_DoInit+0xa4>)
 8003ebe:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ec6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	4a15      	ldr	r2, [pc, #84]	; (8003f34 <_DoInit+0xa0>)
 8003ede:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	4a16      	ldr	r2, [pc, #88]	; (8003f3c <_DoInit+0xa8>)
 8003ee4:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2210      	movs	r2, #16
 8003eea:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2200      	movs	r2, #0
 8003efc:	675a      	str	r2, [r3, #116]	; 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003efe:	2300      	movs	r3, #0
 8003f00:	607b      	str	r3, [r7, #4]
 8003f02:	e00c      	b.n	8003f1e <_DoInit+0x8a>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f1c3 030f 	rsb	r3, r3, #15
 8003f0a:	4a0d      	ldr	r2, [pc, #52]	; (8003f40 <_DoInit+0xac>)
 8003f0c:	5cd1      	ldrb	r1, [r2, r3]
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4413      	add	r3, r2
 8003f14:	460a      	mov	r2, r1
 8003f16:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	607b      	str	r3, [r7, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b0f      	cmp	r3, #15
 8003f22:	d9ef      	bls.n	8003f04 <_DoInit+0x70>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 8003f24:	bf00      	nop
 8003f26:	bf00      	nop
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20002b14 	.word	0x20002b14
 8003f34:	08006860 	.word	0x08006860
 8003f38:	20002bbc 	.word	0x20002bbc
 8003f3c:	20002fbc 	.word	0x20002fbc
 8003f40:	080068b0 	.word	0x080068b0

08003f44 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08c      	sub	sp, #48	; 0x30
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003f50:	4b3e      	ldr	r3, [pc, #248]	; (800404c <SEGGER_RTT_ReadNoLock+0x108>)
 8003f52:	623b      	str	r3, [r7, #32]
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b53      	cmp	r3, #83	; 0x53
 8003f5c:	d001      	beq.n	8003f62 <SEGGER_RTT_ReadNoLock+0x1e>
 8003f5e:	f7ff ff99 	bl	8003e94 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4613      	mov	r3, r2
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	4413      	add	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	3360      	adds	r3, #96	; 0x60
 8003f6e:	4a37      	ldr	r2, [pc, #220]	; (800404c <SEGGER_RTT_ReadNoLock+0x108>)
 8003f70:	4413      	add	r3, r2
 8003f72:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003f84:	2300      	movs	r3, #0
 8003f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d92b      	bls.n	8003fe8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	bf28      	it	cs
 8003fa2:	4613      	movcs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fac:	4413      	add	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	6939      	ldr	r1, [r7, #16]
 8003fb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fb6:	f001 ff6b 	bl	8005e90 <memcpy>
    NumBytesRead += NumBytesRem;
 8003fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d101      	bne.n	8003fe8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	bf28      	it	cs
 8003ff8:	4613      	movcs	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d019      	beq.n	8004036 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004008:	4413      	add	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	6939      	ldr	r1, [r7, #16]
 8004010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004012:	f001 ff3d 	bl	8005e90 <memcpy>
    NumBytesRead += NumBytesRem;
 8004016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	4413      	add	r3, r2
 800401c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800401e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	4413      	add	r3, r2
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800402e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	4413      	add	r3, r2
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004040:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004044:	4618      	mov	r0, r3
 8004046:	3730      	adds	r7, #48	; 0x30
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	20002b14 	.word	0x20002b14

08004050 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800405e:	4b3c      	ldr	r3, [pc, #240]	; (8004150 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8004060:	61bb      	str	r3, [r7, #24]
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b53      	cmp	r3, #83	; 0x53
 800406a:	d001      	beq.n	8004070 <SEGGER_RTT_AllocUpBuffer+0x20>
 800406c:	f7ff ff12 	bl	8003e94 <_DoInit>
  SEGGER_RTT_LOCK();
 8004070:	f3ef 8311 	mrs	r3, BASEPRI
 8004074:	f04f 0120 	mov.w	r1, #32
 8004078:	f381 8811 	msr	BASEPRI, r1
 800407c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800407e:	4b34      	ldr	r3, [pc, #208]	; (8004150 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8004080:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004082:	2300      	movs	r3, #0
 8004084:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004086:	6939      	ldr	r1, [r7, #16]
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	4613      	mov	r3, r2
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	4413      	add	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	440b      	add	r3, r1
 8004096:	3304      	adds	r3, #4
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d008      	beq.n	80040b0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	3301      	adds	r3, #1
 80040a2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	dbeb      	blt.n	8004086 <SEGGER_RTT_AllocUpBuffer+0x36>
 80040ae:	e000      	b.n	80040b2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80040b0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	da3d      	bge.n	8004138 <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80040bc:	6939      	ldr	r1, [r7, #16]
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	4613      	mov	r3, r2
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	4413      	add	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	440b      	add	r3, r1
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80040d0:	6939      	ldr	r1, [r7, #16]
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	4613      	mov	r3, r2
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	4413      	add	r3, r2
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	440b      	add	r3, r1
 80040e0:	3304      	adds	r3, #4
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80040e6:	6939      	ldr	r1, [r7, #16]
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	4613      	mov	r3, r2
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	4413      	add	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	440b      	add	r3, r1
 80040f4:	3320      	adds	r3, #32
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80040fa:	6939      	ldr	r1, [r7, #16]
 80040fc:	69fa      	ldr	r2, [r7, #28]
 80040fe:	4613      	mov	r3, r2
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	4413      	add	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	440b      	add	r3, r1
 8004108:	3328      	adds	r3, #40	; 0x28
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800410e:	6939      	ldr	r1, [r7, #16]
 8004110:	69fa      	ldr	r2, [r7, #28]
 8004112:	4613      	mov	r3, r2
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	4413      	add	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	440b      	add	r3, r1
 800411c:	3324      	adds	r3, #36	; 0x24
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004122:	6939      	ldr	r1, [r7, #16]
 8004124:	69fa      	ldr	r2, [r7, #28]
 8004126:	4613      	mov	r3, r2
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	4413      	add	r3, r2
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	440b      	add	r3, r1
 8004130:	332c      	adds	r3, #44	; 0x2c
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	e002      	b.n	800413e <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 8004138:	f04f 33ff 	mov.w	r3, #4294967295
 800413c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004144:	69fb      	ldr	r3, [r7, #28]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20002b14 	.word	0x20002b14

08004154 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004154:	b580      	push	{r7, lr}
 8004156:	b08a      	sub	sp, #40	; 0x28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004162:	4b20      	ldr	r3, [pc, #128]	; (80041e4 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8004164:	623b      	str	r3, [r7, #32]
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b53      	cmp	r3, #83	; 0x53
 800416e:	d001      	beq.n	8004174 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004170:	f7ff fe90 	bl	8003e94 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004174:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8004176:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d82a      	bhi.n	80041d4 <SEGGER_RTT_ConfigDownBuffer+0x80>
    SEGGER_RTT_LOCK();
 800417e:	f3ef 8311 	mrs	r3, BASEPRI
 8004182:	f04f 0120 	mov.w	r1, #32
 8004186:	f381 8811 	msr	BASEPRI, r1
 800418a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4613      	mov	r3, r2
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	4413      	add	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	3360      	adds	r3, #96	; 0x60
 8004198:	69fa      	ldr	r2, [r7, #28]
 800419a:	4413      	add	r3, r2
 800419c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00e      	beq.n	80041c2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2200      	movs	r2, #0
 80041ba:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2200      	movs	r2, #0
 80041c0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041c6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80041ce:	2300      	movs	r3, #0
 80041d0:	627b      	str	r3, [r7, #36]	; 0x24
 80041d2:	e002      	b.n	80041da <SEGGER_RTT_ConfigDownBuffer+0x86>
  } else {
    r = -1;
 80041d4:	f04f 33ff 	mov.w	r3, #4294967295
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3728      	adds	r7, #40	; 0x28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20002b14 	.word	0x20002b14

080041e8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	60fa      	str	r2, [r7, #12]
 80041fe:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b80      	cmp	r3, #128	; 0x80
 8004204:	d90a      	bls.n	800421c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004206:	2380      	movs	r3, #128	; 0x80
 8004208:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800420a:	e007      	b.n	800421c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	1c53      	adds	r3, r2, #1
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	1c59      	adds	r1, r3, #1
 8004216:	60f9      	str	r1, [r7, #12]
 8004218:	7812      	ldrb	r2, [r2, #0]
 800421a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	1e5a      	subs	r2, r3, #1
 8004220:	607a      	str	r2, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <_EncodeStr+0x46>
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1ee      	bne.n	800420c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	b2da      	uxtb	r2, r3
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800423a:	68fb      	ldr	r3, [r7, #12]
}
 800423c:	4618      	mov	r0, r3
 800423e:	371c      	adds	r7, #28
 8004240:	46bd      	mov	sp, r7
 8004242:	bc80      	pop	{r7}
 8004244:	4770      	bx	lr

08004246 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3307      	adds	r3, #7
}
 8004252:	4618      	mov	r0, r3
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr

0800425c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004262:	4b34      	ldr	r3, [pc, #208]	; (8004334 <_HandleIncomingPacket+0xd8>)
 8004264:	7e1b      	ldrb	r3, [r3, #24]
 8004266:	4618      	mov	r0, r3
 8004268:	1cfb      	adds	r3, r7, #3
 800426a:	2201      	movs	r2, #1
 800426c:	4619      	mov	r1, r3
 800426e:	f7ff fe69 	bl	8003f44 <SEGGER_RTT_ReadNoLock>
 8004272:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d057      	beq.n	800432a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800427a:	78fb      	ldrb	r3, [r7, #3]
 800427c:	2b80      	cmp	r3, #128	; 0x80
 800427e:	d031      	beq.n	80042e4 <_HandleIncomingPacket+0x88>
 8004280:	2b80      	cmp	r3, #128	; 0x80
 8004282:	dc40      	bgt.n	8004306 <_HandleIncomingPacket+0xaa>
 8004284:	2b07      	cmp	r3, #7
 8004286:	dc15      	bgt.n	80042b4 <_HandleIncomingPacket+0x58>
 8004288:	2b00      	cmp	r3, #0
 800428a:	dd3c      	ble.n	8004306 <_HandleIncomingPacket+0xaa>
 800428c:	3b01      	subs	r3, #1
 800428e:	2b06      	cmp	r3, #6
 8004290:	d839      	bhi.n	8004306 <_HandleIncomingPacket+0xaa>
 8004292:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <_HandleIncomingPacket+0x3c>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	080042bb 	.word	0x080042bb
 800429c:	080042c1 	.word	0x080042c1
 80042a0:	080042c7 	.word	0x080042c7
 80042a4:	080042cd 	.word	0x080042cd
 80042a8:	080042d3 	.word	0x080042d3
 80042ac:	080042d9 	.word	0x080042d9
 80042b0:	080042df 	.word	0x080042df
 80042b4:	2b7f      	cmp	r3, #127	; 0x7f
 80042b6:	d033      	beq.n	8004320 <_HandleIncomingPacket+0xc4>
 80042b8:	e025      	b.n	8004306 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80042ba:	f000 ffed 	bl	8005298 <SEGGER_SYSVIEW_Start>
      break;
 80042be:	e034      	b.n	800432a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80042c0:	f001 f8a4 	bl	800540c <SEGGER_SYSVIEW_Stop>
      break;
 80042c4:	e031      	b.n	800432a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80042c6:	f001 fa7d 	bl	80057c4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80042ca:	e02e      	b.n	800432a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80042cc:	f001 fa42 	bl	8005754 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80042d0:	e02b      	b.n	800432a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80042d2:	f001 f8c1 	bl	8005458 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80042d6:	e028      	b.n	800432a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80042d8:	f001 fcba 	bl	8005c50 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80042dc:	e025      	b.n	800432a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80042de:	f001 fc99 	bl	8005c14 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80042e2:	e022      	b.n	800432a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80042e4:	4b13      	ldr	r3, [pc, #76]	; (8004334 <_HandleIncomingPacket+0xd8>)
 80042e6:	7e1b      	ldrb	r3, [r3, #24]
 80042e8:	4618      	mov	r0, r3
 80042ea:	1cfb      	adds	r3, r7, #3
 80042ec:	2201      	movs	r2, #1
 80042ee:	4619      	mov	r1, r3
 80042f0:	f7ff fe28 	bl	8003f44 <SEGGER_RTT_ReadNoLock>
 80042f4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d013      	beq.n	8004324 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80042fc:	78fb      	ldrb	r3, [r7, #3]
 80042fe:	4618      	mov	r0, r3
 8004300:	f001 fbfe 	bl	8005b00 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004304:	e00e      	b.n	8004324 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004306:	78fb      	ldrb	r3, [r7, #3]
 8004308:	b25b      	sxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	da0c      	bge.n	8004328 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800430e:	4b09      	ldr	r3, [pc, #36]	; (8004334 <_HandleIncomingPacket+0xd8>)
 8004310:	7e1b      	ldrb	r3, [r3, #24]
 8004312:	4618      	mov	r0, r3
 8004314:	1cfb      	adds	r3, r7, #3
 8004316:	2201      	movs	r2, #1
 8004318:	4619      	mov	r1, r3
 800431a:	f7ff fe13 	bl	8003f44 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800431e:	e003      	b.n	8004328 <_HandleIncomingPacket+0xcc>
      break;
 8004320:	bf00      	nop
 8004322:	e002      	b.n	800432a <_HandleIncomingPacket+0xce>
      break;
 8004324:	bf00      	nop
 8004326:	e000      	b.n	800432a <_HandleIncomingPacket+0xce>
      break;
 8004328:	bf00      	nop
    }
  }
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20003fd4 	.word	0x20003fd4

08004338 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004338:	b580      	push	{r7, lr}
 800433a:	b08c      	sub	sp, #48	; 0x30
 800433c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800433e:	2301      	movs	r3, #1
 8004340:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004342:	1d3b      	adds	r3, r7, #4
 8004344:	3301      	adds	r3, #1
 8004346:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800434c:	4b31      	ldr	r3, [pc, #196]	; (8004414 <_TrySendOverflowPacket+0xdc>)
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	62bb      	str	r3, [r7, #40]	; 0x28
 8004352:	e00b      	b.n	800436c <_TrySendOverflowPacket+0x34>
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	b2da      	uxtb	r2, r3
 8004358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435a:	1c59      	adds	r1, r3, #1
 800435c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800435e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004368:	09db      	lsrs	r3, r3, #7
 800436a:	62bb      	str	r3, [r7, #40]	; 0x28
 800436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436e:	2b7f      	cmp	r3, #127	; 0x7f
 8004370:	d8f0      	bhi.n	8004354 <_TrySendOverflowPacket+0x1c>
 8004372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004380:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004382:	4b25      	ldr	r3, [pc, #148]	; (8004418 <_TrySendOverflowPacket+0xe0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004388:	4b22      	ldr	r3, [pc, #136]	; (8004414 <_TrySendOverflowPacket+0xdc>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	627b      	str	r3, [r7, #36]	; 0x24
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	623b      	str	r3, [r7, #32]
 800439a:	e00b      	b.n	80043b4 <_TrySendOverflowPacket+0x7c>
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	1c59      	adds	r1, r3, #1
 80043a4:	6279      	str	r1, [r7, #36]	; 0x24
 80043a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	09db      	lsrs	r3, r3, #7
 80043b2:	623b      	str	r3, [r7, #32]
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	2b7f      	cmp	r3, #127	; 0x7f
 80043b8:	d8f0      	bhi.n	800439c <_TrySendOverflowPacket+0x64>
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	627a      	str	r2, [r7, #36]	; 0x24
 80043c0:	6a3a      	ldr	r2, [r7, #32]
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	701a      	strb	r2, [r3, #0]
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80043ca:	4b12      	ldr	r3, [pc, #72]	; (8004414 <_TrySendOverflowPacket+0xdc>)
 80043cc:	785b      	ldrb	r3, [r3, #1]
 80043ce:	4618      	mov	r0, r3
 80043d0:	1d3b      	adds	r3, r7, #4
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	461a      	mov	r2, r3
 80043d8:	1d3b      	adds	r3, r7, #4
 80043da:	4619      	mov	r1, r3
 80043dc:	f7fb feb8 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80043e0:	4603      	mov	r3, r0
 80043e2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d009      	beq.n	80043fe <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80043ea:	4a0a      	ldr	r2, [pc, #40]	; (8004414 <_TrySendOverflowPacket+0xdc>)
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80043f0:	4b08      	ldr	r3, [pc, #32]	; (8004414 <_TrySendOverflowPacket+0xdc>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	4b06      	ldr	r3, [pc, #24]	; (8004414 <_TrySendOverflowPacket+0xdc>)
 80043fa:	701a      	strb	r2, [r3, #0]
 80043fc:	e004      	b.n	8004408 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80043fe:	4b05      	ldr	r3, [pc, #20]	; (8004414 <_TrySendOverflowPacket+0xdc>)
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	3301      	adds	r3, #1
 8004404:	4a03      	ldr	r2, [pc, #12]	; (8004414 <_TrySendOverflowPacket+0xdc>)
 8004406:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004408:	693b      	ldr	r3, [r7, #16]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3730      	adds	r7, #48	; 0x30
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20003fd4 	.word	0x20003fd4
 8004418:	e0001004 	.word	0xe0001004

0800441c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800441c:	b580      	push	{r7, lr}
 800441e:	b08a      	sub	sp, #40	; 0x28
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004428:	4b98      	ldr	r3, [pc, #608]	; (800468c <_SendPacket+0x270>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d010      	beq.n	8004452 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004430:	4b96      	ldr	r3, [pc, #600]	; (800468c <_SendPacket+0x270>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 812d 	beq.w	8004694 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800443a:	4b94      	ldr	r3, [pc, #592]	; (800468c <_SendPacket+0x270>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b02      	cmp	r3, #2
 8004440:	d109      	bne.n	8004456 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004442:	f7ff ff79 	bl	8004338 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004446:	4b91      	ldr	r3, [pc, #580]	; (800468c <_SendPacket+0x270>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b01      	cmp	r3, #1
 800444c:	f040 8124 	bne.w	8004698 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004450:	e001      	b.n	8004456 <_SendPacket+0x3a>
    goto Send;
 8004452:	bf00      	nop
 8004454:	e000      	b.n	8004458 <_SendPacket+0x3c>
Send:
 8004456:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b1f      	cmp	r3, #31
 800445c:	d809      	bhi.n	8004472 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800445e:	4b8b      	ldr	r3, [pc, #556]	; (800468c <_SendPacket+0x270>)
 8004460:	69da      	ldr	r2, [r3, #28]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	f040 8115 	bne.w	800469c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b17      	cmp	r3, #23
 8004476:	d807      	bhi.n	8004488 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3b01      	subs	r3, #1
 800447c:	60fb      	str	r3, [r7, #12]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	b2da      	uxtb	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	701a      	strb	r2, [r3, #0]
 8004486:	e0c4      	b.n	8004612 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	2b7f      	cmp	r3, #127	; 0x7f
 8004494:	d912      	bls.n	80044bc <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	09da      	lsrs	r2, r3, #7
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	3b01      	subs	r3, #1
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	3a01      	subs	r2, #1
 80044ae:	60fa      	str	r2, [r7, #12]
 80044b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	701a      	strb	r2, [r3, #0]
 80044ba:	e006      	b.n	80044ca <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	3b01      	subs	r3, #1
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b7e      	cmp	r3, #126	; 0x7e
 80044ce:	d807      	bhi.n	80044e0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	e098      	b.n	8004612 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044e6:	d212      	bcs.n	800450e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	09da      	lsrs	r2, r3, #7
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	3a01      	subs	r2, #1
 8004500:	60fa      	str	r2, [r7, #12]
 8004502:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004506:	b2da      	uxtb	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	701a      	strb	r2, [r3, #0]
 800450c:	e081      	b.n	8004612 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004514:	d21d      	bcs.n	8004552 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	0b9a      	lsrs	r2, r3, #14
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	3b01      	subs	r3, #1
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	09db      	lsrs	r3, r3, #7
 800452a:	b2db      	uxtb	r3, r3
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	3a01      	subs	r2, #1
 8004530:	60fa      	str	r2, [r7, #12]
 8004532:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004536:	b2da      	uxtb	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	b2db      	uxtb	r3, r3
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	3a01      	subs	r2, #1
 8004544:	60fa      	str	r2, [r7, #12]
 8004546:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800454a:	b2da      	uxtb	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	701a      	strb	r2, [r3, #0]
 8004550:	e05f      	b.n	8004612 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004558:	d228      	bcs.n	80045ac <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	0d5a      	lsrs	r2, r3, #21
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3b01      	subs	r3, #1
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	0b9b      	lsrs	r3, r3, #14
 800456e:	b2db      	uxtb	r3, r3
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	3a01      	subs	r2, #1
 8004574:	60fa      	str	r2, [r7, #12]
 8004576:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800457a:	b2da      	uxtb	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	09db      	lsrs	r3, r3, #7
 8004584:	b2db      	uxtb	r3, r3
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	3a01      	subs	r2, #1
 800458a:	60fa      	str	r2, [r7, #12]
 800458c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004590:	b2da      	uxtb	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	3a01      	subs	r2, #1
 800459e:	60fa      	str	r2, [r7, #12]
 80045a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	701a      	strb	r2, [r3, #0]
 80045aa:	e032      	b.n	8004612 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	0f1a      	lsrs	r2, r3, #28
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	0d5b      	lsrs	r3, r3, #21
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	3a01      	subs	r2, #1
 80045c6:	60fa      	str	r2, [r7, #12]
 80045c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	0b9b      	lsrs	r3, r3, #14
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	3a01      	subs	r2, #1
 80045dc:	60fa      	str	r2, [r7, #12]
 80045de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	09db      	lsrs	r3, r3, #7
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	3a01      	subs	r2, #1
 80045f2:	60fa      	str	r2, [r7, #12]
 80045f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	3a01      	subs	r2, #1
 8004606:	60fa      	str	r2, [r7, #12]
 8004608:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800460c:	b2da      	uxtb	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004612:	4b1f      	ldr	r3, [pc, #124]	; (8004690 <_SendPacket+0x274>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004618:	4b1c      	ldr	r3, [pc, #112]	; (800468c <_SendPacket+0x270>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	623b      	str	r3, [r7, #32]
 800462a:	e00b      	b.n	8004644 <_SendPacket+0x228>
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	b2da      	uxtb	r2, r3
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	1c59      	adds	r1, r3, #1
 8004634:	6279      	str	r1, [r7, #36]	; 0x24
 8004636:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	09db      	lsrs	r3, r3, #7
 8004642:	623b      	str	r3, [r7, #32]
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	2b7f      	cmp	r3, #127	; 0x7f
 8004648:	d8f0      	bhi.n	800462c <_SendPacket+0x210>
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	627a      	str	r2, [r7, #36]	; 0x24
 8004650:	6a3a      	ldr	r2, [r7, #32]
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800465a:	4b0c      	ldr	r3, [pc, #48]	; (800468c <_SendPacket+0x270>)
 800465c:	785b      	ldrb	r3, [r3, #1]
 800465e:	4618      	mov	r0, r3
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	461a      	mov	r2, r3
 8004668:	68f9      	ldr	r1, [r7, #12]
 800466a:	f7fb fd71 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800466e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004676:	4a05      	ldr	r2, [pc, #20]	; (800468c <_SendPacket+0x270>)
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	60d3      	str	r3, [r2, #12]
 800467c:	e00f      	b.n	800469e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800467e:	4b03      	ldr	r3, [pc, #12]	; (800468c <_SendPacket+0x270>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	3301      	adds	r3, #1
 8004684:	b2da      	uxtb	r2, r3
 8004686:	4b01      	ldr	r3, [pc, #4]	; (800468c <_SendPacket+0x270>)
 8004688:	701a      	strb	r2, [r3, #0]
 800468a:	e008      	b.n	800469e <_SendPacket+0x282>
 800468c:	20003fd4 	.word	0x20003fd4
 8004690:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004694:	bf00      	nop
 8004696:	e002      	b.n	800469e <_SendPacket+0x282>
      goto SendDone;
 8004698:	bf00      	nop
 800469a:	e000      	b.n	800469e <_SendPacket+0x282>
      goto SendDone;
 800469c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800469e:	4b14      	ldr	r3, [pc, #80]	; (80046f0 <_SendPacket+0x2d4>)
 80046a0:	7e1b      	ldrb	r3, [r3, #24]
 80046a2:	4619      	mov	r1, r3
 80046a4:	4a13      	ldr	r2, [pc, #76]	; (80046f4 <_SendPacket+0x2d8>)
 80046a6:	460b      	mov	r3, r1
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	440b      	add	r3, r1
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	4413      	add	r3, r2
 80046b0:	336c      	adds	r3, #108	; 0x6c
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <_SendPacket+0x2d4>)
 80046b6:	7e1b      	ldrb	r3, [r3, #24]
 80046b8:	4618      	mov	r0, r3
 80046ba:	490e      	ldr	r1, [pc, #56]	; (80046f4 <_SendPacket+0x2d8>)
 80046bc:	4603      	mov	r3, r0
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	4403      	add	r3, r0
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	440b      	add	r3, r1
 80046c6:	3370      	adds	r3, #112	; 0x70
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d00b      	beq.n	80046e6 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80046ce:	4b08      	ldr	r3, [pc, #32]	; (80046f0 <_SendPacket+0x2d4>)
 80046d0:	789b      	ldrb	r3, [r3, #2]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d107      	bne.n	80046e6 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <_SendPacket+0x2d4>)
 80046d8:	2201      	movs	r2, #1
 80046da:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80046dc:	f7ff fdbe 	bl	800425c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80046e0:	4b03      	ldr	r3, [pc, #12]	; (80046f0 <_SendPacket+0x2d4>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80046e6:	bf00      	nop
 80046e8:	3728      	adds	r7, #40	; 0x28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20003fd4 	.word	0x20003fd4
 80046f4:	20002b14 	.word	0x20002b14

080046f8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08a      	sub	sp, #40	; 0x28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	3301      	adds	r3, #1
 800470e:	2b80      	cmp	r3, #128	; 0x80
 8004710:	d80a      	bhi.n	8004728 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	1c59      	adds	r1, r3, #1
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6051      	str	r1, [r2, #4]
 800471c:	78fa      	ldrb	r2, [r7, #3]
 800471e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	2b80      	cmp	r3, #128	; 0x80
 800472e:	d15a      	bne.n	80047e6 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	623b      	str	r3, [r7, #32]
 8004750:	e00b      	b.n	800476a <_StoreChar+0x72>
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	b2da      	uxtb	r2, r3
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	1c59      	adds	r1, r3, #1
 800475a:	6279      	str	r1, [r7, #36]	; 0x24
 800475c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	701a      	strb	r2, [r3, #0]
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	09db      	lsrs	r3, r3, #7
 8004768:	623b      	str	r3, [r7, #32]
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	2b7f      	cmp	r3, #127	; 0x7f
 800476e:	d8f0      	bhi.n	8004752 <_StoreChar+0x5a>
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	627a      	str	r2, [r7, #36]	; 0x24
 8004776:	6a3a      	ldr	r2, [r7, #32]
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	701a      	strb	r2, [r3, #0]
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	61fb      	str	r3, [r7, #28]
 8004784:	2300      	movs	r3, #0
 8004786:	61bb      	str	r3, [r7, #24]
 8004788:	e00b      	b.n	80047a2 <_StoreChar+0xaa>
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	b2da      	uxtb	r2, r3
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	1c59      	adds	r1, r3, #1
 8004792:	61f9      	str	r1, [r7, #28]
 8004794:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	701a      	strb	r2, [r3, #0]
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	09db      	lsrs	r3, r3, #7
 80047a0:	61bb      	str	r3, [r7, #24]
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	2b7f      	cmp	r3, #127	; 0x7f
 80047a6:	d8f0      	bhi.n	800478a <_StoreChar+0x92>
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	61fa      	str	r2, [r7, #28]
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	b2d2      	uxtb	r2, r2
 80047b2:	701a      	strb	r2, [r3, #0]
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	221a      	movs	r2, #26
 80047be:	6939      	ldr	r1, [r7, #16]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff fe2b 	bl	800441c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff fd3b 	bl	8004246 <_PreparePacket>
 80047d0:	4602      	mov	r2, r0
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	611a      	str	r2, [r3, #16]
  }
}
 80047e6:	bf00      	nop
 80047e8:	3728      	adds	r7, #40	; 0x28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b08a      	sub	sp, #40	; 0x28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
 80047fc:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004802:	2301      	movs	r3, #1
 8004804:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004806:	2301      	movs	r3, #1
 8004808:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800480a:	e007      	b.n	800481c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800480c:	6a3a      	ldr	r2, [r7, #32]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	fbb2 f3f3 	udiv	r3, r2, r3
 8004814:	623b      	str	r3, [r7, #32]
    Width++;
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	3301      	adds	r3, #1
 800481a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800481c:	6a3a      	ldr	r2, [r7, #32]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	429a      	cmp	r2, r3
 8004822:	d2f3      	bcs.n	800480c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	429a      	cmp	r2, r3
 800482a:	d901      	bls.n	8004830 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d11f      	bne.n	800487a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01c      	beq.n	800487a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d005      	beq.n	8004856 <_PrintUnsigned+0x66>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d102      	bne.n	8004856 <_PrintUnsigned+0x66>
        c = '0';
 8004850:	2330      	movs	r3, #48	; 0x30
 8004852:	76fb      	strb	r3, [r7, #27]
 8004854:	e001      	b.n	800485a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004856:	2320      	movs	r3, #32
 8004858:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800485a:	e007      	b.n	800486c <_PrintUnsigned+0x7c>
        FieldWidth--;
 800485c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485e:	3b01      	subs	r3, #1
 8004860:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004862:	7efb      	ldrb	r3, [r7, #27]
 8004864:	4619      	mov	r1, r3
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f7ff ff46 	bl	80046f8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800486c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <_PrintUnsigned+0x8a>
 8004872:	69fa      	ldr	r2, [r7, #28]
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	429a      	cmp	r2, r3
 8004878:	d3f0      	bcc.n	800485c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d903      	bls.n	8004888 <_PrintUnsigned+0x98>
      NumDigits--;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	3b01      	subs	r3, #1
 8004884:	603b      	str	r3, [r7, #0]
 8004886:	e009      	b.n	800489c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004890:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	429a      	cmp	r2, r3
 8004898:	d200      	bcs.n	800489c <_PrintUnsigned+0xac>
        break;
 800489a:	e005      	b.n	80048a8 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	fb02 f303 	mul.w	r3, r2, r3
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80048a6:	e7e8      	b.n	800487a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b0:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b6:	fb02 f303 	mul.w	r3, r2, r3
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80048c0:	4a15      	ldr	r2, [pc, #84]	; (8004918 <_PrintUnsigned+0x128>)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	4413      	add	r3, r2
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	4619      	mov	r1, r3
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f7ff ff14 	bl	80046f8 <_StoreChar>
    Digit /= Base;
 80048d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1e3      	bne.n	80048a8 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80048e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d011      	beq.n	800490e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80048ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00e      	beq.n	800490e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80048f0:	e006      	b.n	8004900 <_PrintUnsigned+0x110>
        FieldWidth--;
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	3b01      	subs	r3, #1
 80048f6:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80048f8:	2120      	movs	r1, #32
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f7ff fefc 	bl	80046f8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <_PrintUnsigned+0x11e>
 8004906:	69fa      	ldr	r2, [r7, #28]
 8004908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490a:	429a      	cmp	r2, r3
 800490c:	d3f1      	bcc.n	80048f2 <_PrintUnsigned+0x102>
      }
    }
  }
}
 800490e:	bf00      	nop
 8004910:	3728      	adds	r7, #40	; 0x28
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	080068d0 	.word	0x080068d0

0800491c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af02      	add	r7, sp, #8
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	bfb8      	it	lt
 8004930:	425b      	neglt	r3, r3
 8004932:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004934:	2301      	movs	r3, #1
 8004936:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004938:	e007      	b.n	800494a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004942:	613b      	str	r3, [r7, #16]
    Width++;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	3301      	adds	r3, #1
 8004948:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	429a      	cmp	r2, r3
 8004950:	daf3      	bge.n	800493a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	429a      	cmp	r2, r3
 8004958:	d901      	bls.n	800495e <_PrintInt+0x42>
    Width = NumDigits;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00a      	beq.n	800497a <_PrintInt+0x5e>
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	db04      	blt.n	8004974 <_PrintInt+0x58>
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <_PrintInt+0x5e>
    FieldWidth--;
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	3b01      	subs	r3, #1
 8004978:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <_PrintInt+0x6e>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d016      	beq.n	80049b8 <_PrintInt+0x9c>
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b00      	cmp	r3, #0
 8004992:	d111      	bne.n	80049b8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00e      	beq.n	80049b8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800499a:	e006      	b.n	80049aa <_PrintInt+0x8e>
        FieldWidth--;
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	3b01      	subs	r3, #1
 80049a0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80049a2:	2120      	movs	r1, #32
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f7ff fea7 	bl	80046f8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <_PrintInt+0x9c>
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d3f1      	bcc.n	800499c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	da07      	bge.n	80049ce <_PrintInt+0xb2>
    v = -v;
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	425b      	negs	r3, r3
 80049c2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80049c4:	212d      	movs	r1, #45	; 0x2d
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f7ff fe96 	bl	80046f8 <_StoreChar>
 80049cc:	e008      	b.n	80049e0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80049d8:	212b      	movs	r1, #43	; 0x2b
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f7ff fe8c 	bl	80046f8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d019      	beq.n	8004a1e <_PrintInt+0x102>
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d114      	bne.n	8004a1e <_PrintInt+0x102>
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d111      	bne.n	8004a1e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00e      	beq.n	8004a1e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004a00:	e006      	b.n	8004a10 <_PrintInt+0xf4>
        FieldWidth--;
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	3b01      	subs	r3, #1
 8004a06:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004a08:	2130      	movs	r1, #48	; 0x30
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f7ff fe74 	bl	80046f8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <_PrintInt+0x102>
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d3f1      	bcc.n	8004a02 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	9301      	str	r3, [sp, #4]
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f7ff fedf 	bl	80047f0 <_PrintUnsigned>
}
 8004a32:	bf00      	nop
 8004a34:	3718      	adds	r7, #24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b098      	sub	sp, #96	; 0x60
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004a48:	f3ef 8311 	mrs	r3, BASEPRI
 8004a4c:	f04f 0120 	mov.w	r1, #32
 8004a50:	f381 8811 	msr	BASEPRI, r1
 8004a54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a56:	48b7      	ldr	r0, [pc, #732]	; (8004d34 <_VPrintTarget+0x2f8>)
 8004a58:	f7ff fbf5 	bl	8004246 <_PreparePacket>
 8004a5c:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004a5e:	4bb5      	ldr	r3, [pc, #724]	; (8004d34 <_VPrintTarget+0x2f8>)
 8004a60:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8004a62:	2300      	movs	r3, #0
 8004a64:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004a82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 81a8 	beq.w	8004ddc <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8004a8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a90:	2b25      	cmp	r3, #37	; 0x25
 8004a92:	f040 8195 	bne.w	8004dc0 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004a96:	2300      	movs	r3, #0
 8004a98:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004aa6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004aaa:	3b23      	subs	r3, #35	; 0x23
 8004aac:	2b0d      	cmp	r3, #13
 8004aae:	d83f      	bhi.n	8004b30 <_VPrintTarget+0xf4>
 8004ab0:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <_VPrintTarget+0x7c>)
 8004ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab6:	bf00      	nop
 8004ab8:	08004b21 	.word	0x08004b21
 8004abc:	08004b31 	.word	0x08004b31
 8004ac0:	08004b31 	.word	0x08004b31
 8004ac4:	08004b31 	.word	0x08004b31
 8004ac8:	08004b31 	.word	0x08004b31
 8004acc:	08004b31 	.word	0x08004b31
 8004ad0:	08004b31 	.word	0x08004b31
 8004ad4:	08004b31 	.word	0x08004b31
 8004ad8:	08004b11 	.word	0x08004b11
 8004adc:	08004b31 	.word	0x08004b31
 8004ae0:	08004af1 	.word	0x08004af1
 8004ae4:	08004b31 	.word	0x08004b31
 8004ae8:	08004b31 	.word	0x08004b31
 8004aec:	08004b01 	.word	0x08004b01
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004af2:	f043 0301 	orr.w	r3, r3, #1
 8004af6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	3301      	adds	r3, #1
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	e01a      	b.n	8004b36 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b02:	f043 0302 	orr.w	r3, r3, #2
 8004b06:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	e012      	b.n	8004b36 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b12:	f043 0304 	orr.w	r3, r3, #4
 8004b16:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	e00a      	b.n	8004b36 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b22:	f043 0308 	orr.w	r3, r3, #8
 8004b26:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	e002      	b.n	8004b36 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004b30:	2300      	movs	r3, #0
 8004b32:	653b      	str	r3, [r7, #80]	; 0x50
 8004b34:	bf00      	nop
        }
      } while (v);
 8004b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1b0      	bne.n	8004a9e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004b48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b4c:	2b2f      	cmp	r3, #47	; 0x2f
 8004b4e:	d912      	bls.n	8004b76 <_VPrintTarget+0x13a>
 8004b50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b54:	2b39      	cmp	r3, #57	; 0x39
 8004b56:	d80e      	bhi.n	8004b76 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004b5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	461a      	mov	r2, r3
 8004b6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b6e:	4413      	add	r3, r2
 8004b70:	3b30      	subs	r3, #48	; 0x30
 8004b72:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004b74:	e7e4      	b.n	8004b40 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004b76:	2300      	movs	r3, #0
 8004b78:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004b82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b86:	2b2e      	cmp	r3, #46	; 0x2e
 8004b88:	d11d      	bne.n	8004bc6 <_VPrintTarget+0x18a>
        sFormat++;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004b98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b9c:	2b2f      	cmp	r3, #47	; 0x2f
 8004b9e:	d912      	bls.n	8004bc6 <_VPrintTarget+0x18a>
 8004ba0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ba4:	2b39      	cmp	r3, #57	; 0x39
 8004ba6:	d80e      	bhi.n	8004bc6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3301      	adds	r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004bae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	461a      	mov	r2, r3
 8004bba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bbe:	4413      	add	r3, r2
 8004bc0:	3b30      	subs	r3, #48	; 0x30
 8004bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004bc4:	e7e4      	b.n	8004b90 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004bce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bd2:	2b6c      	cmp	r3, #108	; 0x6c
 8004bd4:	d003      	beq.n	8004bde <_VPrintTarget+0x1a2>
 8004bd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bda:	2b68      	cmp	r3, #104	; 0x68
 8004bdc:	d107      	bne.n	8004bee <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	3301      	adds	r3, #1
 8004bea:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004bec:	e7ef      	b.n	8004bce <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004bee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bf2:	2b25      	cmp	r3, #37	; 0x25
 8004bf4:	f000 80d8 	beq.w	8004da8 <_VPrintTarget+0x36c>
 8004bf8:	2b25      	cmp	r3, #37	; 0x25
 8004bfa:	f2c0 80dc 	blt.w	8004db6 <_VPrintTarget+0x37a>
 8004bfe:	2b78      	cmp	r3, #120	; 0x78
 8004c00:	f300 80d9 	bgt.w	8004db6 <_VPrintTarget+0x37a>
 8004c04:	2b58      	cmp	r3, #88	; 0x58
 8004c06:	f2c0 80d6 	blt.w	8004db6 <_VPrintTarget+0x37a>
 8004c0a:	3b58      	subs	r3, #88	; 0x58
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	f200 80d2 	bhi.w	8004db6 <_VPrintTarget+0x37a>
 8004c12:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <_VPrintTarget+0x1dc>)
 8004c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c18:	08004d0f 	.word	0x08004d0f
 8004c1c:	08004db7 	.word	0x08004db7
 8004c20:	08004db7 	.word	0x08004db7
 8004c24:	08004db7 	.word	0x08004db7
 8004c28:	08004db7 	.word	0x08004db7
 8004c2c:	08004db7 	.word	0x08004db7
 8004c30:	08004db7 	.word	0x08004db7
 8004c34:	08004db7 	.word	0x08004db7
 8004c38:	08004db7 	.word	0x08004db7
 8004c3c:	08004db7 	.word	0x08004db7
 8004c40:	08004db7 	.word	0x08004db7
 8004c44:	08004c9d 	.word	0x08004c9d
 8004c48:	08004cc3 	.word	0x08004cc3
 8004c4c:	08004db7 	.word	0x08004db7
 8004c50:	08004db7 	.word	0x08004db7
 8004c54:	08004db7 	.word	0x08004db7
 8004c58:	08004db7 	.word	0x08004db7
 8004c5c:	08004db7 	.word	0x08004db7
 8004c60:	08004db7 	.word	0x08004db7
 8004c64:	08004db7 	.word	0x08004db7
 8004c68:	08004db7 	.word	0x08004db7
 8004c6c:	08004db7 	.word	0x08004db7
 8004c70:	08004db7 	.word	0x08004db7
 8004c74:	08004db7 	.word	0x08004db7
 8004c78:	08004d83 	.word	0x08004d83
 8004c7c:	08004db7 	.word	0x08004db7
 8004c80:	08004db7 	.word	0x08004db7
 8004c84:	08004d39 	.word	0x08004d39
 8004c88:	08004db7 	.word	0x08004db7
 8004c8c:	08004ce9 	.word	0x08004ce9
 8004c90:	08004db7 	.word	0x08004db7
 8004c94:	08004db7 	.word	0x08004db7
 8004c98:	08004d0f 	.word	0x08004d0f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	1d19      	adds	r1, r3, #4
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6011      	str	r1, [r2, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8004cb0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004cb4:	f107 0310 	add.w	r3, r7, #16
 8004cb8:	4611      	mov	r1, r2
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff fd1c 	bl	80046f8 <_StoreChar>
        break;
 8004cc0:	e07a      	b.n	8004db8 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	1d19      	adds	r1, r3, #4
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6011      	str	r1, [r2, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004cd0:	f107 0010 	add.w	r0, r7, #16
 8004cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cd6:	9301      	str	r3, [sp, #4]
 8004cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cde:	220a      	movs	r2, #10
 8004ce0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ce2:	f7ff fe1b 	bl	800491c <_PrintInt>
        break;
 8004ce6:	e067      	b.n	8004db8 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	1d19      	adds	r1, r3, #4
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6011      	str	r1, [r2, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004cf6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004cf8:	f107 0010 	add.w	r0, r7, #16
 8004cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cfe:	9301      	str	r3, [sp, #4]
 8004d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d06:	220a      	movs	r2, #10
 8004d08:	f7ff fd72 	bl	80047f0 <_PrintUnsigned>
        break;
 8004d0c:	e054      	b.n	8004db8 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	1d19      	adds	r1, r3, #4
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6011      	str	r1, [r2, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004d1c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d1e:	f107 0010 	add.w	r0, r7, #16
 8004d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d24:	9301      	str	r3, [sp, #4]
 8004d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d2c:	2210      	movs	r2, #16
 8004d2e:	f7ff fd5f 	bl	80047f0 <_PrintUnsigned>
        break;
 8004d32:	e041      	b.n	8004db8 <_VPrintTarget+0x37c>
 8004d34:	20004004 	.word	0x20004004
      case 's':
        s = va_arg(*pParamList, const char*);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	1d19      	adds	r1, r3, #4
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6011      	str	r1, [r2, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8004d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <_VPrintTarget+0x314>
          s = "(null)";
 8004d4c:	4b4a      	ldr	r3, [pc, #296]	; (8004e78 <_VPrintTarget+0x43c>)
 8004d4e:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8004d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8004d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8004d5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00b      	beq.n	8004d7e <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8004d66:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004d6a:	f107 0310 	add.w	r3, r7, #16
 8004d6e:	4611      	mov	r1, r2
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff fcc1 	bl	80046f8 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	2b7f      	cmp	r3, #127	; 0x7f
 8004d7a:	d9e9      	bls.n	8004d50 <_VPrintTarget+0x314>
        break;
 8004d7c:	e01c      	b.n	8004db8 <_VPrintTarget+0x37c>
            break;
 8004d7e:	bf00      	nop
        break;
 8004d80:	e01a      	b.n	8004db8 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	1d19      	adds	r1, r3, #4
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6011      	str	r1, [r2, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004d90:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d92:	f107 0010 	add.w	r0, r7, #16
 8004d96:	2300      	movs	r3, #0
 8004d98:	9301      	str	r3, [sp, #4]
 8004d9a:	2308      	movs	r3, #8
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	2308      	movs	r3, #8
 8004da0:	2210      	movs	r2, #16
 8004da2:	f7ff fd25 	bl	80047f0 <_PrintUnsigned>
        break;
 8004da6:	e007      	b.n	8004db8 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004da8:	f107 0310 	add.w	r3, r7, #16
 8004dac:	2125      	movs	r1, #37	; 0x25
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff fca2 	bl	80046f8 <_StoreChar>
        break;
 8004db4:	e000      	b.n	8004db8 <_VPrintTarget+0x37c>
      default:
        break;
 8004db6:	bf00      	nop
      }
      sFormat++;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	e007      	b.n	8004dd0 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8004dc0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004dc4:	f107 0310 	add.w	r3, r7, #16
 8004dc8:	4611      	mov	r1, r2
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7ff fc94 	bl	80046f8 <_StoreChar>
    }
  } while (*sFormat);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f47f ae4d 	bne.w	8004a74 <_VPrintTarget+0x38>
 8004dda:	e000      	b.n	8004dde <_VPrintTarget+0x3a2>
      break;
 8004ddc:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d041      	beq.n	8004e68 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004de4:	6a3a      	ldr	r2, [r7, #32]
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004df4:	e00b      	b.n	8004e0e <_VPrintTarget+0x3d2>
 8004df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfc:	1c59      	adds	r1, r3, #1
 8004dfe:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004e00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	701a      	strb	r2, [r3, #0]
 8004e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0a:	09db      	lsrs	r3, r3, #7
 8004e0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e10:	2b7f      	cmp	r3, #127	; 0x7f
 8004e12:	d8f0      	bhi.n	8004df6 <_VPrintTarget+0x3ba>
 8004e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e1c:	b2d2      	uxtb	r2, r2
 8004e1e:	701a      	strb	r2, [r3, #0]
 8004e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e22:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	637b      	str	r3, [r7, #52]	; 0x34
 8004e28:	2300      	movs	r3, #0
 8004e2a:	633b      	str	r3, [r7, #48]	; 0x30
 8004e2c:	e00b      	b.n	8004e46 <_VPrintTarget+0x40a>
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e34:	1c59      	adds	r1, r3, #1
 8004e36:	6379      	str	r1, [r7, #52]	; 0x34
 8004e38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e42:	09db      	lsrs	r3, r3, #7
 8004e44:	633b      	str	r3, [r7, #48]	; 0x30
 8004e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e48:	2b7f      	cmp	r3, #127	; 0x7f
 8004e4a:	d8f0      	bhi.n	8004e2e <_VPrintTarget+0x3f2>
 8004e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	637a      	str	r2, [r7, #52]	; 0x34
 8004e52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	701a      	strb	r2, [r3, #0]
 8004e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5a:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	6979      	ldr	r1, [r7, #20]
 8004e60:	221a      	movs	r2, #26
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff fada 	bl	800441c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6a:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004e6e:	bf00      	nop
 8004e70:	3758      	adds	r7, #88	; 0x58
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	0800686c 	.word	0x0800686c

08004e7c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e90:	4917      	ldr	r1, [pc, #92]	; (8004ef0 <SEGGER_SYSVIEW_Init+0x74>)
 8004e92:	4818      	ldr	r0, [pc, #96]	; (8004ef4 <SEGGER_SYSVIEW_Init+0x78>)
 8004e94:	f7ff f8dc 	bl	8004050 <SEGGER_RTT_AllocUpBuffer>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	4b16      	ldr	r3, [pc, #88]	; (8004ef8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e9e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004ea0:	4b15      	ldr	r3, [pc, #84]	; (8004ef8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ea2:	785a      	ldrb	r2, [r3, #1]
 8004ea4:	4b14      	ldr	r3, [pc, #80]	; (8004ef8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ea6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004ea8:	4b13      	ldr	r3, [pc, #76]	; (8004ef8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004eaa:	7e1b      	ldrb	r3, [r3, #24]
 8004eac:	4618      	mov	r0, r3
 8004eae:	2300      	movs	r3, #0
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	2308      	movs	r3, #8
 8004eb4:	4a11      	ldr	r2, [pc, #68]	; (8004efc <SEGGER_SYSVIEW_Init+0x80>)
 8004eb6:	490f      	ldr	r1, [pc, #60]	; (8004ef4 <SEGGER_SYSVIEW_Init+0x78>)
 8004eb8:	f7ff f94c 	bl	8004154 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004ebc:	4b0e      	ldr	r3, [pc, #56]	; (8004ef8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004ec2:	4b0f      	ldr	r3, [pc, #60]	; (8004f00 <SEGGER_SYSVIEW_Init+0x84>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a0c      	ldr	r2, [pc, #48]	; (8004ef8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ec8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004eca:	4a0b      	ldr	r2, [pc, #44]	; (8004ef8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004ed0:	4a09      	ldr	r2, [pc, #36]	; (8004ef8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004ed6:	4a08      	ldr	r2, [pc, #32]	; (8004ef8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004edc:	4a06      	ldr	r2, [pc, #24]	; (8004ef8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004ee2:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004ee8:	bf00      	nop
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	20002fcc 	.word	0x20002fcc
 8004ef4:	08006874 	.word	0x08006874
 8004ef8:	20003fd4 	.word	0x20003fd4
 8004efc:	20003fcc 	.word	0x20003fcc
 8004f00:	e0001004 	.word	0xe0001004

08004f04 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004f0c:	4a03      	ldr	r2, [pc, #12]	; (8004f1c <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6113      	str	r3, [r2, #16]
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr
 8004f1c:	20003fd4 	.word	0x20003fd4

08004f20 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f28:	f3ef 8311 	mrs	r3, BASEPRI
 8004f2c:	f04f 0120 	mov.w	r1, #32
 8004f30:	f381 8811 	msr	BASEPRI, r1
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	4808      	ldr	r0, [pc, #32]	; (8004f58 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004f38:	f7ff f985 	bl	8004246 <_PreparePacket>
 8004f3c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	68b8      	ldr	r0, [r7, #8]
 8004f44:	f7ff fa6a 	bl	800441c <_SendPacket>
  RECORD_END();
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f383 8811 	msr	BASEPRI, r3
}
 8004f4e:	bf00      	nop
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20004004 	.word	0x20004004

08004f5c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b088      	sub	sp, #32
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004f66:	f3ef 8311 	mrs	r3, BASEPRI
 8004f6a:	f04f 0120 	mov.w	r1, #32
 8004f6e:	f381 8811 	msr	BASEPRI, r1
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	4816      	ldr	r0, [pc, #88]	; (8004fd0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004f76:	f7ff f966 	bl	8004246 <_PreparePacket>
 8004f7a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	61fb      	str	r3, [r7, #28]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	61bb      	str	r3, [r7, #24]
 8004f88:	e00b      	b.n	8004fa2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	1c59      	adds	r1, r3, #1
 8004f92:	61f9      	str	r1, [r7, #28]
 8004f94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	701a      	strb	r2, [r3, #0]
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	09db      	lsrs	r3, r3, #7
 8004fa0:	61bb      	str	r3, [r7, #24]
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	2b7f      	cmp	r3, #127	; 0x7f
 8004fa6:	d8f0      	bhi.n	8004f8a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	61fa      	str	r2, [r7, #28]
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	701a      	strb	r2, [r3, #0]
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	68f9      	ldr	r1, [r7, #12]
 8004fbc:	6938      	ldr	r0, [r7, #16]
 8004fbe:	f7ff fa2d 	bl	800441c <_SendPacket>
  RECORD_END();
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f383 8811 	msr	BASEPRI, r3
}
 8004fc8:	bf00      	nop
 8004fca:	3720      	adds	r7, #32
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	20004004 	.word	0x20004004

08004fd4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08c      	sub	sp, #48	; 0x30
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004fe0:	f3ef 8311 	mrs	r3, BASEPRI
 8004fe4:	f04f 0120 	mov.w	r1, #32
 8004fe8:	f381 8811 	msr	BASEPRI, r1
 8004fec:	61fb      	str	r3, [r7, #28]
 8004fee:	4825      	ldr	r0, [pc, #148]	; (8005084 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004ff0:	f7ff f929 	bl	8004246 <_PreparePacket>
 8004ff4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	62bb      	str	r3, [r7, #40]	; 0x28
 8005002:	e00b      	b.n	800501c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005006:	b2da      	uxtb	r2, r3
 8005008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500a:	1c59      	adds	r1, r3, #1
 800500c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800500e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005018:	09db      	lsrs	r3, r3, #7
 800501a:	62bb      	str	r3, [r7, #40]	; 0x28
 800501c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501e:	2b7f      	cmp	r3, #127	; 0x7f
 8005020:	d8f0      	bhi.n	8005004 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	701a      	strb	r2, [r3, #0]
 800502e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005030:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	623b      	str	r3, [r7, #32]
 800503a:	e00b      	b.n	8005054 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	b2da      	uxtb	r2, r3
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	1c59      	adds	r1, r3, #1
 8005044:	6279      	str	r1, [r7, #36]	; 0x24
 8005046:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	09db      	lsrs	r3, r3, #7
 8005052:	623b      	str	r3, [r7, #32]
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	2b7f      	cmp	r3, #127	; 0x7f
 8005058:	d8f0      	bhi.n	800503c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	627a      	str	r2, [r7, #36]	; 0x24
 8005060:	6a3a      	ldr	r2, [r7, #32]
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	701a      	strb	r2, [r3, #0]
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	6979      	ldr	r1, [r7, #20]
 800506e:	69b8      	ldr	r0, [r7, #24]
 8005070:	f7ff f9d4 	bl	800441c <_SendPacket>
  RECORD_END();
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	f383 8811 	msr	BASEPRI, r3
}
 800507a:	bf00      	nop
 800507c:	3730      	adds	r7, #48	; 0x30
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20004004 	.word	0x20004004

08005088 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005088:	b580      	push	{r7, lr}
 800508a:	b08e      	sub	sp, #56	; 0x38
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005096:	f3ef 8311 	mrs	r3, BASEPRI
 800509a:	f04f 0120 	mov.w	r1, #32
 800509e:	f381 8811 	msr	BASEPRI, r1
 80050a2:	61fb      	str	r3, [r7, #28]
 80050a4:	4832      	ldr	r0, [pc, #200]	; (8005170 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80050a6:	f7ff f8ce 	bl	8004246 <_PreparePacket>
 80050aa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	637b      	str	r3, [r7, #52]	; 0x34
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	633b      	str	r3, [r7, #48]	; 0x30
 80050b8:	e00b      	b.n	80050d2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c0:	1c59      	adds	r1, r3, #1
 80050c2:	6379      	str	r1, [r7, #52]	; 0x34
 80050c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	701a      	strb	r2, [r3, #0]
 80050cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ce:	09db      	lsrs	r3, r3, #7
 80050d0:	633b      	str	r3, [r7, #48]	; 0x30
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	2b7f      	cmp	r3, #127	; 0x7f
 80050d6:	d8f0      	bhi.n	80050ba <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80050d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	637a      	str	r2, [r7, #52]	; 0x34
 80050de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	701a      	strb	r2, [r3, #0]
 80050e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80050f0:	e00b      	b.n	800510a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80050f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f8:	1c59      	adds	r1, r3, #1
 80050fa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80050fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005100:	b2d2      	uxtb	r2, r2
 8005102:	701a      	strb	r2, [r3, #0]
 8005104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005106:	09db      	lsrs	r3, r3, #7
 8005108:	62bb      	str	r3, [r7, #40]	; 0x28
 800510a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510c:	2b7f      	cmp	r3, #127	; 0x7f
 800510e:	d8f0      	bhi.n	80050f2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	701a      	strb	r2, [r3, #0]
 800511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	627b      	str	r3, [r7, #36]	; 0x24
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	623b      	str	r3, [r7, #32]
 8005128:	e00b      	b.n	8005142 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	b2da      	uxtb	r2, r3
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	1c59      	adds	r1, r3, #1
 8005132:	6279      	str	r1, [r7, #36]	; 0x24
 8005134:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	701a      	strb	r2, [r3, #0]
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	09db      	lsrs	r3, r3, #7
 8005140:	623b      	str	r3, [r7, #32]
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	2b7f      	cmp	r3, #127	; 0x7f
 8005146:	d8f0      	bhi.n	800512a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	627a      	str	r2, [r7, #36]	; 0x24
 800514e:	6a3a      	ldr	r2, [r7, #32]
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	701a      	strb	r2, [r3, #0]
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	6979      	ldr	r1, [r7, #20]
 800515c:	69b8      	ldr	r0, [r7, #24]
 800515e:	f7ff f95d 	bl	800441c <_SendPacket>
  RECORD_END();
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	f383 8811 	msr	BASEPRI, r3
}
 8005168:	bf00      	nop
 800516a:	3738      	adds	r7, #56	; 0x38
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20004004 	.word	0x20004004

08005174 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005174:	b580      	push	{r7, lr}
 8005176:	b090      	sub	sp, #64	; 0x40
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005182:	f3ef 8311 	mrs	r3, BASEPRI
 8005186:	f04f 0120 	mov.w	r1, #32
 800518a:	f381 8811 	msr	BASEPRI, r1
 800518e:	61fb      	str	r3, [r7, #28]
 8005190:	4840      	ldr	r0, [pc, #256]	; (8005294 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005192:	f7ff f858 	bl	8004246 <_PreparePacket>
 8005196:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80051a4:	e00b      	b.n	80051be <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80051a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ac:	1c59      	adds	r1, r3, #1
 80051ae:	63f9      	str	r1, [r7, #60]	; 0x3c
 80051b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	701a      	strb	r2, [r3, #0]
 80051b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ba:	09db      	lsrs	r3, r3, #7
 80051bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80051be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c0:	2b7f      	cmp	r3, #127	; 0x7f
 80051c2:	d8f0      	bhi.n	80051a6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80051c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80051ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	637b      	str	r3, [r7, #52]	; 0x34
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	633b      	str	r3, [r7, #48]	; 0x30
 80051dc:	e00b      	b.n	80051f6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e4:	1c59      	adds	r1, r3, #1
 80051e6:	6379      	str	r1, [r7, #52]	; 0x34
 80051e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ec:	b2d2      	uxtb	r2, r2
 80051ee:	701a      	strb	r2, [r3, #0]
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	09db      	lsrs	r3, r3, #7
 80051f4:	633b      	str	r3, [r7, #48]	; 0x30
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	2b7f      	cmp	r3, #127	; 0x7f
 80051fa:	d8f0      	bhi.n	80051de <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80051fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	637a      	str	r2, [r7, #52]	; 0x34
 8005202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005204:	b2d2      	uxtb	r2, r2
 8005206:	701a      	strb	r2, [r3, #0]
 8005208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	62bb      	str	r3, [r7, #40]	; 0x28
 8005214:	e00b      	b.n	800522e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005218:	b2da      	uxtb	r2, r3
 800521a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521c:	1c59      	adds	r1, r3, #1
 800521e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005220:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005224:	b2d2      	uxtb	r2, r2
 8005226:	701a      	strb	r2, [r3, #0]
 8005228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522a:	09db      	lsrs	r3, r3, #7
 800522c:	62bb      	str	r3, [r7, #40]	; 0x28
 800522e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005230:	2b7f      	cmp	r3, #127	; 0x7f
 8005232:	d8f0      	bhi.n	8005216 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	62fa      	str	r2, [r7, #44]	; 0x2c
 800523a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	701a      	strb	r2, [r3, #0]
 8005240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005242:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
 8005248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800524a:	623b      	str	r3, [r7, #32]
 800524c:	e00b      	b.n	8005266 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	b2da      	uxtb	r2, r3
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	1c59      	adds	r1, r3, #1
 8005256:	6279      	str	r1, [r7, #36]	; 0x24
 8005258:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	09db      	lsrs	r3, r3, #7
 8005264:	623b      	str	r3, [r7, #32]
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	2b7f      	cmp	r3, #127	; 0x7f
 800526a:	d8f0      	bhi.n	800524e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	627a      	str	r2, [r7, #36]	; 0x24
 8005272:	6a3a      	ldr	r2, [r7, #32]
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	701a      	strb	r2, [r3, #0]
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	6979      	ldr	r1, [r7, #20]
 8005280:	69b8      	ldr	r0, [r7, #24]
 8005282:	f7ff f8cb 	bl	800441c <_SendPacket>
  RECORD_END();
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	f383 8811 	msr	BASEPRI, r3
}
 800528c:	bf00      	nop
 800528e:	3740      	adds	r7, #64	; 0x40
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20004004 	.word	0x20004004

08005298 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b08c      	sub	sp, #48	; 0x30
 800529c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800529e:	4b58      	ldr	r3, [pc, #352]	; (8005400 <SEGGER_SYSVIEW_Start+0x168>)
 80052a0:	2201      	movs	r2, #1
 80052a2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80052a4:	f3ef 8311 	mrs	r3, BASEPRI
 80052a8:	f04f 0120 	mov.w	r1, #32
 80052ac:	f381 8811 	msr	BASEPRI, r1
 80052b0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80052b2:	4b53      	ldr	r3, [pc, #332]	; (8005400 <SEGGER_SYSVIEW_Start+0x168>)
 80052b4:	785b      	ldrb	r3, [r3, #1]
 80052b6:	220a      	movs	r2, #10
 80052b8:	4952      	ldr	r1, [pc, #328]	; (8005404 <SEGGER_SYSVIEW_Start+0x16c>)
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fa ff48 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80052c6:	200a      	movs	r0, #10
 80052c8:	f7ff fe2a 	bl	8004f20 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80052cc:	f3ef 8311 	mrs	r3, BASEPRI
 80052d0:	f04f 0120 	mov.w	r1, #32
 80052d4:	f381 8811 	msr	BASEPRI, r1
 80052d8:	60bb      	str	r3, [r7, #8]
 80052da:	484b      	ldr	r0, [pc, #300]	; (8005408 <SEGGER_SYSVIEW_Start+0x170>)
 80052dc:	f7fe ffb3 	bl	8004246 <_PreparePacket>
 80052e0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ea:	4b45      	ldr	r3, [pc, #276]	; (8005400 <SEGGER_SYSVIEW_Start+0x168>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80052f0:	e00b      	b.n	800530a <SEGGER_SYSVIEW_Start+0x72>
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f8:	1c59      	adds	r1, r3, #1
 80052fa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80052fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	701a      	strb	r2, [r3, #0]
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	09db      	lsrs	r3, r3, #7
 8005308:	62bb      	str	r3, [r7, #40]	; 0x28
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	2b7f      	cmp	r3, #127	; 0x7f
 800530e:	d8f0      	bhi.n	80052f2 <SEGGER_SYSVIEW_Start+0x5a>
 8005310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	701a      	strb	r2, [r3, #0]
 800531c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	627b      	str	r3, [r7, #36]	; 0x24
 8005324:	4b36      	ldr	r3, [pc, #216]	; (8005400 <SEGGER_SYSVIEW_Start+0x168>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	623b      	str	r3, [r7, #32]
 800532a:	e00b      	b.n	8005344 <SEGGER_SYSVIEW_Start+0xac>
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	b2da      	uxtb	r2, r3
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	1c59      	adds	r1, r3, #1
 8005334:	6279      	str	r1, [r7, #36]	; 0x24
 8005336:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	09db      	lsrs	r3, r3, #7
 8005342:	623b      	str	r3, [r7, #32]
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	2b7f      	cmp	r3, #127	; 0x7f
 8005348:	d8f0      	bhi.n	800532c <SEGGER_SYSVIEW_Start+0x94>
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	627a      	str	r2, [r7, #36]	; 0x24
 8005350:	6a3a      	ldr	r2, [r7, #32]
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	61fb      	str	r3, [r7, #28]
 800535e:	4b28      	ldr	r3, [pc, #160]	; (8005400 <SEGGER_SYSVIEW_Start+0x168>)
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	61bb      	str	r3, [r7, #24]
 8005364:	e00b      	b.n	800537e <SEGGER_SYSVIEW_Start+0xe6>
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	b2da      	uxtb	r2, r3
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	1c59      	adds	r1, r3, #1
 800536e:	61f9      	str	r1, [r7, #28]
 8005370:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005374:	b2d2      	uxtb	r2, r2
 8005376:	701a      	strb	r2, [r3, #0]
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	09db      	lsrs	r3, r3, #7
 800537c:	61bb      	str	r3, [r7, #24]
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	2b7f      	cmp	r3, #127	; 0x7f
 8005382:	d8f0      	bhi.n	8005366 <SEGGER_SYSVIEW_Start+0xce>
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	61fa      	str	r2, [r7, #28]
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	701a      	strb	r2, [r3, #0]
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	2300      	movs	r3, #0
 800539a:	613b      	str	r3, [r7, #16]
 800539c:	e00b      	b.n	80053b6 <SEGGER_SYSVIEW_Start+0x11e>
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	1c59      	adds	r1, r3, #1
 80053a6:	6179      	str	r1, [r7, #20]
 80053a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ac:	b2d2      	uxtb	r2, r2
 80053ae:	701a      	strb	r2, [r3, #0]
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	09db      	lsrs	r3, r3, #7
 80053b4:	613b      	str	r3, [r7, #16]
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	2b7f      	cmp	r3, #127	; 0x7f
 80053ba:	d8f0      	bhi.n	800539e <SEGGER_SYSVIEW_Start+0x106>
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	617a      	str	r2, [r7, #20]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	b2d2      	uxtb	r2, r2
 80053c6:	701a      	strb	r2, [r3, #0]
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80053cc:	2218      	movs	r2, #24
 80053ce:	6839      	ldr	r1, [r7, #0]
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff f823 	bl	800441c <_SendPacket>
      RECORD_END();
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80053dc:	4b08      	ldr	r3, [pc, #32]	; (8005400 <SEGGER_SYSVIEW_Start+0x168>)
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80053e4:	4b06      	ldr	r3, [pc, #24]	; (8005400 <SEGGER_SYSVIEW_Start+0x168>)
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80053ea:	f000 f9eb 	bl	80057c4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80053ee:	f000 f9b1 	bl	8005754 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80053f2:	f000 fc2d 	bl	8005c50 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80053f6:	bf00      	nop
 80053f8:	3730      	adds	r7, #48	; 0x30
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20003fd4 	.word	0x20003fd4
 8005404:	080068c4 	.word	0x080068c4
 8005408:	20004004 	.word	0x20004004

0800540c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005412:	f3ef 8311 	mrs	r3, BASEPRI
 8005416:	f04f 0120 	mov.w	r1, #32
 800541a:	f381 8811 	msr	BASEPRI, r1
 800541e:	607b      	str	r3, [r7, #4]
 8005420:	480b      	ldr	r0, [pc, #44]	; (8005450 <SEGGER_SYSVIEW_Stop+0x44>)
 8005422:	f7fe ff10 	bl	8004246 <_PreparePacket>
 8005426:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005428:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <SEGGER_SYSVIEW_Stop+0x48>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d007      	beq.n	8005440 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005430:	220b      	movs	r2, #11
 8005432:	6839      	ldr	r1, [r7, #0]
 8005434:	6838      	ldr	r0, [r7, #0]
 8005436:	f7fe fff1 	bl	800441c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800543a:	4b06      	ldr	r3, [pc, #24]	; (8005454 <SEGGER_SYSVIEW_Stop+0x48>)
 800543c:	2200      	movs	r2, #0
 800543e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f383 8811 	msr	BASEPRI, r3
}
 8005446:	bf00      	nop
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	20004004 	.word	0x20004004
 8005454:	20003fd4 	.word	0x20003fd4

08005458 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005458:	b580      	push	{r7, lr}
 800545a:	b08c      	sub	sp, #48	; 0x30
 800545c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800545e:	f3ef 8311 	mrs	r3, BASEPRI
 8005462:	f04f 0120 	mov.w	r1, #32
 8005466:	f381 8811 	msr	BASEPRI, r1
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	4845      	ldr	r0, [pc, #276]	; (8005584 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800546e:	f7fe feea 	bl	8004246 <_PreparePacket>
 8005472:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800547c:	4b42      	ldr	r3, [pc, #264]	; (8005588 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	62bb      	str	r3, [r7, #40]	; 0x28
 8005482:	e00b      	b.n	800549c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005486:	b2da      	uxtb	r2, r3
 8005488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548a:	1c59      	adds	r1, r3, #1
 800548c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800548e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	701a      	strb	r2, [r3, #0]
 8005496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005498:	09db      	lsrs	r3, r3, #7
 800549a:	62bb      	str	r3, [r7, #40]	; 0x28
 800549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549e:	2b7f      	cmp	r3, #127	; 0x7f
 80054a0:	d8f0      	bhi.n	8005484 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80054a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	701a      	strb	r2, [r3, #0]
 80054ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	627b      	str	r3, [r7, #36]	; 0x24
 80054b6:	4b34      	ldr	r3, [pc, #208]	; (8005588 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	623b      	str	r3, [r7, #32]
 80054bc:	e00b      	b.n	80054d6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	1c59      	adds	r1, r3, #1
 80054c6:	6279      	str	r1, [r7, #36]	; 0x24
 80054c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	701a      	strb	r2, [r3, #0]
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	09db      	lsrs	r3, r3, #7
 80054d4:	623b      	str	r3, [r7, #32]
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	2b7f      	cmp	r3, #127	; 0x7f
 80054da:	d8f0      	bhi.n	80054be <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	627a      	str	r2, [r7, #36]	; 0x24
 80054e2:	6a3a      	ldr	r2, [r7, #32]
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	701a      	strb	r2, [r3, #0]
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	61fb      	str	r3, [r7, #28]
 80054f0:	4b25      	ldr	r3, [pc, #148]	; (8005588 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	61bb      	str	r3, [r7, #24]
 80054f6:	e00b      	b.n	8005510 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	1c59      	adds	r1, r3, #1
 8005500:	61f9      	str	r1, [r7, #28]
 8005502:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005506:	b2d2      	uxtb	r2, r2
 8005508:	701a      	strb	r2, [r3, #0]
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	09db      	lsrs	r3, r3, #7
 800550e:	61bb      	str	r3, [r7, #24]
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	2b7f      	cmp	r3, #127	; 0x7f
 8005514:	d8f0      	bhi.n	80054f8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	61fa      	str	r2, [r7, #28]
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	b2d2      	uxtb	r2, r2
 8005520:	701a      	strb	r2, [r3, #0]
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	2300      	movs	r3, #0
 800552c:	613b      	str	r3, [r7, #16]
 800552e:	e00b      	b.n	8005548 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	b2da      	uxtb	r2, r3
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	1c59      	adds	r1, r3, #1
 8005538:	6179      	str	r1, [r7, #20]
 800553a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800553e:	b2d2      	uxtb	r2, r2
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	09db      	lsrs	r3, r3, #7
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	2b7f      	cmp	r3, #127	; 0x7f
 800554c:	d8f0      	bhi.n	8005530 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	617a      	str	r2, [r7, #20]
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	701a      	strb	r2, [r3, #0]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800555e:	2218      	movs	r2, #24
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	68b8      	ldr	r0, [r7, #8]
 8005564:	f7fe ff5a 	bl	800441c <_SendPacket>
  RECORD_END();
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800556e:	4b06      	ldr	r3, [pc, #24]	; (8005588 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005576:	4b04      	ldr	r3, [pc, #16]	; (8005588 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	4798      	blx	r3
  }
}
 800557c:	bf00      	nop
 800557e:	3730      	adds	r7, #48	; 0x30
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	20004004 	.word	0x20004004
 8005588:	20003fd4 	.word	0x20003fd4

0800558c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800558c:	b580      	push	{r7, lr}
 800558e:	b092      	sub	sp, #72	; 0x48
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005594:	f3ef 8311 	mrs	r3, BASEPRI
 8005598:	f04f 0120 	mov.w	r1, #32
 800559c:	f381 8811 	msr	BASEPRI, r1
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	486a      	ldr	r0, [pc, #424]	; (800574c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80055a4:	f7fe fe4f 	bl	8004246 <_PreparePacket>
 80055a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	647b      	str	r3, [r7, #68]	; 0x44
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	4b66      	ldr	r3, [pc, #408]	; (8005750 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	643b      	str	r3, [r7, #64]	; 0x40
 80055be:	e00b      	b.n	80055d8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80055c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055c6:	1c59      	adds	r1, r3, #1
 80055c8:	6479      	str	r1, [r7, #68]	; 0x44
 80055ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	701a      	strb	r2, [r3, #0]
 80055d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055d4:	09db      	lsrs	r3, r3, #7
 80055d6:	643b      	str	r3, [r7, #64]	; 0x40
 80055d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055da:	2b7f      	cmp	r3, #127	; 0x7f
 80055dc:	d8f0      	bhi.n	80055c0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80055de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055e0:	1c5a      	adds	r2, r3, #1
 80055e2:	647a      	str	r2, [r7, #68]	; 0x44
 80055e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80055f8:	e00b      	b.n	8005612 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80055fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005600:	1c59      	adds	r1, r3, #1
 8005602:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005604:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005608:	b2d2      	uxtb	r2, r2
 800560a:	701a      	strb	r2, [r3, #0]
 800560c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560e:	09db      	lsrs	r3, r3, #7
 8005610:	63bb      	str	r3, [r7, #56]	; 0x38
 8005612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005614:	2b7f      	cmp	r3, #127	; 0x7f
 8005616:	d8f0      	bhi.n	80055fa <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800561e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	701a      	strb	r2, [r3, #0]
 8005624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005626:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	4619      	mov	r1, r3
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f7fe fdd9 	bl	80041e8 <_EncodeStr>
 8005636:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005638:	2209      	movs	r2, #9
 800563a:	68f9      	ldr	r1, [r7, #12]
 800563c:	6938      	ldr	r0, [r7, #16]
 800563e:	f7fe feed 	bl	800441c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	637b      	str	r3, [r7, #52]	; 0x34
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	4b40      	ldr	r3, [pc, #256]	; (8005750 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	633b      	str	r3, [r7, #48]	; 0x30
 8005656:	e00b      	b.n	8005670 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565a:	b2da      	uxtb	r2, r3
 800565c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565e:	1c59      	adds	r1, r3, #1
 8005660:	6379      	str	r1, [r7, #52]	; 0x34
 8005662:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	701a      	strb	r2, [r3, #0]
 800566a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566c:	09db      	lsrs	r3, r3, #7
 800566e:	633b      	str	r3, [r7, #48]	; 0x30
 8005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005672:	2b7f      	cmp	r3, #127	; 0x7f
 8005674:	d8f0      	bhi.n	8005658 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	637a      	str	r2, [r7, #52]	; 0x34
 800567c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005684:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005690:	e00b      	b.n	80056aa <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005694:	b2da      	uxtb	r2, r3
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005698:	1c59      	adds	r1, r3, #1
 800569a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800569c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056a0:	b2d2      	uxtb	r2, r2
 80056a2:	701a      	strb	r2, [r3, #0]
 80056a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a6:	09db      	lsrs	r3, r3, #7
 80056a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ac:	2b7f      	cmp	r3, #127	; 0x7f
 80056ae:	d8f0      	bhi.n	8005692 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80056b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	701a      	strb	r2, [r3, #0]
 80056bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056be:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	627b      	str	r3, [r7, #36]	; 0x24
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	623b      	str	r3, [r7, #32]
 80056ca:	e00b      	b.n	80056e4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	1c59      	adds	r1, r3, #1
 80056d4:	6279      	str	r1, [r7, #36]	; 0x24
 80056d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	701a      	strb	r2, [r3, #0]
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	09db      	lsrs	r3, r3, #7
 80056e2:	623b      	str	r3, [r7, #32]
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	2b7f      	cmp	r3, #127	; 0x7f
 80056e8:	d8f0      	bhi.n	80056cc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	627a      	str	r2, [r7, #36]	; 0x24
 80056f0:	6a3a      	ldr	r2, [r7, #32]
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	701a      	strb	r2, [r3, #0]
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	2300      	movs	r3, #0
 8005700:	61bb      	str	r3, [r7, #24]
 8005702:	e00b      	b.n	800571c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	b2da      	uxtb	r2, r3
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	1c59      	adds	r1, r3, #1
 800570c:	61f9      	str	r1, [r7, #28]
 800570e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	701a      	strb	r2, [r3, #0]
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	09db      	lsrs	r3, r3, #7
 800571a:	61bb      	str	r3, [r7, #24]
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	2b7f      	cmp	r3, #127	; 0x7f
 8005720:	d8f0      	bhi.n	8005704 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	61fa      	str	r2, [r7, #28]
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005732:	2215      	movs	r2, #21
 8005734:	68f9      	ldr	r1, [r7, #12]
 8005736:	6938      	ldr	r0, [r7, #16]
 8005738:	f7fe fe70 	bl	800441c <_SendPacket>
  RECORD_END();
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f383 8811 	msr	BASEPRI, r3
}
 8005742:	bf00      	nop
 8005744:	3748      	adds	r7, #72	; 0x48
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	20004004 	.word	0x20004004
 8005750:	20003fd4 	.word	0x20003fd4

08005754 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005754:	b580      	push	{r7, lr}
 8005756:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005758:	4b07      	ldr	r3, [pc, #28]	; (8005778 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d008      	beq.n	8005772 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005760:	4b05      	ldr	r3, [pc, #20]	; (8005778 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800576a:	4b03      	ldr	r3, [pc, #12]	; (8005778 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	4798      	blx	r3
  }
}
 8005772:	bf00      	nop
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20003fd4 	.word	0x20003fd4

0800577c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005784:	f3ef 8311 	mrs	r3, BASEPRI
 8005788:	f04f 0120 	mov.w	r1, #32
 800578c:	f381 8811 	msr	BASEPRI, r1
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	480b      	ldr	r0, [pc, #44]	; (80057c0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005794:	f7fe fd57 	bl	8004246 <_PreparePacket>
 8005798:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800579a:	2280      	movs	r2, #128	; 0x80
 800579c:	6879      	ldr	r1, [r7, #4]
 800579e:	6938      	ldr	r0, [r7, #16]
 80057a0:	f7fe fd22 	bl	80041e8 <_EncodeStr>
 80057a4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80057a6:	220e      	movs	r2, #14
 80057a8:	68f9      	ldr	r1, [r7, #12]
 80057aa:	6938      	ldr	r0, [r7, #16]
 80057ac:	f7fe fe36 	bl	800441c <_SendPacket>
  RECORD_END();
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f383 8811 	msr	BASEPRI, r3
}
 80057b6:	bf00      	nop
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20004004 	.word	0x20004004

080057c4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80057c4:	b590      	push	{r4, r7, lr}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80057ca:	4b15      	ldr	r3, [pc, #84]	; (8005820 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d01a      	beq.n	8005808 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80057d2:	4b13      	ldr	r3, [pc, #76]	; (8005820 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d015      	beq.n	8005808 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80057dc:	4b10      	ldr	r3, [pc, #64]	; (8005820 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4798      	blx	r3
 80057e4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80057e8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80057ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	f04f 0300 	mov.w	r3, #0
 80057f6:	000a      	movs	r2, r1
 80057f8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80057fa:	4613      	mov	r3, r2
 80057fc:	461a      	mov	r2, r3
 80057fe:	4621      	mov	r1, r4
 8005800:	200d      	movs	r0, #13
 8005802:	f7ff fbe7 	bl	8004fd4 <SEGGER_SYSVIEW_RecordU32x2>
 8005806:	e006      	b.n	8005816 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005808:	4b06      	ldr	r3, [pc, #24]	; (8005824 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4619      	mov	r1, r3
 800580e:	200c      	movs	r0, #12
 8005810:	f7ff fba4 	bl	8004f5c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005814:	bf00      	nop
 8005816:	bf00      	nop
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	bd90      	pop	{r4, r7, pc}
 800581e:	bf00      	nop
 8005820:	20003fd4 	.word	0x20003fd4
 8005824:	e0001004 	.word	0xe0001004

08005828 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800582e:	f3ef 8311 	mrs	r3, BASEPRI
 8005832:	f04f 0120 	mov.w	r1, #32
 8005836:	f381 8811 	msr	BASEPRI, r1
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	4819      	ldr	r0, [pc, #100]	; (80058a4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800583e:	f7fe fd02 	bl	8004246 <_PreparePacket>
 8005842:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005848:	4b17      	ldr	r3, [pc, #92]	; (80058a8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005850:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	e00b      	b.n	8005874 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	b2da      	uxtb	r2, r3
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	1c59      	adds	r1, r3, #1
 8005864:	6179      	str	r1, [r7, #20]
 8005866:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800586a:	b2d2      	uxtb	r2, r2
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	09db      	lsrs	r3, r3, #7
 8005872:	613b      	str	r3, [r7, #16]
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	2b7f      	cmp	r3, #127	; 0x7f
 8005878:	d8f0      	bhi.n	800585c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	617a      	str	r2, [r7, #20]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	701a      	strb	r2, [r3, #0]
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800588a:	2202      	movs	r2, #2
 800588c:	6879      	ldr	r1, [r7, #4]
 800588e:	68b8      	ldr	r0, [r7, #8]
 8005890:	f7fe fdc4 	bl	800441c <_SendPacket>
  RECORD_END();
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f383 8811 	msr	BASEPRI, r3
}
 800589a:	bf00      	nop
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	20004004 	.word	0x20004004
 80058a8:	e000ed04 	.word	0xe000ed04

080058ac <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80058b2:	f3ef 8311 	mrs	r3, BASEPRI
 80058b6:	f04f 0120 	mov.w	r1, #32
 80058ba:	f381 8811 	msr	BASEPRI, r1
 80058be:	607b      	str	r3, [r7, #4]
 80058c0:	4807      	ldr	r0, [pc, #28]	; (80058e0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80058c2:	f7fe fcc0 	bl	8004246 <_PreparePacket>
 80058c6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80058c8:	2203      	movs	r2, #3
 80058ca:	6839      	ldr	r1, [r7, #0]
 80058cc:	6838      	ldr	r0, [r7, #0]
 80058ce:	f7fe fda5 	bl	800441c <_SendPacket>
  RECORD_END();
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f383 8811 	msr	BASEPRI, r3
}
 80058d8:	bf00      	nop
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	20004004 	.word	0x20004004

080058e4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80058ea:	f3ef 8311 	mrs	r3, BASEPRI
 80058ee:	f04f 0120 	mov.w	r1, #32
 80058f2:	f381 8811 	msr	BASEPRI, r1
 80058f6:	607b      	str	r3, [r7, #4]
 80058f8:	4807      	ldr	r0, [pc, #28]	; (8005918 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80058fa:	f7fe fca4 	bl	8004246 <_PreparePacket>
 80058fe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005900:	2212      	movs	r2, #18
 8005902:	6839      	ldr	r1, [r7, #0]
 8005904:	6838      	ldr	r0, [r7, #0]
 8005906:	f7fe fd89 	bl	800441c <_SendPacket>
  RECORD_END();
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f383 8811 	msr	BASEPRI, r3
}
 8005910:	bf00      	nop
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	20004004 	.word	0x20004004

0800591c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005922:	f3ef 8311 	mrs	r3, BASEPRI
 8005926:	f04f 0120 	mov.w	r1, #32
 800592a:	f381 8811 	msr	BASEPRI, r1
 800592e:	607b      	str	r3, [r7, #4]
 8005930:	4807      	ldr	r0, [pc, #28]	; (8005950 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005932:	f7fe fc88 	bl	8004246 <_PreparePacket>
 8005936:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005938:	2211      	movs	r2, #17
 800593a:	6839      	ldr	r1, [r7, #0]
 800593c:	6838      	ldr	r0, [r7, #0]
 800593e:	f7fe fd6d 	bl	800441c <_SendPacket>
  RECORD_END();
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f383 8811 	msr	BASEPRI, r3
}
 8005948:	bf00      	nop
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20004004 	.word	0x20004004

08005954 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800595c:	f3ef 8311 	mrs	r3, BASEPRI
 8005960:	f04f 0120 	mov.w	r1, #32
 8005964:	f381 8811 	msr	BASEPRI, r1
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	4819      	ldr	r0, [pc, #100]	; (80059d0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800596c:	f7fe fc6b 	bl	8004246 <_PreparePacket>
 8005970:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005976:	4b17      	ldr	r3, [pc, #92]	; (80059d4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	61fb      	str	r3, [r7, #28]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	61bb      	str	r3, [r7, #24]
 8005988:	e00b      	b.n	80059a2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	b2da      	uxtb	r2, r3
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	1c59      	adds	r1, r3, #1
 8005992:	61f9      	str	r1, [r7, #28]
 8005994:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005998:	b2d2      	uxtb	r2, r2
 800599a:	701a      	strb	r2, [r3, #0]
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	09db      	lsrs	r3, r3, #7
 80059a0:	61bb      	str	r3, [r7, #24]
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	2b7f      	cmp	r3, #127	; 0x7f
 80059a6:	d8f0      	bhi.n	800598a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	61fa      	str	r2, [r7, #28]
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	701a      	strb	r2, [r3, #0]
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80059b8:	2208      	movs	r2, #8
 80059ba:	68f9      	ldr	r1, [r7, #12]
 80059bc:	6938      	ldr	r0, [r7, #16]
 80059be:	f7fe fd2d 	bl	800441c <_SendPacket>
  RECORD_END();
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f383 8811 	msr	BASEPRI, r3
}
 80059c8:	bf00      	nop
 80059ca:	3720      	adds	r7, #32
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	20004004 	.word	0x20004004
 80059d4:	20003fd4 	.word	0x20003fd4

080059d8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80059e0:	f3ef 8311 	mrs	r3, BASEPRI
 80059e4:	f04f 0120 	mov.w	r1, #32
 80059e8:	f381 8811 	msr	BASEPRI, r1
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	4819      	ldr	r0, [pc, #100]	; (8005a54 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80059f0:	f7fe fc29 	bl	8004246 <_PreparePacket>
 80059f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80059fa:	4b17      	ldr	r3, [pc, #92]	; (8005a58 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	61fb      	str	r3, [r7, #28]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	61bb      	str	r3, [r7, #24]
 8005a0c:	e00b      	b.n	8005a26 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	1c59      	adds	r1, r3, #1
 8005a16:	61f9      	str	r1, [r7, #28]
 8005a18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a1c:	b2d2      	uxtb	r2, r2
 8005a1e:	701a      	strb	r2, [r3, #0]
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	09db      	lsrs	r3, r3, #7
 8005a24:	61bb      	str	r3, [r7, #24]
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	2b7f      	cmp	r3, #127	; 0x7f
 8005a2a:	d8f0      	bhi.n	8005a0e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	61fa      	str	r2, [r7, #28]
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	701a      	strb	r2, [r3, #0]
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005a3c:	2204      	movs	r2, #4
 8005a3e:	68f9      	ldr	r1, [r7, #12]
 8005a40:	6938      	ldr	r0, [r7, #16]
 8005a42:	f7fe fceb 	bl	800441c <_SendPacket>
  RECORD_END();
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f383 8811 	msr	BASEPRI, r3
}
 8005a4c:	bf00      	nop
 8005a4e:	3720      	adds	r7, #32
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	20004004 	.word	0x20004004
 8005a58:	20003fd4 	.word	0x20003fd4

08005a5c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b088      	sub	sp, #32
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a64:	f3ef 8311 	mrs	r3, BASEPRI
 8005a68:	f04f 0120 	mov.w	r1, #32
 8005a6c:	f381 8811 	msr	BASEPRI, r1
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	4819      	ldr	r0, [pc, #100]	; (8005ad8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005a74:	f7fe fbe7 	bl	8004246 <_PreparePacket>
 8005a78:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005a7e:	4b17      	ldr	r3, [pc, #92]	; (8005adc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	61fb      	str	r3, [r7, #28]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	61bb      	str	r3, [r7, #24]
 8005a90:	e00b      	b.n	8005aaa <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	1c59      	adds	r1, r3, #1
 8005a9a:	61f9      	str	r1, [r7, #28]
 8005a9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aa0:	b2d2      	uxtb	r2, r2
 8005aa2:	701a      	strb	r2, [r3, #0]
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	09db      	lsrs	r3, r3, #7
 8005aa8:	61bb      	str	r3, [r7, #24]
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	2b7f      	cmp	r3, #127	; 0x7f
 8005aae:	d8f0      	bhi.n	8005a92 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	61fa      	str	r2, [r7, #28]
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	701a      	strb	r2, [r3, #0]
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005ac0:	2206      	movs	r2, #6
 8005ac2:	68f9      	ldr	r1, [r7, #12]
 8005ac4:	6938      	ldr	r0, [r7, #16]
 8005ac6:	f7fe fca9 	bl	800441c <_SendPacket>
  RECORD_END();
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f383 8811 	msr	BASEPRI, r3
}
 8005ad0:	bf00      	nop
 8005ad2:	3720      	adds	r7, #32
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	20004004 	.word	0x20004004
 8005adc:	20003fd4 	.word	0x20003fd4

08005ae0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005ae8:	4b04      	ldr	r3, [pc, #16]	; (8005afc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	1ad3      	subs	r3, r2, r3
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bc80      	pop	{r7}
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	20003fd4 	.word	0x20003fd4

08005b00 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08c      	sub	sp, #48	; 0x30
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	4603      	mov	r3, r0
 8005b08:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005b0a:	4b40      	ldr	r3, [pc, #256]	; (8005c0c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d077      	beq.n	8005c02 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005b12:	4b3e      	ldr	r3, [pc, #248]	; (8005c0c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005b18:	2300      	movs	r3, #0
 8005b1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b1c:	e008      	b.n	8005b30 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d007      	beq.n	8005b3a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b30:	79fb      	ldrb	r3, [r7, #7]
 8005b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d3f2      	bcc.n	8005b1e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005b38:	e000      	b.n	8005b3c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005b3a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d055      	beq.n	8005bee <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b42:	f3ef 8311 	mrs	r3, BASEPRI
 8005b46:	f04f 0120 	mov.w	r1, #32
 8005b4a:	f381 8811 	msr	BASEPRI, r1
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	482f      	ldr	r0, [pc, #188]	; (8005c10 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005b52:	f7fe fb78 	bl	8004246 <_PreparePacket>
 8005b56:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	623b      	str	r3, [r7, #32]
 8005b64:	e00b      	b.n	8005b7e <SEGGER_SYSVIEW_SendModule+0x7e>
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	1c59      	adds	r1, r3, #1
 8005b6e:	6279      	str	r1, [r7, #36]	; 0x24
 8005b70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b74:	b2d2      	uxtb	r2, r2
 8005b76:	701a      	strb	r2, [r3, #0]
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	09db      	lsrs	r3, r3, #7
 8005b7c:	623b      	str	r3, [r7, #32]
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	2b7f      	cmp	r3, #127	; 0x7f
 8005b82:	d8f0      	bhi.n	8005b66 <SEGGER_SYSVIEW_SendModule+0x66>
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	627a      	str	r2, [r7, #36]	; 0x24
 8005b8a:	6a3a      	ldr	r2, [r7, #32]
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	701a      	strb	r2, [r3, #0]
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	61fb      	str	r3, [r7, #28]
 8005b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	61bb      	str	r3, [r7, #24]
 8005b9e:	e00b      	b.n	8005bb8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	1c59      	adds	r1, r3, #1
 8005ba8:	61f9      	str	r1, [r7, #28]
 8005baa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bae:	b2d2      	uxtb	r2, r2
 8005bb0:	701a      	strb	r2, [r3, #0]
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	09db      	lsrs	r3, r3, #7
 8005bb6:	61bb      	str	r3, [r7, #24]
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	2b7f      	cmp	r3, #127	; 0x7f
 8005bbc:	d8f0      	bhi.n	8005ba0 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	61fa      	str	r2, [r7, #28]
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	701a      	strb	r2, [r3, #0]
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2280      	movs	r2, #128	; 0x80
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f7fe fb06 	bl	80041e8 <_EncodeStr>
 8005bdc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005bde:	2216      	movs	r2, #22
 8005be0:	68f9      	ldr	r1, [r7, #12]
 8005be2:	6938      	ldr	r0, [r7, #16]
 8005be4:	f7fe fc1a 	bl	800441c <_SendPacket>
      RECORD_END();
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d006      	beq.n	8005c02 <SEGGER_SYSVIEW_SendModule+0x102>
 8005bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d002      	beq.n	8005c02 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	4798      	blx	r3
    }
  }
}
 8005c02:	bf00      	nop
 8005c04:	3730      	adds	r7, #48	; 0x30
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20003ffc 	.word	0x20003ffc
 8005c10:	20004004 	.word	0x20004004

08005c14 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005c1a:	4b0c      	ldr	r3, [pc, #48]	; (8005c4c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00f      	beq.n	8005c42 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005c22:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1f2      	bne.n	8005c28 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005c42:	bf00      	nop
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20003ffc 	.word	0x20003ffc

08005c50 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005c56:	f3ef 8311 	mrs	r3, BASEPRI
 8005c5a:	f04f 0120 	mov.w	r1, #32
 8005c5e:	f381 8811 	msr	BASEPRI, r1
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	4817      	ldr	r0, [pc, #92]	; (8005cc4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005c66:	f7fe faee 	bl	8004246 <_PreparePacket>
 8005c6a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	4b14      	ldr	r3, [pc, #80]	; (8005cc8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	613b      	str	r3, [r7, #16]
 8005c7a:	e00b      	b.n	8005c94 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	1c59      	adds	r1, r3, #1
 8005c84:	6179      	str	r1, [r7, #20]
 8005c86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c8a:	b2d2      	uxtb	r2, r2
 8005c8c:	701a      	strb	r2, [r3, #0]
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	09db      	lsrs	r3, r3, #7
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	2b7f      	cmp	r3, #127	; 0x7f
 8005c98:	d8f0      	bhi.n	8005c7c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	617a      	str	r2, [r7, #20]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	701a      	strb	r2, [r3, #0]
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005caa:	221b      	movs	r2, #27
 8005cac:	6879      	ldr	r1, [r7, #4]
 8005cae:	68b8      	ldr	r0, [r7, #8]
 8005cb0:	f7fe fbb4 	bl	800441c <_SendPacket>
  RECORD_END();
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f383 8811 	msr	BASEPRI, r3
}
 8005cba:	bf00      	nop
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20004004 	.word	0x20004004
 8005cc8:	20004000 	.word	0x20004000

08005ccc <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005ccc:	b40f      	push	{r0, r1, r2, r3}
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b082      	sub	sp, #8
 8005cd2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005cd4:	f107 0314 	add.w	r3, r7, #20
 8005cd8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005cda:	1d3b      	adds	r3, r7, #4
 8005cdc:	461a      	mov	r2, r3
 8005cde:	2100      	movs	r1, #0
 8005ce0:	6938      	ldr	r0, [r7, #16]
 8005ce2:	f7fe feab 	bl	8004a3c <_VPrintTarget>
  va_end(ParamList);
}
 8005ce6:	bf00      	nop
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cf0:	b004      	add	sp, #16
 8005cf2:	4770      	bx	lr

08005cf4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08a      	sub	sp, #40	; 0x28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005cfc:	f3ef 8311 	mrs	r3, BASEPRI
 8005d00:	f04f 0120 	mov.w	r1, #32
 8005d04:	f381 8811 	msr	BASEPRI, r1
 8005d08:	617b      	str	r3, [r7, #20]
 8005d0a:	4827      	ldr	r0, [pc, #156]	; (8005da8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005d0c:	f7fe fa9b 	bl	8004246 <_PreparePacket>
 8005d10:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d12:	2280      	movs	r2, #128	; 0x80
 8005d14:	6879      	ldr	r1, [r7, #4]
 8005d16:	6938      	ldr	r0, [r7, #16]
 8005d18:	f7fe fa66 	bl	80041e8 <_EncodeStr>
 8005d1c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
 8005d22:	2301      	movs	r3, #1
 8005d24:	623b      	str	r3, [r7, #32]
 8005d26:	e00b      	b.n	8005d40 <SEGGER_SYSVIEW_Warn+0x4c>
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	1c59      	adds	r1, r3, #1
 8005d30:	6279      	str	r1, [r7, #36]	; 0x24
 8005d32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	701a      	strb	r2, [r3, #0]
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	09db      	lsrs	r3, r3, #7
 8005d3e:	623b      	str	r3, [r7, #32]
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	2b7f      	cmp	r3, #127	; 0x7f
 8005d44:	d8f0      	bhi.n	8005d28 <SEGGER_SYSVIEW_Warn+0x34>
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	1c5a      	adds	r2, r3, #1
 8005d4a:	627a      	str	r2, [r7, #36]	; 0x24
 8005d4c:	6a3a      	ldr	r2, [r7, #32]
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	61fb      	str	r3, [r7, #28]
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	61bb      	str	r3, [r7, #24]
 8005d5e:	e00b      	b.n	8005d78 <SEGGER_SYSVIEW_Warn+0x84>
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	1c59      	adds	r1, r3, #1
 8005d68:	61f9      	str	r1, [r7, #28]
 8005d6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	09db      	lsrs	r3, r3, #7
 8005d76:	61bb      	str	r3, [r7, #24]
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d7c:	d8f0      	bhi.n	8005d60 <SEGGER_SYSVIEW_Warn+0x6c>
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	61fa      	str	r2, [r7, #28]
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	701a      	strb	r2, [r3, #0]
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005d8e:	221a      	movs	r2, #26
 8005d90:	68f9      	ldr	r1, [r7, #12]
 8005d92:	6938      	ldr	r0, [r7, #16]
 8005d94:	f7fe fb42 	bl	800441c <_SendPacket>
  RECORD_END();
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f383 8811 	msr	BASEPRI, r3
}
 8005d9e:	bf00      	nop
 8005da0:	3728      	adds	r7, #40	; 0x28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20004004 	.word	0x20004004

08005dac <sniprintf>:
 8005dac:	b40c      	push	{r2, r3}
 8005dae:	b530      	push	{r4, r5, lr}
 8005db0:	4b17      	ldr	r3, [pc, #92]	; (8005e10 <sniprintf+0x64>)
 8005db2:	1e0c      	subs	r4, r1, #0
 8005db4:	681d      	ldr	r5, [r3, #0]
 8005db6:	b09d      	sub	sp, #116	; 0x74
 8005db8:	da08      	bge.n	8005dcc <sniprintf+0x20>
 8005dba:	238b      	movs	r3, #139	; 0x8b
 8005dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc0:	602b      	str	r3, [r5, #0]
 8005dc2:	b01d      	add	sp, #116	; 0x74
 8005dc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005dc8:	b002      	add	sp, #8
 8005dca:	4770      	bx	lr
 8005dcc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005dd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005dd4:	bf0c      	ite	eq
 8005dd6:	4623      	moveq	r3, r4
 8005dd8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005ddc:	9304      	str	r3, [sp, #16]
 8005dde:	9307      	str	r3, [sp, #28]
 8005de0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005de4:	9002      	str	r0, [sp, #8]
 8005de6:	9006      	str	r0, [sp, #24]
 8005de8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005dec:	4628      	mov	r0, r5
 8005dee:	ab21      	add	r3, sp, #132	; 0x84
 8005df0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005df2:	a902      	add	r1, sp, #8
 8005df4:	9301      	str	r3, [sp, #4]
 8005df6:	f000 f9a7 	bl	8006148 <_svfiprintf_r>
 8005dfa:	1c43      	adds	r3, r0, #1
 8005dfc:	bfbc      	itt	lt
 8005dfe:	238b      	movlt	r3, #139	; 0x8b
 8005e00:	602b      	strlt	r3, [r5, #0]
 8005e02:	2c00      	cmp	r4, #0
 8005e04:	d0dd      	beq.n	8005dc2 <sniprintf+0x16>
 8005e06:	2200      	movs	r2, #0
 8005e08:	9b02      	ldr	r3, [sp, #8]
 8005e0a:	701a      	strb	r2, [r3, #0]
 8005e0c:	e7d9      	b.n	8005dc2 <sniprintf+0x16>
 8005e0e:	bf00      	nop
 8005e10:	20000060 	.word	0x20000060

08005e14 <memcmp>:
 8005e14:	b510      	push	{r4, lr}
 8005e16:	3901      	subs	r1, #1
 8005e18:	4402      	add	r2, r0
 8005e1a:	4290      	cmp	r0, r2
 8005e1c:	d101      	bne.n	8005e22 <memcmp+0xe>
 8005e1e:	2000      	movs	r0, #0
 8005e20:	e005      	b.n	8005e2e <memcmp+0x1a>
 8005e22:	7803      	ldrb	r3, [r0, #0]
 8005e24:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005e28:	42a3      	cmp	r3, r4
 8005e2a:	d001      	beq.n	8005e30 <memcmp+0x1c>
 8005e2c:	1b18      	subs	r0, r3, r4
 8005e2e:	bd10      	pop	{r4, pc}
 8005e30:	3001      	adds	r0, #1
 8005e32:	e7f2      	b.n	8005e1a <memcmp+0x6>

08005e34 <memset>:
 8005e34:	4603      	mov	r3, r0
 8005e36:	4402      	add	r2, r0
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d100      	bne.n	8005e3e <memset+0xa>
 8005e3c:	4770      	bx	lr
 8005e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e42:	e7f9      	b.n	8005e38 <memset+0x4>

08005e44 <__libc_init_array>:
 8005e44:	b570      	push	{r4, r5, r6, lr}
 8005e46:	2600      	movs	r6, #0
 8005e48:	4d0c      	ldr	r5, [pc, #48]	; (8005e7c <__libc_init_array+0x38>)
 8005e4a:	4c0d      	ldr	r4, [pc, #52]	; (8005e80 <__libc_init_array+0x3c>)
 8005e4c:	1b64      	subs	r4, r4, r5
 8005e4e:	10a4      	asrs	r4, r4, #2
 8005e50:	42a6      	cmp	r6, r4
 8005e52:	d109      	bne.n	8005e68 <__libc_init_array+0x24>
 8005e54:	f000 fc88 	bl	8006768 <_init>
 8005e58:	2600      	movs	r6, #0
 8005e5a:	4d0a      	ldr	r5, [pc, #40]	; (8005e84 <__libc_init_array+0x40>)
 8005e5c:	4c0a      	ldr	r4, [pc, #40]	; (8005e88 <__libc_init_array+0x44>)
 8005e5e:	1b64      	subs	r4, r4, r5
 8005e60:	10a4      	asrs	r4, r4, #2
 8005e62:	42a6      	cmp	r6, r4
 8005e64:	d105      	bne.n	8005e72 <__libc_init_array+0x2e>
 8005e66:	bd70      	pop	{r4, r5, r6, pc}
 8005e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6c:	4798      	blx	r3
 8005e6e:	3601      	adds	r6, #1
 8005e70:	e7ee      	b.n	8005e50 <__libc_init_array+0xc>
 8005e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e76:	4798      	blx	r3
 8005e78:	3601      	adds	r6, #1
 8005e7a:	e7f2      	b.n	8005e62 <__libc_init_array+0x1e>
 8005e7c:	08006914 	.word	0x08006914
 8005e80:	08006914 	.word	0x08006914
 8005e84:	08006914 	.word	0x08006914
 8005e88:	08006918 	.word	0x08006918

08005e8c <__retarget_lock_acquire_recursive>:
 8005e8c:	4770      	bx	lr

08005e8e <__retarget_lock_release_recursive>:
 8005e8e:	4770      	bx	lr

08005e90 <memcpy>:
 8005e90:	440a      	add	r2, r1
 8005e92:	4291      	cmp	r1, r2
 8005e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e98:	d100      	bne.n	8005e9c <memcpy+0xc>
 8005e9a:	4770      	bx	lr
 8005e9c:	b510      	push	{r4, lr}
 8005e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ea2:	4291      	cmp	r1, r2
 8005ea4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ea8:	d1f9      	bne.n	8005e9e <memcpy+0xe>
 8005eaa:	bd10      	pop	{r4, pc}

08005eac <_free_r>:
 8005eac:	b538      	push	{r3, r4, r5, lr}
 8005eae:	4605      	mov	r5, r0
 8005eb0:	2900      	cmp	r1, #0
 8005eb2:	d040      	beq.n	8005f36 <_free_r+0x8a>
 8005eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eb8:	1f0c      	subs	r4, r1, #4
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	bfb8      	it	lt
 8005ebe:	18e4      	addlt	r4, r4, r3
 8005ec0:	f000 f8dc 	bl	800607c <__malloc_lock>
 8005ec4:	4a1c      	ldr	r2, [pc, #112]	; (8005f38 <_free_r+0x8c>)
 8005ec6:	6813      	ldr	r3, [r2, #0]
 8005ec8:	b933      	cbnz	r3, 8005ed8 <_free_r+0x2c>
 8005eca:	6063      	str	r3, [r4, #4]
 8005ecc:	6014      	str	r4, [r2, #0]
 8005ece:	4628      	mov	r0, r5
 8005ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ed4:	f000 b8d8 	b.w	8006088 <__malloc_unlock>
 8005ed8:	42a3      	cmp	r3, r4
 8005eda:	d908      	bls.n	8005eee <_free_r+0x42>
 8005edc:	6820      	ldr	r0, [r4, #0]
 8005ede:	1821      	adds	r1, r4, r0
 8005ee0:	428b      	cmp	r3, r1
 8005ee2:	bf01      	itttt	eq
 8005ee4:	6819      	ldreq	r1, [r3, #0]
 8005ee6:	685b      	ldreq	r3, [r3, #4]
 8005ee8:	1809      	addeq	r1, r1, r0
 8005eea:	6021      	streq	r1, [r4, #0]
 8005eec:	e7ed      	b.n	8005eca <_free_r+0x1e>
 8005eee:	461a      	mov	r2, r3
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	b10b      	cbz	r3, 8005ef8 <_free_r+0x4c>
 8005ef4:	42a3      	cmp	r3, r4
 8005ef6:	d9fa      	bls.n	8005eee <_free_r+0x42>
 8005ef8:	6811      	ldr	r1, [r2, #0]
 8005efa:	1850      	adds	r0, r2, r1
 8005efc:	42a0      	cmp	r0, r4
 8005efe:	d10b      	bne.n	8005f18 <_free_r+0x6c>
 8005f00:	6820      	ldr	r0, [r4, #0]
 8005f02:	4401      	add	r1, r0
 8005f04:	1850      	adds	r0, r2, r1
 8005f06:	4283      	cmp	r3, r0
 8005f08:	6011      	str	r1, [r2, #0]
 8005f0a:	d1e0      	bne.n	8005ece <_free_r+0x22>
 8005f0c:	6818      	ldr	r0, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	4408      	add	r0, r1
 8005f12:	6010      	str	r0, [r2, #0]
 8005f14:	6053      	str	r3, [r2, #4]
 8005f16:	e7da      	b.n	8005ece <_free_r+0x22>
 8005f18:	d902      	bls.n	8005f20 <_free_r+0x74>
 8005f1a:	230c      	movs	r3, #12
 8005f1c:	602b      	str	r3, [r5, #0]
 8005f1e:	e7d6      	b.n	8005ece <_free_r+0x22>
 8005f20:	6820      	ldr	r0, [r4, #0]
 8005f22:	1821      	adds	r1, r4, r0
 8005f24:	428b      	cmp	r3, r1
 8005f26:	bf01      	itttt	eq
 8005f28:	6819      	ldreq	r1, [r3, #0]
 8005f2a:	685b      	ldreq	r3, [r3, #4]
 8005f2c:	1809      	addeq	r1, r1, r0
 8005f2e:	6021      	streq	r1, [r4, #0]
 8005f30:	6063      	str	r3, [r4, #4]
 8005f32:	6054      	str	r4, [r2, #4]
 8005f34:	e7cb      	b.n	8005ece <_free_r+0x22>
 8005f36:	bd38      	pop	{r3, r4, r5, pc}
 8005f38:	20004228 	.word	0x20004228

08005f3c <sbrk_aligned>:
 8005f3c:	b570      	push	{r4, r5, r6, lr}
 8005f3e:	4e0e      	ldr	r6, [pc, #56]	; (8005f78 <sbrk_aligned+0x3c>)
 8005f40:	460c      	mov	r4, r1
 8005f42:	6831      	ldr	r1, [r6, #0]
 8005f44:	4605      	mov	r5, r0
 8005f46:	b911      	cbnz	r1, 8005f4e <sbrk_aligned+0x12>
 8005f48:	f000 fbaa 	bl	80066a0 <_sbrk_r>
 8005f4c:	6030      	str	r0, [r6, #0]
 8005f4e:	4621      	mov	r1, r4
 8005f50:	4628      	mov	r0, r5
 8005f52:	f000 fba5 	bl	80066a0 <_sbrk_r>
 8005f56:	1c43      	adds	r3, r0, #1
 8005f58:	d00a      	beq.n	8005f70 <sbrk_aligned+0x34>
 8005f5a:	1cc4      	adds	r4, r0, #3
 8005f5c:	f024 0403 	bic.w	r4, r4, #3
 8005f60:	42a0      	cmp	r0, r4
 8005f62:	d007      	beq.n	8005f74 <sbrk_aligned+0x38>
 8005f64:	1a21      	subs	r1, r4, r0
 8005f66:	4628      	mov	r0, r5
 8005f68:	f000 fb9a 	bl	80066a0 <_sbrk_r>
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d101      	bne.n	8005f74 <sbrk_aligned+0x38>
 8005f70:	f04f 34ff 	mov.w	r4, #4294967295
 8005f74:	4620      	mov	r0, r4
 8005f76:	bd70      	pop	{r4, r5, r6, pc}
 8005f78:	2000422c 	.word	0x2000422c

08005f7c <_malloc_r>:
 8005f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f80:	1ccd      	adds	r5, r1, #3
 8005f82:	f025 0503 	bic.w	r5, r5, #3
 8005f86:	3508      	adds	r5, #8
 8005f88:	2d0c      	cmp	r5, #12
 8005f8a:	bf38      	it	cc
 8005f8c:	250c      	movcc	r5, #12
 8005f8e:	2d00      	cmp	r5, #0
 8005f90:	4607      	mov	r7, r0
 8005f92:	db01      	blt.n	8005f98 <_malloc_r+0x1c>
 8005f94:	42a9      	cmp	r1, r5
 8005f96:	d905      	bls.n	8005fa4 <_malloc_r+0x28>
 8005f98:	230c      	movs	r3, #12
 8005f9a:	2600      	movs	r6, #0
 8005f9c:	603b      	str	r3, [r7, #0]
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fa4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006078 <_malloc_r+0xfc>
 8005fa8:	f000 f868 	bl	800607c <__malloc_lock>
 8005fac:	f8d8 3000 	ldr.w	r3, [r8]
 8005fb0:	461c      	mov	r4, r3
 8005fb2:	bb5c      	cbnz	r4, 800600c <_malloc_r+0x90>
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	f7ff ffc0 	bl	8005f3c <sbrk_aligned>
 8005fbc:	1c43      	adds	r3, r0, #1
 8005fbe:	4604      	mov	r4, r0
 8005fc0:	d155      	bne.n	800606e <_malloc_r+0xf2>
 8005fc2:	f8d8 4000 	ldr.w	r4, [r8]
 8005fc6:	4626      	mov	r6, r4
 8005fc8:	2e00      	cmp	r6, #0
 8005fca:	d145      	bne.n	8006058 <_malloc_r+0xdc>
 8005fcc:	2c00      	cmp	r4, #0
 8005fce:	d048      	beq.n	8006062 <_malloc_r+0xe6>
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	4631      	mov	r1, r6
 8005fd4:	4638      	mov	r0, r7
 8005fd6:	eb04 0903 	add.w	r9, r4, r3
 8005fda:	f000 fb61 	bl	80066a0 <_sbrk_r>
 8005fde:	4581      	cmp	r9, r0
 8005fe0:	d13f      	bne.n	8006062 <_malloc_r+0xe6>
 8005fe2:	6821      	ldr	r1, [r4, #0]
 8005fe4:	4638      	mov	r0, r7
 8005fe6:	1a6d      	subs	r5, r5, r1
 8005fe8:	4629      	mov	r1, r5
 8005fea:	f7ff ffa7 	bl	8005f3c <sbrk_aligned>
 8005fee:	3001      	adds	r0, #1
 8005ff0:	d037      	beq.n	8006062 <_malloc_r+0xe6>
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	442b      	add	r3, r5
 8005ff6:	6023      	str	r3, [r4, #0]
 8005ff8:	f8d8 3000 	ldr.w	r3, [r8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d038      	beq.n	8006072 <_malloc_r+0xf6>
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	42a2      	cmp	r2, r4
 8006004:	d12b      	bne.n	800605e <_malloc_r+0xe2>
 8006006:	2200      	movs	r2, #0
 8006008:	605a      	str	r2, [r3, #4]
 800600a:	e00f      	b.n	800602c <_malloc_r+0xb0>
 800600c:	6822      	ldr	r2, [r4, #0]
 800600e:	1b52      	subs	r2, r2, r5
 8006010:	d41f      	bmi.n	8006052 <_malloc_r+0xd6>
 8006012:	2a0b      	cmp	r2, #11
 8006014:	d917      	bls.n	8006046 <_malloc_r+0xca>
 8006016:	1961      	adds	r1, r4, r5
 8006018:	42a3      	cmp	r3, r4
 800601a:	6025      	str	r5, [r4, #0]
 800601c:	bf18      	it	ne
 800601e:	6059      	strne	r1, [r3, #4]
 8006020:	6863      	ldr	r3, [r4, #4]
 8006022:	bf08      	it	eq
 8006024:	f8c8 1000 	streq.w	r1, [r8]
 8006028:	5162      	str	r2, [r4, r5]
 800602a:	604b      	str	r3, [r1, #4]
 800602c:	4638      	mov	r0, r7
 800602e:	f104 060b 	add.w	r6, r4, #11
 8006032:	f000 f829 	bl	8006088 <__malloc_unlock>
 8006036:	f026 0607 	bic.w	r6, r6, #7
 800603a:	1d23      	adds	r3, r4, #4
 800603c:	1af2      	subs	r2, r6, r3
 800603e:	d0ae      	beq.n	8005f9e <_malloc_r+0x22>
 8006040:	1b9b      	subs	r3, r3, r6
 8006042:	50a3      	str	r3, [r4, r2]
 8006044:	e7ab      	b.n	8005f9e <_malloc_r+0x22>
 8006046:	42a3      	cmp	r3, r4
 8006048:	6862      	ldr	r2, [r4, #4]
 800604a:	d1dd      	bne.n	8006008 <_malloc_r+0x8c>
 800604c:	f8c8 2000 	str.w	r2, [r8]
 8006050:	e7ec      	b.n	800602c <_malloc_r+0xb0>
 8006052:	4623      	mov	r3, r4
 8006054:	6864      	ldr	r4, [r4, #4]
 8006056:	e7ac      	b.n	8005fb2 <_malloc_r+0x36>
 8006058:	4634      	mov	r4, r6
 800605a:	6876      	ldr	r6, [r6, #4]
 800605c:	e7b4      	b.n	8005fc8 <_malloc_r+0x4c>
 800605e:	4613      	mov	r3, r2
 8006060:	e7cc      	b.n	8005ffc <_malloc_r+0x80>
 8006062:	230c      	movs	r3, #12
 8006064:	4638      	mov	r0, r7
 8006066:	603b      	str	r3, [r7, #0]
 8006068:	f000 f80e 	bl	8006088 <__malloc_unlock>
 800606c:	e797      	b.n	8005f9e <_malloc_r+0x22>
 800606e:	6025      	str	r5, [r4, #0]
 8006070:	e7dc      	b.n	800602c <_malloc_r+0xb0>
 8006072:	605b      	str	r3, [r3, #4]
 8006074:	deff      	udf	#255	; 0xff
 8006076:	bf00      	nop
 8006078:	20004228 	.word	0x20004228

0800607c <__malloc_lock>:
 800607c:	4801      	ldr	r0, [pc, #4]	; (8006084 <__malloc_lock+0x8>)
 800607e:	f7ff bf05 	b.w	8005e8c <__retarget_lock_acquire_recursive>
 8006082:	bf00      	nop
 8006084:	20004224 	.word	0x20004224

08006088 <__malloc_unlock>:
 8006088:	4801      	ldr	r0, [pc, #4]	; (8006090 <__malloc_unlock+0x8>)
 800608a:	f7ff bf00 	b.w	8005e8e <__retarget_lock_release_recursive>
 800608e:	bf00      	nop
 8006090:	20004224 	.word	0x20004224

08006094 <__ssputs_r>:
 8006094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006098:	461f      	mov	r7, r3
 800609a:	688e      	ldr	r6, [r1, #8]
 800609c:	4682      	mov	sl, r0
 800609e:	42be      	cmp	r6, r7
 80060a0:	460c      	mov	r4, r1
 80060a2:	4690      	mov	r8, r2
 80060a4:	680b      	ldr	r3, [r1, #0]
 80060a6:	d82c      	bhi.n	8006102 <__ssputs_r+0x6e>
 80060a8:	898a      	ldrh	r2, [r1, #12]
 80060aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060ae:	d026      	beq.n	80060fe <__ssputs_r+0x6a>
 80060b0:	6965      	ldr	r5, [r4, #20]
 80060b2:	6909      	ldr	r1, [r1, #16]
 80060b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060b8:	eba3 0901 	sub.w	r9, r3, r1
 80060bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060c0:	1c7b      	adds	r3, r7, #1
 80060c2:	444b      	add	r3, r9
 80060c4:	106d      	asrs	r5, r5, #1
 80060c6:	429d      	cmp	r5, r3
 80060c8:	bf38      	it	cc
 80060ca:	461d      	movcc	r5, r3
 80060cc:	0553      	lsls	r3, r2, #21
 80060ce:	d527      	bpl.n	8006120 <__ssputs_r+0x8c>
 80060d0:	4629      	mov	r1, r5
 80060d2:	f7ff ff53 	bl	8005f7c <_malloc_r>
 80060d6:	4606      	mov	r6, r0
 80060d8:	b360      	cbz	r0, 8006134 <__ssputs_r+0xa0>
 80060da:	464a      	mov	r2, r9
 80060dc:	6921      	ldr	r1, [r4, #16]
 80060de:	f7ff fed7 	bl	8005e90 <memcpy>
 80060e2:	89a3      	ldrh	r3, [r4, #12]
 80060e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80060e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ec:	81a3      	strh	r3, [r4, #12]
 80060ee:	6126      	str	r6, [r4, #16]
 80060f0:	444e      	add	r6, r9
 80060f2:	6026      	str	r6, [r4, #0]
 80060f4:	463e      	mov	r6, r7
 80060f6:	6165      	str	r5, [r4, #20]
 80060f8:	eba5 0509 	sub.w	r5, r5, r9
 80060fc:	60a5      	str	r5, [r4, #8]
 80060fe:	42be      	cmp	r6, r7
 8006100:	d900      	bls.n	8006104 <__ssputs_r+0x70>
 8006102:	463e      	mov	r6, r7
 8006104:	4632      	mov	r2, r6
 8006106:	4641      	mov	r1, r8
 8006108:	6820      	ldr	r0, [r4, #0]
 800610a:	f000 faaf 	bl	800666c <memmove>
 800610e:	2000      	movs	r0, #0
 8006110:	68a3      	ldr	r3, [r4, #8]
 8006112:	1b9b      	subs	r3, r3, r6
 8006114:	60a3      	str	r3, [r4, #8]
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	4433      	add	r3, r6
 800611a:	6023      	str	r3, [r4, #0]
 800611c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006120:	462a      	mov	r2, r5
 8006122:	f000 fadb 	bl	80066dc <_realloc_r>
 8006126:	4606      	mov	r6, r0
 8006128:	2800      	cmp	r0, #0
 800612a:	d1e0      	bne.n	80060ee <__ssputs_r+0x5a>
 800612c:	4650      	mov	r0, sl
 800612e:	6921      	ldr	r1, [r4, #16]
 8006130:	f7ff febc 	bl	8005eac <_free_r>
 8006134:	230c      	movs	r3, #12
 8006136:	f8ca 3000 	str.w	r3, [sl]
 800613a:	89a3      	ldrh	r3, [r4, #12]
 800613c:	f04f 30ff 	mov.w	r0, #4294967295
 8006140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006144:	81a3      	strh	r3, [r4, #12]
 8006146:	e7e9      	b.n	800611c <__ssputs_r+0x88>

08006148 <_svfiprintf_r>:
 8006148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614c:	4698      	mov	r8, r3
 800614e:	898b      	ldrh	r3, [r1, #12]
 8006150:	4607      	mov	r7, r0
 8006152:	061b      	lsls	r3, r3, #24
 8006154:	460d      	mov	r5, r1
 8006156:	4614      	mov	r4, r2
 8006158:	b09d      	sub	sp, #116	; 0x74
 800615a:	d50e      	bpl.n	800617a <_svfiprintf_r+0x32>
 800615c:	690b      	ldr	r3, [r1, #16]
 800615e:	b963      	cbnz	r3, 800617a <_svfiprintf_r+0x32>
 8006160:	2140      	movs	r1, #64	; 0x40
 8006162:	f7ff ff0b 	bl	8005f7c <_malloc_r>
 8006166:	6028      	str	r0, [r5, #0]
 8006168:	6128      	str	r0, [r5, #16]
 800616a:	b920      	cbnz	r0, 8006176 <_svfiprintf_r+0x2e>
 800616c:	230c      	movs	r3, #12
 800616e:	603b      	str	r3, [r7, #0]
 8006170:	f04f 30ff 	mov.w	r0, #4294967295
 8006174:	e0d0      	b.n	8006318 <_svfiprintf_r+0x1d0>
 8006176:	2340      	movs	r3, #64	; 0x40
 8006178:	616b      	str	r3, [r5, #20]
 800617a:	2300      	movs	r3, #0
 800617c:	9309      	str	r3, [sp, #36]	; 0x24
 800617e:	2320      	movs	r3, #32
 8006180:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006184:	2330      	movs	r3, #48	; 0x30
 8006186:	f04f 0901 	mov.w	r9, #1
 800618a:	f8cd 800c 	str.w	r8, [sp, #12]
 800618e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006330 <_svfiprintf_r+0x1e8>
 8006192:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006196:	4623      	mov	r3, r4
 8006198:	469a      	mov	sl, r3
 800619a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800619e:	b10a      	cbz	r2, 80061a4 <_svfiprintf_r+0x5c>
 80061a0:	2a25      	cmp	r2, #37	; 0x25
 80061a2:	d1f9      	bne.n	8006198 <_svfiprintf_r+0x50>
 80061a4:	ebba 0b04 	subs.w	fp, sl, r4
 80061a8:	d00b      	beq.n	80061c2 <_svfiprintf_r+0x7a>
 80061aa:	465b      	mov	r3, fp
 80061ac:	4622      	mov	r2, r4
 80061ae:	4629      	mov	r1, r5
 80061b0:	4638      	mov	r0, r7
 80061b2:	f7ff ff6f 	bl	8006094 <__ssputs_r>
 80061b6:	3001      	adds	r0, #1
 80061b8:	f000 80a9 	beq.w	800630e <_svfiprintf_r+0x1c6>
 80061bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061be:	445a      	add	r2, fp
 80061c0:	9209      	str	r2, [sp, #36]	; 0x24
 80061c2:	f89a 3000 	ldrb.w	r3, [sl]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 80a1 	beq.w	800630e <_svfiprintf_r+0x1c6>
 80061cc:	2300      	movs	r3, #0
 80061ce:	f04f 32ff 	mov.w	r2, #4294967295
 80061d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061d6:	f10a 0a01 	add.w	sl, sl, #1
 80061da:	9304      	str	r3, [sp, #16]
 80061dc:	9307      	str	r3, [sp, #28]
 80061de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061e2:	931a      	str	r3, [sp, #104]	; 0x68
 80061e4:	4654      	mov	r4, sl
 80061e6:	2205      	movs	r2, #5
 80061e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ec:	4850      	ldr	r0, [pc, #320]	; (8006330 <_svfiprintf_r+0x1e8>)
 80061ee:	f000 fa67 	bl	80066c0 <memchr>
 80061f2:	9a04      	ldr	r2, [sp, #16]
 80061f4:	b9d8      	cbnz	r0, 800622e <_svfiprintf_r+0xe6>
 80061f6:	06d0      	lsls	r0, r2, #27
 80061f8:	bf44      	itt	mi
 80061fa:	2320      	movmi	r3, #32
 80061fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006200:	0711      	lsls	r1, r2, #28
 8006202:	bf44      	itt	mi
 8006204:	232b      	movmi	r3, #43	; 0x2b
 8006206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800620a:	f89a 3000 	ldrb.w	r3, [sl]
 800620e:	2b2a      	cmp	r3, #42	; 0x2a
 8006210:	d015      	beq.n	800623e <_svfiprintf_r+0xf6>
 8006212:	4654      	mov	r4, sl
 8006214:	2000      	movs	r0, #0
 8006216:	f04f 0c0a 	mov.w	ip, #10
 800621a:	9a07      	ldr	r2, [sp, #28]
 800621c:	4621      	mov	r1, r4
 800621e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006222:	3b30      	subs	r3, #48	; 0x30
 8006224:	2b09      	cmp	r3, #9
 8006226:	d94d      	bls.n	80062c4 <_svfiprintf_r+0x17c>
 8006228:	b1b0      	cbz	r0, 8006258 <_svfiprintf_r+0x110>
 800622a:	9207      	str	r2, [sp, #28]
 800622c:	e014      	b.n	8006258 <_svfiprintf_r+0x110>
 800622e:	eba0 0308 	sub.w	r3, r0, r8
 8006232:	fa09 f303 	lsl.w	r3, r9, r3
 8006236:	4313      	orrs	r3, r2
 8006238:	46a2      	mov	sl, r4
 800623a:	9304      	str	r3, [sp, #16]
 800623c:	e7d2      	b.n	80061e4 <_svfiprintf_r+0x9c>
 800623e:	9b03      	ldr	r3, [sp, #12]
 8006240:	1d19      	adds	r1, r3, #4
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	9103      	str	r1, [sp, #12]
 8006246:	2b00      	cmp	r3, #0
 8006248:	bfbb      	ittet	lt
 800624a:	425b      	neglt	r3, r3
 800624c:	f042 0202 	orrlt.w	r2, r2, #2
 8006250:	9307      	strge	r3, [sp, #28]
 8006252:	9307      	strlt	r3, [sp, #28]
 8006254:	bfb8      	it	lt
 8006256:	9204      	strlt	r2, [sp, #16]
 8006258:	7823      	ldrb	r3, [r4, #0]
 800625a:	2b2e      	cmp	r3, #46	; 0x2e
 800625c:	d10c      	bne.n	8006278 <_svfiprintf_r+0x130>
 800625e:	7863      	ldrb	r3, [r4, #1]
 8006260:	2b2a      	cmp	r3, #42	; 0x2a
 8006262:	d134      	bne.n	80062ce <_svfiprintf_r+0x186>
 8006264:	9b03      	ldr	r3, [sp, #12]
 8006266:	3402      	adds	r4, #2
 8006268:	1d1a      	adds	r2, r3, #4
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	9203      	str	r2, [sp, #12]
 800626e:	2b00      	cmp	r3, #0
 8006270:	bfb8      	it	lt
 8006272:	f04f 33ff 	movlt.w	r3, #4294967295
 8006276:	9305      	str	r3, [sp, #20]
 8006278:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006334 <_svfiprintf_r+0x1ec>
 800627c:	2203      	movs	r2, #3
 800627e:	4650      	mov	r0, sl
 8006280:	7821      	ldrb	r1, [r4, #0]
 8006282:	f000 fa1d 	bl	80066c0 <memchr>
 8006286:	b138      	cbz	r0, 8006298 <_svfiprintf_r+0x150>
 8006288:	2240      	movs	r2, #64	; 0x40
 800628a:	9b04      	ldr	r3, [sp, #16]
 800628c:	eba0 000a 	sub.w	r0, r0, sl
 8006290:	4082      	lsls	r2, r0
 8006292:	4313      	orrs	r3, r2
 8006294:	3401      	adds	r4, #1
 8006296:	9304      	str	r3, [sp, #16]
 8006298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800629c:	2206      	movs	r2, #6
 800629e:	4826      	ldr	r0, [pc, #152]	; (8006338 <_svfiprintf_r+0x1f0>)
 80062a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062a4:	f000 fa0c 	bl	80066c0 <memchr>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d038      	beq.n	800631e <_svfiprintf_r+0x1d6>
 80062ac:	4b23      	ldr	r3, [pc, #140]	; (800633c <_svfiprintf_r+0x1f4>)
 80062ae:	bb1b      	cbnz	r3, 80062f8 <_svfiprintf_r+0x1b0>
 80062b0:	9b03      	ldr	r3, [sp, #12]
 80062b2:	3307      	adds	r3, #7
 80062b4:	f023 0307 	bic.w	r3, r3, #7
 80062b8:	3308      	adds	r3, #8
 80062ba:	9303      	str	r3, [sp, #12]
 80062bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062be:	4433      	add	r3, r6
 80062c0:	9309      	str	r3, [sp, #36]	; 0x24
 80062c2:	e768      	b.n	8006196 <_svfiprintf_r+0x4e>
 80062c4:	460c      	mov	r4, r1
 80062c6:	2001      	movs	r0, #1
 80062c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80062cc:	e7a6      	b.n	800621c <_svfiprintf_r+0xd4>
 80062ce:	2300      	movs	r3, #0
 80062d0:	f04f 0c0a 	mov.w	ip, #10
 80062d4:	4619      	mov	r1, r3
 80062d6:	3401      	adds	r4, #1
 80062d8:	9305      	str	r3, [sp, #20]
 80062da:	4620      	mov	r0, r4
 80062dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062e0:	3a30      	subs	r2, #48	; 0x30
 80062e2:	2a09      	cmp	r2, #9
 80062e4:	d903      	bls.n	80062ee <_svfiprintf_r+0x1a6>
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d0c6      	beq.n	8006278 <_svfiprintf_r+0x130>
 80062ea:	9105      	str	r1, [sp, #20]
 80062ec:	e7c4      	b.n	8006278 <_svfiprintf_r+0x130>
 80062ee:	4604      	mov	r4, r0
 80062f0:	2301      	movs	r3, #1
 80062f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80062f6:	e7f0      	b.n	80062da <_svfiprintf_r+0x192>
 80062f8:	ab03      	add	r3, sp, #12
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	462a      	mov	r2, r5
 80062fe:	4638      	mov	r0, r7
 8006300:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <_svfiprintf_r+0x1f8>)
 8006302:	a904      	add	r1, sp, #16
 8006304:	f3af 8000 	nop.w
 8006308:	1c42      	adds	r2, r0, #1
 800630a:	4606      	mov	r6, r0
 800630c:	d1d6      	bne.n	80062bc <_svfiprintf_r+0x174>
 800630e:	89ab      	ldrh	r3, [r5, #12]
 8006310:	065b      	lsls	r3, r3, #25
 8006312:	f53f af2d 	bmi.w	8006170 <_svfiprintf_r+0x28>
 8006316:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006318:	b01d      	add	sp, #116	; 0x74
 800631a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800631e:	ab03      	add	r3, sp, #12
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	462a      	mov	r2, r5
 8006324:	4638      	mov	r0, r7
 8006326:	4b06      	ldr	r3, [pc, #24]	; (8006340 <_svfiprintf_r+0x1f8>)
 8006328:	a904      	add	r1, sp, #16
 800632a:	f000 f87d 	bl	8006428 <_printf_i>
 800632e:	e7eb      	b.n	8006308 <_svfiprintf_r+0x1c0>
 8006330:	080068e0 	.word	0x080068e0
 8006334:	080068e6 	.word	0x080068e6
 8006338:	080068ea 	.word	0x080068ea
 800633c:	00000000 	.word	0x00000000
 8006340:	08006095 	.word	0x08006095

08006344 <_printf_common>:
 8006344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006348:	4616      	mov	r6, r2
 800634a:	4699      	mov	r9, r3
 800634c:	688a      	ldr	r2, [r1, #8]
 800634e:	690b      	ldr	r3, [r1, #16]
 8006350:	4607      	mov	r7, r0
 8006352:	4293      	cmp	r3, r2
 8006354:	bfb8      	it	lt
 8006356:	4613      	movlt	r3, r2
 8006358:	6033      	str	r3, [r6, #0]
 800635a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800635e:	460c      	mov	r4, r1
 8006360:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006364:	b10a      	cbz	r2, 800636a <_printf_common+0x26>
 8006366:	3301      	adds	r3, #1
 8006368:	6033      	str	r3, [r6, #0]
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	0699      	lsls	r1, r3, #26
 800636e:	bf42      	ittt	mi
 8006370:	6833      	ldrmi	r3, [r6, #0]
 8006372:	3302      	addmi	r3, #2
 8006374:	6033      	strmi	r3, [r6, #0]
 8006376:	6825      	ldr	r5, [r4, #0]
 8006378:	f015 0506 	ands.w	r5, r5, #6
 800637c:	d106      	bne.n	800638c <_printf_common+0x48>
 800637e:	f104 0a19 	add.w	sl, r4, #25
 8006382:	68e3      	ldr	r3, [r4, #12]
 8006384:	6832      	ldr	r2, [r6, #0]
 8006386:	1a9b      	subs	r3, r3, r2
 8006388:	42ab      	cmp	r3, r5
 800638a:	dc2b      	bgt.n	80063e4 <_printf_common+0xa0>
 800638c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006390:	1e13      	subs	r3, r2, #0
 8006392:	6822      	ldr	r2, [r4, #0]
 8006394:	bf18      	it	ne
 8006396:	2301      	movne	r3, #1
 8006398:	0692      	lsls	r2, r2, #26
 800639a:	d430      	bmi.n	80063fe <_printf_common+0xba>
 800639c:	4649      	mov	r1, r9
 800639e:	4638      	mov	r0, r7
 80063a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063a4:	47c0      	blx	r8
 80063a6:	3001      	adds	r0, #1
 80063a8:	d023      	beq.n	80063f2 <_printf_common+0xae>
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	6922      	ldr	r2, [r4, #16]
 80063ae:	f003 0306 	and.w	r3, r3, #6
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	bf14      	ite	ne
 80063b6:	2500      	movne	r5, #0
 80063b8:	6833      	ldreq	r3, [r6, #0]
 80063ba:	f04f 0600 	mov.w	r6, #0
 80063be:	bf08      	it	eq
 80063c0:	68e5      	ldreq	r5, [r4, #12]
 80063c2:	f104 041a 	add.w	r4, r4, #26
 80063c6:	bf08      	it	eq
 80063c8:	1aed      	subeq	r5, r5, r3
 80063ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80063ce:	bf08      	it	eq
 80063d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063d4:	4293      	cmp	r3, r2
 80063d6:	bfc4      	itt	gt
 80063d8:	1a9b      	subgt	r3, r3, r2
 80063da:	18ed      	addgt	r5, r5, r3
 80063dc:	42b5      	cmp	r5, r6
 80063de:	d11a      	bne.n	8006416 <_printf_common+0xd2>
 80063e0:	2000      	movs	r0, #0
 80063e2:	e008      	b.n	80063f6 <_printf_common+0xb2>
 80063e4:	2301      	movs	r3, #1
 80063e6:	4652      	mov	r2, sl
 80063e8:	4649      	mov	r1, r9
 80063ea:	4638      	mov	r0, r7
 80063ec:	47c0      	blx	r8
 80063ee:	3001      	adds	r0, #1
 80063f0:	d103      	bne.n	80063fa <_printf_common+0xb6>
 80063f2:	f04f 30ff 	mov.w	r0, #4294967295
 80063f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063fa:	3501      	adds	r5, #1
 80063fc:	e7c1      	b.n	8006382 <_printf_common+0x3e>
 80063fe:	2030      	movs	r0, #48	; 0x30
 8006400:	18e1      	adds	r1, r4, r3
 8006402:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800640c:	4422      	add	r2, r4
 800640e:	3302      	adds	r3, #2
 8006410:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006414:	e7c2      	b.n	800639c <_printf_common+0x58>
 8006416:	2301      	movs	r3, #1
 8006418:	4622      	mov	r2, r4
 800641a:	4649      	mov	r1, r9
 800641c:	4638      	mov	r0, r7
 800641e:	47c0      	blx	r8
 8006420:	3001      	adds	r0, #1
 8006422:	d0e6      	beq.n	80063f2 <_printf_common+0xae>
 8006424:	3601      	adds	r6, #1
 8006426:	e7d9      	b.n	80063dc <_printf_common+0x98>

08006428 <_printf_i>:
 8006428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800642c:	7e0f      	ldrb	r7, [r1, #24]
 800642e:	4691      	mov	r9, r2
 8006430:	2f78      	cmp	r7, #120	; 0x78
 8006432:	4680      	mov	r8, r0
 8006434:	460c      	mov	r4, r1
 8006436:	469a      	mov	sl, r3
 8006438:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800643a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800643e:	d807      	bhi.n	8006450 <_printf_i+0x28>
 8006440:	2f62      	cmp	r7, #98	; 0x62
 8006442:	d80a      	bhi.n	800645a <_printf_i+0x32>
 8006444:	2f00      	cmp	r7, #0
 8006446:	f000 80d5 	beq.w	80065f4 <_printf_i+0x1cc>
 800644a:	2f58      	cmp	r7, #88	; 0x58
 800644c:	f000 80c1 	beq.w	80065d2 <_printf_i+0x1aa>
 8006450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006454:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006458:	e03a      	b.n	80064d0 <_printf_i+0xa8>
 800645a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800645e:	2b15      	cmp	r3, #21
 8006460:	d8f6      	bhi.n	8006450 <_printf_i+0x28>
 8006462:	a101      	add	r1, pc, #4	; (adr r1, 8006468 <_printf_i+0x40>)
 8006464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006468:	080064c1 	.word	0x080064c1
 800646c:	080064d5 	.word	0x080064d5
 8006470:	08006451 	.word	0x08006451
 8006474:	08006451 	.word	0x08006451
 8006478:	08006451 	.word	0x08006451
 800647c:	08006451 	.word	0x08006451
 8006480:	080064d5 	.word	0x080064d5
 8006484:	08006451 	.word	0x08006451
 8006488:	08006451 	.word	0x08006451
 800648c:	08006451 	.word	0x08006451
 8006490:	08006451 	.word	0x08006451
 8006494:	080065db 	.word	0x080065db
 8006498:	08006501 	.word	0x08006501
 800649c:	08006595 	.word	0x08006595
 80064a0:	08006451 	.word	0x08006451
 80064a4:	08006451 	.word	0x08006451
 80064a8:	080065fd 	.word	0x080065fd
 80064ac:	08006451 	.word	0x08006451
 80064b0:	08006501 	.word	0x08006501
 80064b4:	08006451 	.word	0x08006451
 80064b8:	08006451 	.word	0x08006451
 80064bc:	0800659d 	.word	0x0800659d
 80064c0:	682b      	ldr	r3, [r5, #0]
 80064c2:	1d1a      	adds	r2, r3, #4
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	602a      	str	r2, [r5, #0]
 80064c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064d0:	2301      	movs	r3, #1
 80064d2:	e0a0      	b.n	8006616 <_printf_i+0x1ee>
 80064d4:	6820      	ldr	r0, [r4, #0]
 80064d6:	682b      	ldr	r3, [r5, #0]
 80064d8:	0607      	lsls	r7, r0, #24
 80064da:	f103 0104 	add.w	r1, r3, #4
 80064de:	6029      	str	r1, [r5, #0]
 80064e0:	d501      	bpl.n	80064e6 <_printf_i+0xbe>
 80064e2:	681e      	ldr	r6, [r3, #0]
 80064e4:	e003      	b.n	80064ee <_printf_i+0xc6>
 80064e6:	0646      	lsls	r6, r0, #25
 80064e8:	d5fb      	bpl.n	80064e2 <_printf_i+0xba>
 80064ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80064ee:	2e00      	cmp	r6, #0
 80064f0:	da03      	bge.n	80064fa <_printf_i+0xd2>
 80064f2:	232d      	movs	r3, #45	; 0x2d
 80064f4:	4276      	negs	r6, r6
 80064f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064fa:	230a      	movs	r3, #10
 80064fc:	4859      	ldr	r0, [pc, #356]	; (8006664 <_printf_i+0x23c>)
 80064fe:	e012      	b.n	8006526 <_printf_i+0xfe>
 8006500:	682b      	ldr	r3, [r5, #0]
 8006502:	6820      	ldr	r0, [r4, #0]
 8006504:	1d19      	adds	r1, r3, #4
 8006506:	6029      	str	r1, [r5, #0]
 8006508:	0605      	lsls	r5, r0, #24
 800650a:	d501      	bpl.n	8006510 <_printf_i+0xe8>
 800650c:	681e      	ldr	r6, [r3, #0]
 800650e:	e002      	b.n	8006516 <_printf_i+0xee>
 8006510:	0641      	lsls	r1, r0, #25
 8006512:	d5fb      	bpl.n	800650c <_printf_i+0xe4>
 8006514:	881e      	ldrh	r6, [r3, #0]
 8006516:	2f6f      	cmp	r7, #111	; 0x6f
 8006518:	bf0c      	ite	eq
 800651a:	2308      	moveq	r3, #8
 800651c:	230a      	movne	r3, #10
 800651e:	4851      	ldr	r0, [pc, #324]	; (8006664 <_printf_i+0x23c>)
 8006520:	2100      	movs	r1, #0
 8006522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006526:	6865      	ldr	r5, [r4, #4]
 8006528:	2d00      	cmp	r5, #0
 800652a:	bfa8      	it	ge
 800652c:	6821      	ldrge	r1, [r4, #0]
 800652e:	60a5      	str	r5, [r4, #8]
 8006530:	bfa4      	itt	ge
 8006532:	f021 0104 	bicge.w	r1, r1, #4
 8006536:	6021      	strge	r1, [r4, #0]
 8006538:	b90e      	cbnz	r6, 800653e <_printf_i+0x116>
 800653a:	2d00      	cmp	r5, #0
 800653c:	d04b      	beq.n	80065d6 <_printf_i+0x1ae>
 800653e:	4615      	mov	r5, r2
 8006540:	fbb6 f1f3 	udiv	r1, r6, r3
 8006544:	fb03 6711 	mls	r7, r3, r1, r6
 8006548:	5dc7      	ldrb	r7, [r0, r7]
 800654a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800654e:	4637      	mov	r7, r6
 8006550:	42bb      	cmp	r3, r7
 8006552:	460e      	mov	r6, r1
 8006554:	d9f4      	bls.n	8006540 <_printf_i+0x118>
 8006556:	2b08      	cmp	r3, #8
 8006558:	d10b      	bne.n	8006572 <_printf_i+0x14a>
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	07de      	lsls	r6, r3, #31
 800655e:	d508      	bpl.n	8006572 <_printf_i+0x14a>
 8006560:	6923      	ldr	r3, [r4, #16]
 8006562:	6861      	ldr	r1, [r4, #4]
 8006564:	4299      	cmp	r1, r3
 8006566:	bfde      	ittt	le
 8006568:	2330      	movle	r3, #48	; 0x30
 800656a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800656e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006572:	1b52      	subs	r2, r2, r5
 8006574:	6122      	str	r2, [r4, #16]
 8006576:	464b      	mov	r3, r9
 8006578:	4621      	mov	r1, r4
 800657a:	4640      	mov	r0, r8
 800657c:	f8cd a000 	str.w	sl, [sp]
 8006580:	aa03      	add	r2, sp, #12
 8006582:	f7ff fedf 	bl	8006344 <_printf_common>
 8006586:	3001      	adds	r0, #1
 8006588:	d14a      	bne.n	8006620 <_printf_i+0x1f8>
 800658a:	f04f 30ff 	mov.w	r0, #4294967295
 800658e:	b004      	add	sp, #16
 8006590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	f043 0320 	orr.w	r3, r3, #32
 800659a:	6023      	str	r3, [r4, #0]
 800659c:	2778      	movs	r7, #120	; 0x78
 800659e:	4832      	ldr	r0, [pc, #200]	; (8006668 <_printf_i+0x240>)
 80065a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80065a4:	6823      	ldr	r3, [r4, #0]
 80065a6:	6829      	ldr	r1, [r5, #0]
 80065a8:	061f      	lsls	r7, r3, #24
 80065aa:	f851 6b04 	ldr.w	r6, [r1], #4
 80065ae:	d402      	bmi.n	80065b6 <_printf_i+0x18e>
 80065b0:	065f      	lsls	r7, r3, #25
 80065b2:	bf48      	it	mi
 80065b4:	b2b6      	uxthmi	r6, r6
 80065b6:	07df      	lsls	r7, r3, #31
 80065b8:	bf48      	it	mi
 80065ba:	f043 0320 	orrmi.w	r3, r3, #32
 80065be:	6029      	str	r1, [r5, #0]
 80065c0:	bf48      	it	mi
 80065c2:	6023      	strmi	r3, [r4, #0]
 80065c4:	b91e      	cbnz	r6, 80065ce <_printf_i+0x1a6>
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	f023 0320 	bic.w	r3, r3, #32
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	2310      	movs	r3, #16
 80065d0:	e7a6      	b.n	8006520 <_printf_i+0xf8>
 80065d2:	4824      	ldr	r0, [pc, #144]	; (8006664 <_printf_i+0x23c>)
 80065d4:	e7e4      	b.n	80065a0 <_printf_i+0x178>
 80065d6:	4615      	mov	r5, r2
 80065d8:	e7bd      	b.n	8006556 <_printf_i+0x12e>
 80065da:	682b      	ldr	r3, [r5, #0]
 80065dc:	6826      	ldr	r6, [r4, #0]
 80065de:	1d18      	adds	r0, r3, #4
 80065e0:	6961      	ldr	r1, [r4, #20]
 80065e2:	6028      	str	r0, [r5, #0]
 80065e4:	0635      	lsls	r5, r6, #24
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	d501      	bpl.n	80065ee <_printf_i+0x1c6>
 80065ea:	6019      	str	r1, [r3, #0]
 80065ec:	e002      	b.n	80065f4 <_printf_i+0x1cc>
 80065ee:	0670      	lsls	r0, r6, #25
 80065f0:	d5fb      	bpl.n	80065ea <_printf_i+0x1c2>
 80065f2:	8019      	strh	r1, [r3, #0]
 80065f4:	2300      	movs	r3, #0
 80065f6:	4615      	mov	r5, r2
 80065f8:	6123      	str	r3, [r4, #16]
 80065fa:	e7bc      	b.n	8006576 <_printf_i+0x14e>
 80065fc:	682b      	ldr	r3, [r5, #0]
 80065fe:	2100      	movs	r1, #0
 8006600:	1d1a      	adds	r2, r3, #4
 8006602:	602a      	str	r2, [r5, #0]
 8006604:	681d      	ldr	r5, [r3, #0]
 8006606:	6862      	ldr	r2, [r4, #4]
 8006608:	4628      	mov	r0, r5
 800660a:	f000 f859 	bl	80066c0 <memchr>
 800660e:	b108      	cbz	r0, 8006614 <_printf_i+0x1ec>
 8006610:	1b40      	subs	r0, r0, r5
 8006612:	6060      	str	r0, [r4, #4]
 8006614:	6863      	ldr	r3, [r4, #4]
 8006616:	6123      	str	r3, [r4, #16]
 8006618:	2300      	movs	r3, #0
 800661a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800661e:	e7aa      	b.n	8006576 <_printf_i+0x14e>
 8006620:	462a      	mov	r2, r5
 8006622:	4649      	mov	r1, r9
 8006624:	4640      	mov	r0, r8
 8006626:	6923      	ldr	r3, [r4, #16]
 8006628:	47d0      	blx	sl
 800662a:	3001      	adds	r0, #1
 800662c:	d0ad      	beq.n	800658a <_printf_i+0x162>
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	079b      	lsls	r3, r3, #30
 8006632:	d413      	bmi.n	800665c <_printf_i+0x234>
 8006634:	68e0      	ldr	r0, [r4, #12]
 8006636:	9b03      	ldr	r3, [sp, #12]
 8006638:	4298      	cmp	r0, r3
 800663a:	bfb8      	it	lt
 800663c:	4618      	movlt	r0, r3
 800663e:	e7a6      	b.n	800658e <_printf_i+0x166>
 8006640:	2301      	movs	r3, #1
 8006642:	4632      	mov	r2, r6
 8006644:	4649      	mov	r1, r9
 8006646:	4640      	mov	r0, r8
 8006648:	47d0      	blx	sl
 800664a:	3001      	adds	r0, #1
 800664c:	d09d      	beq.n	800658a <_printf_i+0x162>
 800664e:	3501      	adds	r5, #1
 8006650:	68e3      	ldr	r3, [r4, #12]
 8006652:	9903      	ldr	r1, [sp, #12]
 8006654:	1a5b      	subs	r3, r3, r1
 8006656:	42ab      	cmp	r3, r5
 8006658:	dcf2      	bgt.n	8006640 <_printf_i+0x218>
 800665a:	e7eb      	b.n	8006634 <_printf_i+0x20c>
 800665c:	2500      	movs	r5, #0
 800665e:	f104 0619 	add.w	r6, r4, #25
 8006662:	e7f5      	b.n	8006650 <_printf_i+0x228>
 8006664:	080068f1 	.word	0x080068f1
 8006668:	08006902 	.word	0x08006902

0800666c <memmove>:
 800666c:	4288      	cmp	r0, r1
 800666e:	b510      	push	{r4, lr}
 8006670:	eb01 0402 	add.w	r4, r1, r2
 8006674:	d902      	bls.n	800667c <memmove+0x10>
 8006676:	4284      	cmp	r4, r0
 8006678:	4623      	mov	r3, r4
 800667a:	d807      	bhi.n	800668c <memmove+0x20>
 800667c:	1e43      	subs	r3, r0, #1
 800667e:	42a1      	cmp	r1, r4
 8006680:	d008      	beq.n	8006694 <memmove+0x28>
 8006682:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006686:	f803 2f01 	strb.w	r2, [r3, #1]!
 800668a:	e7f8      	b.n	800667e <memmove+0x12>
 800668c:	4601      	mov	r1, r0
 800668e:	4402      	add	r2, r0
 8006690:	428a      	cmp	r2, r1
 8006692:	d100      	bne.n	8006696 <memmove+0x2a>
 8006694:	bd10      	pop	{r4, pc}
 8006696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800669a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800669e:	e7f7      	b.n	8006690 <memmove+0x24>

080066a0 <_sbrk_r>:
 80066a0:	b538      	push	{r3, r4, r5, lr}
 80066a2:	2300      	movs	r3, #0
 80066a4:	4d05      	ldr	r5, [pc, #20]	; (80066bc <_sbrk_r+0x1c>)
 80066a6:	4604      	mov	r4, r0
 80066a8:	4608      	mov	r0, r1
 80066aa:	602b      	str	r3, [r5, #0]
 80066ac:	f000 f84e 	bl	800674c <_sbrk>
 80066b0:	1c43      	adds	r3, r0, #1
 80066b2:	d102      	bne.n	80066ba <_sbrk_r+0x1a>
 80066b4:	682b      	ldr	r3, [r5, #0]
 80066b6:	b103      	cbz	r3, 80066ba <_sbrk_r+0x1a>
 80066b8:	6023      	str	r3, [r4, #0]
 80066ba:	bd38      	pop	{r3, r4, r5, pc}
 80066bc:	20004220 	.word	0x20004220

080066c0 <memchr>:
 80066c0:	4603      	mov	r3, r0
 80066c2:	b510      	push	{r4, lr}
 80066c4:	b2c9      	uxtb	r1, r1
 80066c6:	4402      	add	r2, r0
 80066c8:	4293      	cmp	r3, r2
 80066ca:	4618      	mov	r0, r3
 80066cc:	d101      	bne.n	80066d2 <memchr+0x12>
 80066ce:	2000      	movs	r0, #0
 80066d0:	e003      	b.n	80066da <memchr+0x1a>
 80066d2:	7804      	ldrb	r4, [r0, #0]
 80066d4:	3301      	adds	r3, #1
 80066d6:	428c      	cmp	r4, r1
 80066d8:	d1f6      	bne.n	80066c8 <memchr+0x8>
 80066da:	bd10      	pop	{r4, pc}

080066dc <_realloc_r>:
 80066dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066e0:	4680      	mov	r8, r0
 80066e2:	4614      	mov	r4, r2
 80066e4:	460e      	mov	r6, r1
 80066e6:	b921      	cbnz	r1, 80066f2 <_realloc_r+0x16>
 80066e8:	4611      	mov	r1, r2
 80066ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066ee:	f7ff bc45 	b.w	8005f7c <_malloc_r>
 80066f2:	b92a      	cbnz	r2, 8006700 <_realloc_r+0x24>
 80066f4:	f7ff fbda 	bl	8005eac <_free_r>
 80066f8:	4625      	mov	r5, r4
 80066fa:	4628      	mov	r0, r5
 80066fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006700:	f000 f81b 	bl	800673a <_malloc_usable_size_r>
 8006704:	4284      	cmp	r4, r0
 8006706:	4607      	mov	r7, r0
 8006708:	d802      	bhi.n	8006710 <_realloc_r+0x34>
 800670a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800670e:	d812      	bhi.n	8006736 <_realloc_r+0x5a>
 8006710:	4621      	mov	r1, r4
 8006712:	4640      	mov	r0, r8
 8006714:	f7ff fc32 	bl	8005f7c <_malloc_r>
 8006718:	4605      	mov	r5, r0
 800671a:	2800      	cmp	r0, #0
 800671c:	d0ed      	beq.n	80066fa <_realloc_r+0x1e>
 800671e:	42bc      	cmp	r4, r7
 8006720:	4622      	mov	r2, r4
 8006722:	4631      	mov	r1, r6
 8006724:	bf28      	it	cs
 8006726:	463a      	movcs	r2, r7
 8006728:	f7ff fbb2 	bl	8005e90 <memcpy>
 800672c:	4631      	mov	r1, r6
 800672e:	4640      	mov	r0, r8
 8006730:	f7ff fbbc 	bl	8005eac <_free_r>
 8006734:	e7e1      	b.n	80066fa <_realloc_r+0x1e>
 8006736:	4635      	mov	r5, r6
 8006738:	e7df      	b.n	80066fa <_realloc_r+0x1e>

0800673a <_malloc_usable_size_r>:
 800673a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800673e:	1f18      	subs	r0, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	bfbc      	itt	lt
 8006744:	580b      	ldrlt	r3, [r1, r0]
 8006746:	18c0      	addlt	r0, r0, r3
 8006748:	4770      	bx	lr
	...

0800674c <_sbrk>:
 800674c:	4a04      	ldr	r2, [pc, #16]	; (8006760 <_sbrk+0x14>)
 800674e:	4603      	mov	r3, r0
 8006750:	6811      	ldr	r1, [r2, #0]
 8006752:	b909      	cbnz	r1, 8006758 <_sbrk+0xc>
 8006754:	4903      	ldr	r1, [pc, #12]	; (8006764 <_sbrk+0x18>)
 8006756:	6011      	str	r1, [r2, #0]
 8006758:	6810      	ldr	r0, [r2, #0]
 800675a:	4403      	add	r3, r0
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	4770      	bx	lr
 8006760:	20004230 	.word	0x20004230
 8006764:	20004238 	.word	0x20004238

08006768 <_init>:
 8006768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676a:	bf00      	nop
 800676c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676e:	bc08      	pop	{r3}
 8006770:	469e      	mov	lr, r3
 8006772:	4770      	bx	lr

08006774 <_fini>:
 8006774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006776:	bf00      	nop
 8006778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677a:	bc08      	pop	{r3}
 800677c:	469e      	mov	lr, r3
 800677e:	4770      	bx	lr
